package handlers

import (
	"Original/internal/constants"
	"Original/internal/db"
	"Original/internal/models"
	"Original/internal/utils"
	"fmt"
	"log"
	"math"
	"strings"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
)

// SendOwnerCashManagementMenu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é "–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞" –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–Ω–æ–≤–æ–µ).
func (bh *BotHandler) SendOwnerCashManagementMenu(chatID int64, user models.User, messageIDToEdit int) {
	log.Printf("SendOwnerCashManagementMenu: –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ChatID=%d, messageIDToEdit=%d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_CASH_MANAGEMENT_MENU)

	bh.Deps.SessionManager.ClearTempOrder(chatID)
	bh.Deps.SessionManager.ClearTempDriverSettlement(chatID)

	msgText := "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùóÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ (–∫—Ç–æ –¥–æ–ª–∂–µ–Ω)", fmt.Sprintf("%s_0", constants.CALLBACK_PREFIX_OWNER_CASH_ACTUAL_LIST)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ (–∫—Ç–æ –≤–Ω–µ—Å/–∫–æ–º—É –≤—ã–ø–ª–∞—á–µ–Ω–æ)", fmt.Sprintf("%s_0", constants.CALLBACK_PREFIX_OWNER_CASH_SETTLED_LIST)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)
	sentMsg, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendOwnerCashManagementMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	} else {
		if sentMsg.MessageID != 0 {
			// CurrentMessageID –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ TempOrder sendOrEditMessageHelper
		}
	}
}

// SendOwnerActualDebtsList - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π.
func (bh *BotHandler) SendOwnerActualDebtsList(chatID int64, user models.User, messageIDToEdit int, page int) {
	log.Printf("SendOwnerActualDebtsList: –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ChatID=%d, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d, messageIDToEdit %d", chatID, page, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_CASH_ACTUAL_LIST)

	aggregatedDriverData, totalDrivers, err := db.GetAggregatedDriverSettlements(constants.VIEW_TYPE_ACTUAL_SETTLEMENTS)
	if err != nil {
		log.Printf("SendOwnerActualDebtsList: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤.")
		return
	}

	var msgText string
	var rows [][]tgbotapi.InlineKeyboardButton

	start := page * constants.CashRecordsPerPage
	end := start + constants.CashRecordsPerPage
	var paginatedAggregatedData []models.AggregatedDriverSettlementInfo

	if start >= len(aggregatedDriverData) {
		paginatedAggregatedData = []models.AggregatedDriverSettlementInfo{}
	} else if end > len(aggregatedDriverData) {
		paginatedAggregatedData = aggregatedDriverData[start:]
	} else {
		paginatedAggregatedData = aggregatedDriverData[start:end]
	}

	if len(paginatedAggregatedData) == 0 && page == 0 {
		msgText = "‚úÖ –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å, –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–æ–ª–≥–æ–≤ –Ω–µ—Ç (–æ–∂–∏–¥–∞—é—â–∏—Ö –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –ò –≤—ã–ø–ª–∞—Ç—ã –ó–ü)."
	} else if len(paginatedAggregatedData) == 0 && page > 0 {
		msgText = "‚úÖ –ë–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–æ–ª–≥–∞–º–∏ –Ω–µ—Ç."
	} else {
		msgText = "‚ùóÔ∏è *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –∫–∞—Å—Å—É –ò –≤—ã–ø–ª–∞—Ç–∞ –ó–ü –≤–æ–¥–∏—Ç–µ–ª—é):*\n\n"
		for _, aggData := range paginatedAggregatedData {
			driverModelsUser := models.User{
				FirstName: aggData.DriverFirstName.String,
				LastName:  aggData.DriverLastName.String,
				Nickname:  aggData.DriverNickname,
				ChatID:    aggData.DriverUserID,
			}
			driverName := utils.GetUserDisplayName(driverModelsUser)

			buttonText := fmt.Sprintf("üë§ %s | *%.0f ‚ÇΩ* (%d –æ—Ç—á.)",
				utils.EscapeTelegramMarkdown(driverName),
				aggData.TotalAmountToCashier,
				aggData.TotalReportsCount)

			callbackData := fmt.Sprintf("%s_%d_%s_0",
				constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS,
				aggData.DriverUserID,
				constants.VIEW_TYPE_ACTUAL_SETTLEMENTS,
			)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	totalPages := 0
	if totalDrivers > 0 && constants.CashRecordsPerPage > 0 {
		totalPages = int(math.Ceil(float64(totalDrivers) / float64(constants.CashRecordsPerPage)))
	}

	navRow := []tgbotapi.InlineKeyboardButton{}
	if page > 0 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥.", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_ACTUAL_LIST, page-1)))
	}
	if page < totalPages-1 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥. ‚û°Ô∏è", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_ACTUAL_LIST, page+1)))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –í –º–µ–Ω—é –î–°", constants.CALLBACK_PREFIX_OWNER_CASH_MANAGEMENT_MAIN),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendOwnerActualDebtsList (Aggregated): –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendOwnerSettledPaymentsList - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö/–≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—É–º–º –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º.
func (bh *BotHandler) SendOwnerSettledPaymentsList(chatID int64, user models.User, messageIDToEdit int, page int) {
	log.Printf("SendOwnerSettledPaymentsList: –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ChatID=%d, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d, messageIDToEdit %d", chatID, page, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_CASH_SETTLED_LIST)

	aggregatedDriverData, totalDrivers, err := db.GetAggregatedDriverSettlements(constants.VIEW_TYPE_SETTLED_SETTLEMENTS)
	if err != nil {
		log.Printf("SendOwnerSettledPaymentsList: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö.")
		return
	}

	var msgText string
	var rows [][]tgbotapi.InlineKeyboardButton

	start := page * constants.CashRecordsPerPage
	end := start + constants.CashRecordsPerPage
	var paginatedAggregatedData []models.AggregatedDriverSettlementInfo

	if start >= len(aggregatedDriverData) {
		paginatedAggregatedData = []models.AggregatedDriverSettlementInfo{}
	} else if end > len(aggregatedDriverData) {
		paginatedAggregatedData = aggregatedDriverData[start:]
	} else {
		paginatedAggregatedData = aggregatedDriverData[start:end]
	}

	if len(paginatedAggregatedData) == 0 && page == 0 {
		msgText = "‚ÑπÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö (–¥–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã –ò/–ò–õ–ò –ó–ü –≤—ã–ø–ª–∞—á–µ–Ω–∞) –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
	} else if len(paginatedAggregatedData) == 0 && page > 0 {
		msgText = "‚ÑπÔ∏è –ë–æ–ª—å—à–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ—Ç."
	} else {
		msgText = "‚úÖ *–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ (–¥–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ –∫–∞—Å—Å—É –ò/–ò–õ–ò –ó–ü –≤–æ–¥–∏—Ç–µ–ª—é –≤—ã–ø–ª–∞—á–µ–Ω–∞):*\n\n"
		for _, aggData := range paginatedAggregatedData {
			driverModelsUser := models.User{
				FirstName: aggData.DriverFirstName.String,
				LastName:  aggData.DriverLastName.String,
				Nickname:  aggData.DriverNickname,
				ChatID:    aggData.DriverUserID,
			}
			driverName := utils.GetUserDisplayName(driverModelsUser)

			buttonText := fmt.Sprintf("üë§ %s | *%.0f ‚ÇΩ* (%d –æ—Ç—á.)",
				utils.EscapeTelegramMarkdown(driverName),
				aggData.TotalAmountToCashier,
				aggData.TotalReportsCount)

			callbackData := fmt.Sprintf("%s_%d_%s_0",
				constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS,
				aggData.DriverUserID,
				constants.VIEW_TYPE_SETTLED_SETTLEMENTS,
			)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	totalPages := 0
	if totalDrivers > 0 && constants.CashRecordsPerPage > 0 {
		totalPages = int(math.Ceil(float64(totalDrivers) / float64(constants.CashRecordsPerPage)))
	}
	navRow := []tgbotapi.InlineKeyboardButton{}
	if page > 0 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥.", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_SETTLED_LIST, page-1)))
	}
	if page < totalPages-1 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥. ‚û°Ô∏è", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_SETTLED_LIST, page+1)))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –í –º–µ–Ω—é –î–°", constants.CALLBACK_PREFIX_OWNER_CASH_MANAGEMENT_MAIN),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendOwnerSettledPaymentsList (Aggregated): –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendOwnerDriverIndividualSettlementsList - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è.
func (bh *BotHandler) SendOwnerDriverIndividualSettlementsList(chatID int64, user models.User, messageIDToEdit int, driverUserID int64, viewType string, page int) {
	log.Printf("SendOwnerDriverIndividualSettlementsList: ChatID=%d, DriverUserID=%d, ViewType=%s, Page=%d, MsgID=%d",
		chatID, driverUserID, viewType, page, messageIDToEdit)

	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_CASH_VIEW_DRIVER_SETTLEMENTS)
	tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
	tempData.EditingSettlementID = 0
	tempData.FieldToEditByOwner = ""
	tempData.DriverUserIDForBackNav = driverUserID
	tempData.ViewTypeForBackNav = viewType
	tempData.PageForBackNav = page
	bh.Deps.SessionManager.UpdateTempDriverSettlement(chatID, tempData)

	settlements, totalRecords, err := db.GetDriverSettlementsForOwnerView(driverUserID, viewType, page, constants.CashRecordsPerPage)
	if err != nil {
		log.Printf("SendOwnerDriverIndividualSettlementsList: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è %d (viewType: %s): %v", driverUserID, viewType, err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è.")
		if viewType == constants.VIEW_TYPE_SETTLED_SETTLEMENTS {
			bh.SendOwnerSettledPaymentsList(chatID, user, messageIDToEdit, 0)
		} else {
			bh.SendOwnerActualDebtsList(chatID, user, messageIDToEdit, 0)
		}
		return
	}

	driver, errDriver := db.GetUserByID(int(driverUserID))
	driverDisplayName := fmt.Sprintf("–í–æ–¥–∏—Ç–µ–ª—å ID %d", driverUserID)
	if errDriver == nil {
		driverDisplayName = utils.GetUserDisplayName(driver)
	}

	var msgText string
	var rows [][]tgbotapi.InlineKeyboardButton

	viewTitle := "‚ùóÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –ò –≤—ã–ø–ª–∞—Ç–∞ –ó–ü)"
	if viewType == constants.VIEW_TYPE_SETTLED_SETTLEMENTS {
		viewTitle = "‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
	}
	msgText = fmt.Sprintf("%s –≤–æ–¥–∏—Ç–µ–ª—è *%s*:\n\n", viewTitle, utils.EscapeTelegramMarkdown(driverDisplayName))

	if len(settlements) == 0 && page == 0 {
		msgText += "–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
	} else if len(settlements) == 0 && page > 0 {
		msgText += "–ë–æ–ª—å—à–µ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ—Ç."
	} else {
		for _, s := range settlements {
			reportDateStr := s.SettlementTimestamp.Format("02.01.06 15:04")

			statusParts := []string{}
			moneyIn := s.PaidToOwnerAt.Valid
			salaryPaid := s.DriverSalaryPaidAt.Valid

			if moneyIn {
				statusParts = append(statusParts, fmt.Sprintf("–î–µ–Ω—å–≥–∏ ‚úÖ: %s", s.PaidToOwnerAt.Time.Format("02.01.06")))
			} else {
				statusParts = append(statusParts, "–î–µ–Ω—å–≥–∏ ‚ùå")
			}
			if salaryPaid {
				statusParts = append(statusParts, fmt.Sprintf("–ó–ü ‚úÖ: %s", s.DriverSalaryPaidAt.Time.Format("02.01.06")))
			} else {
				statusParts = append(statusParts, "–ó–ü ‚ùå")
			}
			statusLine := strings.Join(statusParts, ", ")

			if moneyIn && salaryPaid {
				statusLine += " (–†–∞—Å—Å—á–∏—Ç–∞–Ω ‚úÖ)"
			}

			msgText += fmt.Sprintf("üìù *–û—Ç—á–µ—Ç #%d* –æ—Ç %s (%s)\n", s.ID, reportDateStr, statusLine)
			msgText += "üì¶–ó–∞–∫–∞–∑—ã: "
			if len(s.CoveredOrderIDs) > 0 {
				for i, orderID := range s.CoveredOrderIDs {
					msgText += fmt.Sprintf("#%d", orderID)
					if i < len(s.CoveredOrderIDs)-1 {
						msgText += ", "
					}
				}
			} else {
				msgText += "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
			}
			msgText += fmt.Sprintf("\nüí∞–í—ã—Ä—É—á–∫–∞: %.0f ‚ÇΩ\n‚õΩÔ∏è–¢–æ–ø–ª–∏–≤–æ: %.0f ‚ÇΩ\n", s.CoveredOrdersRevenue, s.FuelExpense)

			// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø OtherExpenses ---
			if len(s.OtherExpenses) > 0 {
				msgText += "üõ†Ô∏è–ü—Ä–æ—á–∏–µ:\n"
				for _, oe := range s.OtherExpenses {
					msgText += fmt.Sprintf("    - %s: %.0f ‚ÇΩ\n", utils.EscapeTelegramMarkdown(oe.Description), oe.Amount)
				}
			} else {
				msgText += "üõ†Ô∏è–ü—Ä–æ—á–∏–µ: 0 ‚ÇΩ\n"
			}
			// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

			totalLoadersSalary := 0.0
			for _, lp := range s.LoaderPayments {
				totalLoadersSalary += lp.Amount
			}
			msgText += fmt.Sprintf("\nüë∑‚Äç–ó–ü –≥—Ä—É–∑—á–∏–∫–∞–º: %.0f ‚ÇΩ\n     *–†–∞—Å—á. –ó–ü –≤–æ–¥–∏—Ç–µ–ª—è: %.0f ‚ÇΩ*\n", totalLoadersSalary, s.DriverCalculatedSalary)
			msgText += fmt.Sprintf("     *–ö —Å–¥–∞—á–µ –≤ –∫–∞—Å—Å—É (–±—ã–ª–æ): %.0f ‚ÇΩ*\n\n", s.AmountToCashier)

			var reportActionButtons []tgbotapi.InlineKeyboardButton
			reportActionButtons = append(reportActionButtons, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚úèÔ∏è –†–µ–¥. #%d", s.ID),
				fmt.Sprintf("%s_%d_%d_%s_%d", constants.CALLBACK_PREFIX_OWNER_EDIT_SETTLEMENT, s.ID, driverUserID, viewType, page)))

			if moneyIn {
				reportActionButtons = append(reportActionButtons, tgbotapi.NewInlineKeyboardButtonData("‚ùóÔ∏èüí∏ –ù–ï –≤–Ω–æ—Å–∏–ª",
					fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_MARK_UNPAID, s.ID)))
			} else {
				reportActionButtons = append(reportActionButtons, tgbotapi.NewInlineKeyboardButtonData("‚úÖüí∏ –≤–Ω–µ—Å",
					fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_MARK_PAID, s.ID)))
			}

			if salaryPaid {
				reportActionButtons = append(reportActionButtons, tgbotapi.NewInlineKeyboardButtonData("üí∏ –ó–ü –ù–ï –ø–æ–ª—É—á–∏–ª",
					fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_MARK_SALARY_UNPAID, s.ID)))
			} else {
				reportActionButtons = append(reportActionButtons, tgbotapi.NewInlineKeyboardButtonData("üí∏ –ó–ü –ø–æ–ª—É—á–∏–ª",
					fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OWNER_CASH_MARK_SALARY_PAID, s.ID)))
			}
			rows = append(rows, reportActionButtons)
		}
	}

	if len(settlements) > 0 {
		var totalDriverSalary float64
		var totalAmountToCashier float64
		for _, s := range settlements {
			totalDriverSalary += s.DriverCalculatedSalary
			totalAmountToCashier += s.AmountToCashier
		}
		summaryText := fmt.Sprintf("\n--------------------------------------------------\n*–ò—Ç–æ–≥–æ –ø–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º:*\n–ó–ü –≤–æ–¥–∏—Ç–µ–ª—è - *%.0f ‚ÇΩ*\n–î–µ–Ω–µ–≥ –≤ –∫–∞—Å—Å—É (–±—ã–ª–æ) - *%.0f ‚ÇΩ*", totalDriverSalary, totalAmountToCashier)
		msgText += summaryText
	}

	if len(settlements) > 0 {
		var allActionsRow []tgbotapi.InlineKeyboardButton
		if viewType == constants.VIEW_TYPE_ACTUAL_SETTLEMENTS {
			canDepositAll := false
			for _, sItem := range settlements {
				if !sItem.PaidToOwnerAt.Valid {
					canDepositAll = true
					break
				}
			}
			if canDepositAll {
				allActionsRow = append(allActionsRow, tgbotapi.NewInlineKeyboardButtonData("üí∞ –î–µ–Ω—å–≥–∏ –≤–Ω–µ—Å –∑–∞ –≤—Å–µ (–Ω–∞ —Å—Ç—Ä.)",
					fmt.Sprintf("%s_%d_%s", constants.CALLBACK_PREFIX_OWNER_MARK_ALL_MONEY_DEPOSITED, driverUserID, viewType)))
			}
		}

		canPaySalaryForAll := false
		for _, sItem := range settlements {
			if !sItem.DriverSalaryPaidAt.Valid {
				canPaySalaryForAll = true
				break
			}
		}
		if canPaySalaryForAll {
			allActionsRow = append(allActionsRow, tgbotapi.NewInlineKeyboardButtonData("üíµ –ó–ü –ø–æ–ª—É—á–∏–ª –∑–∞ –≤—Å–µ (–Ω–∞ —Å—Ç—Ä.)",
				fmt.Sprintf("%s_%d_%s", constants.CALLBACK_PREFIX_OWNER_MARK_ALL_SALARY_PAID, driverUserID, viewType)))
		}

		if len(allActionsRow) > 0 {
			rows = append(rows, allActionsRow)
		}
	}

	totalPages := 0
	if totalRecords > 0 && constants.CashRecordsPerPage > 0 {
		totalPages = int(math.Ceil(float64(totalRecords) / float64(constants.CashRecordsPerPage)))
	}
	navRow := []tgbotapi.InlineKeyboardButton{}
	callbackPrefixForPagination := fmt.Sprintf("%s_%d_%s", constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS, driverUserID, viewType)

	if page > 0 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥.", fmt.Sprintf("%s_%d", callbackPrefixForPagination, page-1)))
	}
	if page < totalPages-1 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥. ‚û°Ô∏è", fmt.Sprintf("%s_%d", callbackPrefixForPagination, page+1)))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	backToListCallback := constants.CALLBACK_PREFIX_OWNER_CASH_ACTUAL_LIST + "_0"
	if viewType == constants.VIEW_TYPE_SETTLED_SETTLEMENTS {
		backToListCallback = constants.CALLBACK_PREFIX_OWNER_CASH_SETTLED_LIST + "_0"
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–¥–∏—Ç–µ–ª–µ–π", backToListCallback),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí∞ –í –º–µ–Ω—é –î–°", constants.CALLBACK_PREFIX_OWNER_CASH_MANAGEMENT_MAIN),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	sentMsg, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendOwnerDriverIndividualSettlementsList: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	} else {
		updatedTempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
		updatedTempData.CurrentMessageID = sentMsg.MessageID
		bh.Deps.SessionManager.UpdateTempDriverSettlement(chatID, updatedTempData)
	}
}
