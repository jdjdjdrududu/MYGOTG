package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"os" // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ Excel / For working with Excel files
	// "strconv" // Not used directly here
	// "strings" // Used in utils
	"time"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	"github.com/xuri/excelize/v2" // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel / For Excel generation

	"Original/internal/constants"
	"Original/internal/db"
	"Original/internal/models"
	// "Original/internal/session" // Access via bh.Deps
	"Original/internal/utils"
)

// SendExcelMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ Excel-–æ—Ç—á–µ—Ç–∞.
// SendExcelMenu sends the Excel report type selection menu.
func (bh *BotHandler) SendExcelMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendExcelMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω—è—Ç—å, —Ç–∞–∫ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
	// State may not need to be changed as action is performed immediately
	// bh.Deps.SessionManager.SetState(chatID, constants.STATE_ADMIN_ACTION)

	// –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ callback_handler –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	// Access rights are checked in callback_handler before calling this function

	msgText := "üìë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø Excel-–æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ó–∞–∫–∞–∑—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)", "excel_generate_orders"),
			tgbotapi.NewInlineKeyboardButtonData("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)", "excel_generate_referrals"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã (–∑–∞ —Å–µ–≥–æ–¥–Ω—è)", "excel_generate_salaries"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_menu"), // –ò–ª–∏ back_to_main, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
			// Or back_to_main if not called from statistics
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendExcelMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendExcelFile –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Excel-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
// SendExcelFile sends the generated Excel file to the user.
func (bh *BotHandler) SendExcelFile(chatID int64, filePath string, caption string) {
	log.Printf("BotHandler.SendExcelFile: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ %s –¥–ª—è chatID %d", filePath, chatID)

	if filePath == "" {
		bh.sendErrorMessageHelper(chatID, 0, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª.") // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ / Send new error message
		return
	}

	doc := tgbotapi.NewDocument(chatID, tgbotapi.FilePath(filePath))
	doc.Caption = caption
	_, err := bh.Deps.BotClient.Send(doc) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π Send –∏–∑ BotClient, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ñ–∞–π–ª / Use direct Send from BotClient as it's a file

	if err != nil {
		log.Printf("SendExcelFile: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel-—Ñ–∞–π–ª–∞ %s –¥–ª—è chatID %d: %v", filePath, chatID, err)
		bh.sendErrorMessageHelper(chatID, 0, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel-—Ñ–∞–π–ª–∞.")
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ / Delete temporary file after sending
	errRemove := os.Remove(filePath)
	if errRemove != nil {
		log.Printf("SendExcelFile: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ %s: %v", filePath, errRemove)
	}
}

// generateAndSendOrdersExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º.
// messageIDToEdit - ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ Excel, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.
// generateAndSendOrdersExcel generates and sends an Excel report on orders.
// messageIDToEdit - ID of the message with Excel selection buttons, to be deleted after sending the file.
func (bh *BotHandler) generateAndSendOrdersExcel(chatID int64, messageIDToEdit int) {
	rows, err := db.GetOrdersForExcel() // –ó–∞ —Å–µ–≥–æ–¥–Ω—è / For today
	if err != nil {
		log.Printf("generateAndSendOrdersExcel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º.")
		return
	}
	defer rows.Close()

	f := excelize.NewFile()
	sheetName := "–ó–∞–∫–∞–∑—ã"
	index, _ := f.NewSheet(sheetName) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (NewFile —Å–æ–∑–¥–∞–µ—Ç Sheet1) / Ignore error if sheet already exists (NewFile creates Sheet1)
	f.DeleteSheet("Sheet1")           // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç / Delete default sheet
	f.SetActiveSheet(index)

	headers := []string{"ID –ó–∞–∫–∞–∑–∞", "–ö–ª–∏–µ–Ω—Ç –ò–º—è", "–ö–ª–∏–µ–Ω—Ç –§–∞–º–∏–ª–∏—è", "–ö–ª–∏–µ–Ω—Ç –ù–∏–∫–Ω–µ–π–º", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞", "–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞", "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞", "–ê–¥—Ä–µ—Å", "–°—Ç–∞—Ç—É—Å", "–°—Ç–æ–∏–º–æ—Å—Ç—å"}
	for i, header := range headers {
		cell, _ := excelize.CoordinatesToCellName(i+1, 1)
		f.SetCellValue(sheetName, cell, header)
	}

	rowIndex := 2
	for rows.Next() {
		var id int
		var firstName, lastName, category, subcategory, phone, address, status string
		var nickname sql.NullString
		var date time.Time // db.GetOrdersForExcel –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å time.Time –¥–ª—è –¥–∞—Ç—ã / db.GetOrdersForExcel should return time.Time for date
		var timeStr sql.NullString
		var cost sql.NullFloat64

		// –ü–æ—Ä—è–¥–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å SELECT –≤ db.GetOrdersForExcel()
		// Scan order must match SELECT in db.GetOrdersForExcel()
		if errScan := rows.Scan(&id, &firstName, &lastName, &nickname, &category, &subcategory, &date, &timeStr, &phone, &address, &status, &cost); errScan != nil {
			log.Printf("generateAndSendOrdersExcel: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞: %v", errScan)
			continue
		}

		f.SetCellValue(sheetName, fmt.Sprintf("A%d", rowIndex), id)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", rowIndex), firstName)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", rowIndex), lastName)
		if nickname.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("D%d", rowIndex), nickname.String)
		}
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", rowIndex), constants.CategoryDisplayMap[category])
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", rowIndex), utils.GetDisplaySubcategory(models.Order{Category: category, Subcategory: subcategory}))
		f.SetCellValue(sheetName, fmt.Sprintf("G%d", rowIndex), date.Format("02.01.2006")) // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É / Format date
		if timeStr.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("H%d", rowIndex), timeStr.String)
		} else {
			f.SetCellValue(sheetName, fmt.Sprintf("H%d", rowIndex), "–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
		}
		f.SetCellValue(sheetName, fmt.Sprintf("I%d", rowIndex), phone)
		f.SetCellValue(sheetName, fmt.Sprintf("J%d", rowIndex), address)
		f.SetCellValue(sheetName, fmt.Sprintf("K%d", rowIndex), constants.StatusDisplayMap[status])
		if cost.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("L%d", rowIndex), cost.Float64)
		} else {
			f.SetCellValue(sheetName, fmt.Sprintf("L%d", rowIndex), 0.0)
		}
		rowIndex++
	}
	if err = rows.Err(); err != nil {
		log.Printf("generateAndSendOrdersExcel: –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è Excel.")
		return
	}

	filePath := fmt.Sprintf("orders_report_%s.xlsx", time.Now().Format("20060102_150405"))
	if errSave := f.SaveAs(filePath); errSave != nil {
		log.Printf("generateAndSendOrdersExcel: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: %v", errSave)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞.")
		return
	}

	bh.SendExcelFile(chatID, filePath, fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ %s", time.Now().Format("02.01.2006")))
	if messageIDToEdit != 0 { // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ Excel, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ / Delete message with Excel selection buttons if it existed
		bh.deleteMessageHelper(chatID, messageIDToEdit)
	}
}

// generateAndSendReferralsExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel –æ—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.
// generateAndSendReferralsExcel generates and sends an Excel report on referrals.
func (bh *BotHandler) generateAndSendReferralsExcel(chatID int64, messageIDToEdit int) {
	rows, err := db.GetReferralsForExcel() // –ó–∞ —Å–µ–≥–æ–¥–Ω—è / For today
	if err != nil {
		log.Printf("generateAndSendReferralsExcel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.")
		return
	}
	defer rows.Close()

	f := excelize.NewFile()
	sheetName := "–†–µ—Ñ–µ—Ä–∞–ª—ã"
	index, _ := f.NewSheet(sheetName)
	f.DeleteSheet("Sheet1")
	f.SetActiveSheet(index)

	headers := []string{"–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ò–º—è", "–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –§–∞–º–∏–ª–∏—è", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ò–º—è", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –§–∞–º–∏–ª–∏—è", "–°—É–º–º–∞ –ë–æ–Ω—É—Å–∞", "–î–∞—Ç–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –†–µ—Ñ–µ—Ä–∞–ª–∞", "–°—Ç–∞—Ç—É—Å –í—ã–ø–ª–∞—Ç—ã"}
	for i, header := range headers {
		cell, _ := excelize.CoordinatesToCellName(i+1, 1)
		f.SetCellValue(sheetName, cell, header)
	}
	rowIndex := 2
	for rows.Next() {
		var inviterFirstName, inviterLastName, inviteeFirstName, inviteeLastName string
		var amount float64
		var createdAt time.Time
		var paidOut bool // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–ª–∞—Ç—ã / Added for payout status

		// –ü–æ—Ä—è–¥–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å SELECT –≤ db.GetReferralsForExcel()
		// Scan order must match SELECT in db.GetReferralsForExcel()
		if errScan := rows.Scan(&inviterFirstName, &inviterLastName, &inviteeFirstName, &inviteeLastName, &amount, &createdAt, &paidOut); errScan != nil {
			log.Printf("generateAndSendReferralsExcel: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: %v", errScan)
			continue
		}
		f.SetCellValue(sheetName, fmt.Sprintf("A%d", rowIndex), inviterFirstName)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", rowIndex), inviterLastName)
		f.SetCellValue(sheetName, fmt.Sprintf("C%d", rowIndex), inviteeFirstName)
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", rowIndex), inviteeLastName)
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", rowIndex), amount)
		f.SetCellValue(sheetName, fmt.Sprintf("F%d", rowIndex), createdAt.Format("02.01.2006 15:04"))
		payoutStatusText := "–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ"
		if paidOut {
			payoutStatusText = "–í—ã–ø–ª–∞—á–µ–Ω–æ"
		}
		f.SetCellValue(sheetName, fmt.Sprintf("G%d", rowIndex), payoutStatusText)
		rowIndex++
	}
	if err = rows.Err(); err != nil {
		log.Printf("generateAndSendReferralsExcel: –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è Excel.")
		return
	}
	filePath := fmt.Sprintf("referrals_report_%s.xlsx", time.Now().Format("20060102_150405"))
	if errSave := f.SaveAs(filePath); errSave != nil {
		log.Printf("generateAndSendReferralsExcel: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: %v", errSave)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º.")
		return
	}
	bh.SendExcelFile(chatID, filePath, fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ %s", time.Now().Format("02.01.2006")))
	if messageIDToEdit != 0 {
		bh.deleteMessageHelper(chatID, messageIDToEdit)
	}
}

// generateAndSendSalariesExcel –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º.
// generateAndSendSalariesExcel generates and sends an Excel report on salaries.
func (bh *BotHandler) generateAndSendSalariesExcel(chatID int64, messageIDToEdit int) {
	rows, err := db.GetSalariesForExcel() // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é db.GetSalariesForExcel / Uses updated db.GetSalariesForExcel
	if err != nil {
		log.Printf("generateAndSendSalariesExcel: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º.")
		return
	}
	defer rows.Close()

	f := excelize.NewFile()
	sheetName := "–ó–∞—Ä–ø–ª–∞—Ç—ã"
	index, _ := f.NewSheet(sheetName)
	f.DeleteSheet("Sheet1")
	f.SetActiveSheet(index)

	headers := []string{"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ò–º—è", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –§–∞–º–∏–ª–∏—è", "–ü–æ–∑—ã–≤–Ω–æ–π", "–†–æ–ª—å", "–¢–∏–ø –ó–ü", "–°—É–º–º–∞ –ó–ü", "ID –ó–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –ó–∞–∫–∞–∑–∞", "–î–∞—Ç–∞ –†–∞—Å—á–µ—Ç–∞/–ù–∞—á–∏—Å–ª–µ–Ω–∏—è", "–ö–∞—Ä—Ç–∞ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"}
	for i, header := range headers {
		cell, _ := excelize.CoordinatesToCellName(i+1, 1)
		f.SetCellValue(sheetName, cell, header)
	}
	rowIndex := 2
	for rows.Next() {
		var firstName, lastName, role, salaryType string
		var nickname, encryptedCardNumber sql.NullString // encryptedCardNumber –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã / encryptedCardNumber for encrypted card
		var salaryAmount sql.NullFloat64
		var orderID sql.NullInt64
		var orderDate, calculationOrPayoutDate sql.NullTime

		// –ü–æ—Ä—è–¥–æ–∫ –∏ —Ç–∏–ø—ã –ø–æ–ª–µ–π –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å SELECT –≤ db.GetSalariesForExcel()
		// Scan order and types must match SELECT in db.GetSalariesForExcel()
		if errScan := rows.Scan(&firstName, &lastName, &nickname, &role, &salaryAmount, &orderID, &orderDate, &calculationOrPayoutDate, &salaryType, &encryptedCardNumber); errScan != nil {
			log.Printf("generateAndSendSalariesExcel: –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã: %v", errScan)
			continue
		}
		f.SetCellValue(sheetName, fmt.Sprintf("A%d", rowIndex), firstName)
		f.SetCellValue(sheetName, fmt.Sprintf("B%d", rowIndex), lastName)
		if nickname.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("C%d", rowIndex), nickname.String)
		}
		f.SetCellValue(sheetName, fmt.Sprintf("D%d", rowIndex), utils.GetRoleDisplayName(role))
		f.SetCellValue(sheetName, fmt.Sprintf("E%d", rowIndex), salaryType) // –¢–∏–ø –ó–ü (driver_share, loader_salary) / Salary type

		if salaryAmount.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", rowIndex), salaryAmount.Float64)
		} else {
			f.SetCellValue(sheetName, fmt.Sprintf("F%d", rowIndex), 0.0)
		}
		if orderID.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("G%d", rowIndex), orderID.Int64)
		}
		if orderDate.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("H%d", rowIndex), orderDate.Time.Format("02.01.2006"))
		}
		if calculationOrPayoutDate.Valid {
			f.SetCellValue(sheetName, fmt.Sprintf("I%d", rowIndex), calculationOrPayoutDate.Time.Format("02.01.2006"))
		}
		if encryptedCardNumber.Valid && encryptedCardNumber.String != "" {
			decryptedCard, errDecrypt := utils.DecryptCardNumber(encryptedCardNumber.String)
			if errDecrypt == nil {
				f.SetCellValue(sheetName, fmt.Sprintf("J%d", rowIndex), decryptedCard)
			} else {
				log.Printf("generateAndSendSalariesExcel: –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞: %v", errDecrypt)
				f.SetCellValue(sheetName, fmt.Sprintf("J%d", rowIndex), "[–æ—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä.]")
			}
		}

		rowIndex++
	}
	if err = rows.Err(); err != nil {
		log.Printf("generateAndSendSalariesExcel: –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç –¥–ª—è Excel.")
		return
	}
	filePath := fmt.Sprintf("salaries_report_%s.xlsx", time.Now().Format("20060102_150405"))
	if errSave := f.SaveAs(filePath); errSave != nil {
		log.Printf("generateAndSendSalariesExcel: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: %v", errSave)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º.")
		return
	}
	bh.SendExcelFile(chatID, filePath, fmt.Sprintf("–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º –∑–∞ %s", time.Now().Format("02.01.2006")))
	if messageIDToEdit != 0 {
		bh.deleteMessageHelper(chatID, messageIDToEdit)
	}
}

// --- –ú–µ–Ω—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Block/Unblock) ---
// --- User Blocking Menu (Block/Unblock) ---
// (–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –∑–∞—Ä–ø–ª–∞—Ç/–≤—ã–ø–ª–∞—Ç)
// (These functions remain unchanged if they do not affect the new salary/payout logic)

// SendBlockUserMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å).
// SendBlockUserMenu sends the action selection menu (block/unblock).
func (bh *BotHandler) SendBlockUserMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendBlockUserMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_BLOCK_USER_MENU)

	msgText := "üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "block_user_list_prompt"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "unblock_user_list_prompt"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendBlockUserMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendUserListForBlocking –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.
// SendUserListForBlocking sends a list of users to select whom to block.
func (bh *BotHandler) SendUserListForBlocking(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendUserListForBlocking –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_BLOCK_USER_SELECT)

	users, err := db.GetUsersForBlocking()
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
		return
	}

	msgText := "üîí –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
	var rows [][]tgbotapi.InlineKeyboardButton
	if len(users) == 0 {
		msgText += "\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (—Ä–æ–ª—å 'user', –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)."
	} else {
		for _, u := range users {
			displayName := utils.GetUserDisplayName(u)
			if len(displayName) > 50 {
				displayName = displayName[:47] + "..."
			}
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(displayName, fmt.Sprintf("block_user_info_%d", u.ChatID)),
			))
		}
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä. –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏", "block_user_menu")))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, "")
	if errSend != nil {
		log.Printf("SendUserListForBlocking: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendBlockUserInfo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.
// SendBlockUserInfo shows info before blocking.
func (bh *BotHandler) SendBlockUserInfo(chatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendBlockUserInfo –¥–ª—è chatID %d, —Ü–µ–ª—å: %d, messageIDToEdit: %d", chatID, targetChatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_BLOCK_USER_CONFIRM_INFO)

	targetUser, err := db.GetUserByChatID(targetChatID)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}
	if targetUser.IsBlocked {
		bh.sendInfoMessage(chatID, messageIDToEdit, fmt.Sprintf("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", targetUser.FirstName, targetUser.LastName), "block_user_list_prompt")
		return
	}
	if targetUser.Role != constants.ROLE_USER { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å / Check if it's a regular user
		bh.sendInfoMessage(chatID, messageIDToEdit, fmt.Sprintf("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (%s) —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–º.", utils.GetRoleDisplayName(targetUser.Role)), "block_user_list_prompt")
		return
	}

	phone := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.Phone.Valid {
		phone = utils.FormatPhoneNumber(targetUser.Phone.String)
	}
	nickname := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.Nickname.Valid {
		nickname = targetUser.Nickname.String
	}

	msgText := fmt.Sprintf(
		"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: *%s %s*\n"+
			"–ù–∏–∫–Ω–µ–π–º: *%s*\n"+
			"Telegram ChatID: `%d`\n"+
			"–¢–µ–ª–µ—Ñ–æ–Ω: *%s*\n"+
			"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: *%s*\n\n"+
			"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
		utils.EscapeTelegramMarkdown(targetUser.FirstName), utils.EscapeTelegramMarkdown(targetUser.LastName),
		utils.EscapeTelegramMarkdown(nickname), targetUser.ChatID,
		utils.EscapeTelegramMarkdown(phone), utils.EscapeTelegramMarkdown(utils.GetRoleDisplayName(targetUser.Role)),
	)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîí –î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("block_user_reason_prompt_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "block_user_list_prompt"),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendBlockUserInfo: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendBlockReasonInput –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞).
// SendBlockReasonInput prompts for the reason for blocking a user (not staff).
func (bh *BotHandler) SendBlockReasonInput(chatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendBlockReasonInput –¥–ª—è chatID %d, —Ü–µ–ª—å: %d, messageIDToEdit: %d", chatID, targetChatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_BLOCK_REASON)

	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.BlockTargetChatID = targetChatID // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ / Save user ID for blocking
	tempData.CurrentMessageID = messageIDToEdit
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	msgText := fmt.Sprintf("üö´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ChatID: `%d`):", targetChatID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", fmt.Sprintf("block_user_info_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É", "block_user_list_prompt"), // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É / Return to list
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendBlockReasonInput: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendUserListForUnblocking –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞.
// SendUserListForUnblocking sends a list of blocked users for selection.
func (bh *BotHandler) SendUserListForUnblocking(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendUserListForUnblocking –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_UNBLOCK_USER_SELECT)

	blockedUsers, err := db.GetBlockedUsers()
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
		return
	}
	msgText := "üîì –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
	var rows [][]tgbotapi.InlineKeyboardButton
	if len(blockedUsers) == 0 {
		msgText += "\n\n–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
	} else {
		for _, u := range blockedUsers {
			displayName := utils.GetUserDisplayName(u)
			reason := "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
			if u.BlockReason.Valid {
				reason = u.BlockReason.String
			}
			if len(reason) > 20 {
				reason = reason[:17] + "..."
			}
			dateStr := ""
			if u.BlockDate.Valid {
				dateStr = u.BlockDate.Time.Format("02.01.06")
			}

			buttonText := fmt.Sprintf("%s (–ó–∞–±–ª: %s, –ü—Ä–∏—á–∏–Ω–∞: %s)", displayName, dateStr, reason)
			if len(buttonText) > 60 {
				buttonText = buttonText[:57] + "..."
			}

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("unblock_user_info_%d", u.ChatID)),
			))
		}
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä. –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏", "block_user_menu")))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, "")
	if errSend != nil {
		log.Printf("SendUserListForUnblocking: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendUnblockUserInfo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π.
// SendUnblockUserInfo shows information about a blocked user before unblocking.
func (bh *BotHandler) SendUnblockUserInfo(chatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendUnblockUserInfo –¥–ª—è chatID %d, —Ü–µ–ª—å: %d, messageIDToEdit: %d", chatID, targetChatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_UNBLOCK_USER_CONFIRM_INFO)

	targetUser, err := db.GetUserByChatID(targetChatID)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}
	if !targetUser.IsBlocked {
		bh.sendInfoMessage(chatID, messageIDToEdit, fmt.Sprintf("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", targetUser.FirstName, targetUser.LastName), "unblock_user_list_prompt")
		return
	}

	phone := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.Phone.Valid {
		phone = utils.FormatPhoneNumber(targetUser.Phone.String)
	}
	nickname := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.Nickname.Valid {
		nickname = targetUser.Nickname.String
	}
	reason := "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
	if targetUser.BlockReason.Valid {
		reason = targetUser.BlockReason.String
	}
	blockDate := "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	if targetUser.BlockDate.Valid {
		blockDate = targetUser.BlockDate.Time.Format("02.01.2006 –≤ 15:04")
	}

	msgText := fmt.Sprintf(
		"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: *%s %s*\n"+
			"–ù–∏–∫–Ω–µ–π–º: *%s*\n"+
			"Telegram ChatID: `%d`\n"+
			"–¢–µ–ª–µ—Ñ–æ–Ω: *%s*\n"+
			"–†–æ–ª—å: *%s*\n"+
			"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: *%s*\n"+
			"–ü—Ä–∏—á–∏–Ω–∞: *%s*\n\n"+
			"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
		utils.EscapeTelegramMarkdown(targetUser.FirstName), utils.EscapeTelegramMarkdown(targetUser.LastName),
		utils.EscapeTelegramMarkdown(nickname), targetUser.ChatID,
		utils.EscapeTelegramMarkdown(phone), utils.EscapeTelegramMarkdown(utils.GetRoleDisplayName(targetUser.Role)),
		utils.EscapeTelegramMarkdown(blockDate), utils.EscapeTelegramMarkdown(reason),
	)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîì –î–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("unblock_user_final_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "unblock_user_list_prompt"),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendUnblockUserInfo: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}
