package handlers

import (
	"Original/internal/constants"
	"Original/internal/db"
	"Original/internal/models"
	"Original/internal/utils"
	// "database/sql" // –£–±—Ä–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
	"fmt"
	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	"log"
	// "strconv" // –£–±—Ä–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
)

// SendMySalaryMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (–≥—Ä—É–∑—á–∏–∫—É, –≤–æ–¥–∏—Ç–µ–ª—é) –º–µ–Ω—é "–ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞".
func (bh *BotHandler) SendMySalaryMenu(chatID int64, user models.User, messageIDToEdit int) {
	log.Printf("SendMySalaryMenu: –¥–ª—è ChatID=%d, –†–æ–ª—å=%s, MessageIDToEdit=%d", chatID, user.Role, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_MY_SALARY_MENU)

	if user.Role == constants.ROLE_USER {
		bh.sendAccessDenied(chatID, messageIDToEdit)
		return
	}

	text := "üí∞ –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
	var rows [][]tgbotapi.InlineKeyboardButton

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ùì –°–∫–æ–ª—å–∫–æ –º–Ω–µ –¥–æ–ª–∂–Ω—ã?", fmt.Sprintf("%s_owed", constants.CALLBACK_PREFIX_MY_SALARY)),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìä –°–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª (–≤—Å–µ–≥–æ)?", fmt.Sprintf("%s_earned_stats", constants.CALLBACK_PREFIX_MY_SALARY)),
	))

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, text, &keyboard, "")
	if err != nil {
		log.Printf("SendMySalaryMenu: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –¥–ª—è ChatID %d: %v", chatID, err)
	}
}

// HandleShowAmountOwed –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–∫–æ–ª—å–∫–æ –µ–º—É –¥–æ–ª–∂–Ω—ã.
func (bh *BotHandler) HandleShowAmountOwed(chatID int64, user models.User, messageIDToEdit int) {
	log.Printf("HandleShowAmountOwed: –¥–ª—è ChatID=%d, –†–æ–ª—å=%s", chatID, user.Role)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_VIEW_SALARY_OWED)

	amountOwed, err := db.GetAmountOwedToUser(user.ID, user.Role)
	if err != nil {
		log.Printf("HandleShowAmountOwed: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –∫ –≤—ã–ø–ª–∞—Ç–µ –¥–ª—è UserID %d (ChatID %d): %v", user.ID, chatID, err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—É–º–º–µ –∫ –≤—ã–ø–ª–∞—Ç–µ.")
		return
	}

	var cardNumberDisplay string
	if user.CardNumber.Valid && user.CardNumber.String != "" {
		cardNumberDisplay = fmt.Sprintf("\nüí≥ –ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç: `%s`", utils.EscapeTelegramMarkdown(user.CardNumber.String))
	} else {
		cardNumberDisplay = "\n‚ö†Ô∏è –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
	}

	text := fmt.Sprintf("üí∏ –í–∞–º –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å: *%.0f ‚ÇΩ*%s", amountOwed, cardNumberDisplay)
	if amountOwed <= 0 {
		text = "‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã." + cardNumberDisplay
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ '–ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞'", constants.CALLBACK_PREFIX_MY_SALARY),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, text, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("HandleShowAmountOwed: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatID %d: %v", chatID, errSend)
	}
}

// HandleShowEarnedStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–∫–æ–ª—å–∫–æ –æ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª (–æ–±—â–∞—è —Å—É–º–º–∞).
func (bh *BotHandler) HandleShowEarnedStats(chatID int64, user models.User, messageIDToEdit int) {
	log.Printf("HandleShowEarnedStats: –¥–ª—è ChatID=%d, –†–æ–ª—å=%s", chatID, user.Role)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_VIEW_SALARY_EARNED)

	totalEarned, err := db.GetTotalEarnedForUser(user.ID, user.Role)
	if err != nil {
		log.Printf("HandleShowEarnedStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è UserID %d (ChatID %d): %v", user.ID, chatID, err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—É–º–º–µ.")
		return
	}
	text := fmt.Sprintf("üìä –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è): *%.0f ‚ÇΩ*", totalEarned)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ '–ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞'", constants.CALLBACK_PREFIX_MY_SALARY),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, text, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("HandleShowEarnedStats: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatID %d: %v", chatID, errSend)
	}
}

// --- –£–î–ê–õ–ï–ù–´ –£–°–¢–ê–†–ï–í–®–ò–ï –§–£–ù–ö–¶–ò–ò ---
// SendDriverExpensesMainMenu
// SendDriverSelectOrderForExpenses
// SendDriverExpenseInputMenu
// --- –ö–û–ù–ï–¶ –£–î–ê–õ–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô ---

// SendOwnerPayoutsMainMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–ø–ª–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞.
func (bh *BotHandler) SendOwnerPayoutsMainMenu(chatID int64, user models.User, messageIDToEdit int) {
	log.Printf("SendOwnerPayoutsMainMenu: –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ ChatID=%d", chatID)
	if user.Role != constants.ROLE_OWNER {
		bh.sendAccessDenied(chatID, messageIDToEdit)
		return
	}
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_STAFF_PAYOUTS_MENU)
	bh.SendOwnerStaffListForPayout(chatID, user, messageIDToEdit, 0)
}

// SendOwnerStaffListForPayout –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Å—É–º–º–∞–º–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ –í–ª–∞–¥–µ–ª—å—Ü—É.
func (bh *BotHandler) SendOwnerStaffListForPayout(chatID int64, user models.User, messageIDToEdit int, page int) {
	log.Printf("SendOwnerStaffListForPayout: –¥–ª—è –í–ª–∞–¥–µ–ª—å—Ü–∞ ChatID=%d, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d", chatID, page)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_SELECT_STAFF_FOR_PAYOUT)

	staffRoles := []string{constants.ROLE_DRIVER, constants.ROLE_LOADER, constants.ROLE_OPERATOR, constants.ROLE_MAINOPERATOR}
	allStaff, err := db.GetUsersByRole(staffRoles...)
	if err != nil {
		log.Printf("SendOwnerStaffListForPayout: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: %v", err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
		return
	}

	var staffWithDebt []models.User
	var staffDebtMap = make(map[int64]float64)

	for _, staffMember := range allStaff {
		amountOwed, errOwed := db.GetAmountOwedToUser(staffMember.ID, staffMember.Role)
		if errOwed != nil {
			log.Printf("SendOwnerStaffListForPayout: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –∫ –≤—ã–ø–ª–∞—Ç–µ –¥–ª—è UserID %d: %v", staffMember.ID, errOwed)
			continue
		}
		if amountOwed > 0 {
			staffWithDebt = append(staffWithDebt, staffMember)
			staffDebtMap[staffMember.ID] = amountOwed
		}
	}

	start := page * constants.PayoutsPerPage
	end := start + constants.PayoutsPerPage
	var paginatedStaff []models.User
	if start >= len(staffWithDebt) {
		paginatedStaff = []models.User{}
	} else if end > len(staffWithDebt) {
		paginatedStaff = staffWithDebt[start:]
	} else {
		paginatedStaff = staffWithDebt[start:end]
	}

	var msgText string
	var keyboard tgbotapi.InlineKeyboardMarkup
	var rows [][]tgbotapi.InlineKeyboardButton

	if len(paginatedStaff) == 0 && page == 0 {
		msgText = "üí∏ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ."
	} else if len(paginatedStaff) == 0 && page > 0 {
		msgText = "üí∏ –ë–æ–ª—å—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–µ—Ç."
	} else {
		msgText = "üí∏ –í—ã–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã:"
		for _, staffMember := range paginatedStaff { // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
			amountOwed := staffDebtMap[staffMember.ID]
			displayName := utils.GetUserDisplayName(staffMember)
			cardDisplay := "–ö–∞—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
			if staffMember.CardNumber.Valid && staffMember.CardNumber.String != "" {
				cardDisplay = fmt.Sprintf("–ö–∞—Ä—Ç–∞: `%s`", utils.EscapeTelegramMarkdown(staffMember.CardNumber.String))
			}

			buttonText := fmt.Sprintf("%s (%s) - %.0f ‚ÇΩ [%s]", displayName, utils.GetRoleDisplayName(staffMember.Role), amountOwed, cardDisplay)
			if len(buttonText) > 60 {
				buttonText = buttonText[:57] + "..."
			}
			callbackData := fmt.Sprintf("%s_select_%d_%.0f", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT, staffMember.ID, amountOwed)
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
			))
		}
	}

	navRow := []tgbotapi.InlineKeyboardButton{}
	if page > 0 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("%s_page_%d", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT, page-1)))
	}
	// –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
	if end < len(staffWithDebt) { // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º end —Å –æ–±—â–µ–π –¥–ª–∏–Ω–æ–π —Å–ø–∏—Å–∫–∞ staffWithDebt (–¥–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –î–∞–ª–µ–µ", fmt.Sprintf("%s_page_%d", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT, page+1)))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
	))
	keyboard.InlineKeyboard = rows

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendOwnerStaffListForPayout: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –¥–ª—è ChatID %d: %v", chatID, errSend)
	}
}

// SendOwnerConfirmPayoutToStaff –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–ª–∞–¥–µ–ª—å—Ü—É –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.
func (bh *BotHandler) SendOwnerConfirmPayoutToStaff(chatID int64, user models.User, targetUserID int64, amountOwed float64, messageIDToEdit int) {
	log.Printf("SendOwnerConfirmPayoutToStaff: –í–ª–∞–¥–µ–ª–µ—Ü %d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É %.0f —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É UserID %d", chatID, amountOwed, targetUserID)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OWNER_CONFIRM_STAFF_PAYOUT)

	targetStaff, err := db.GetUserByID(int(targetUserID))
	if err != nil {
		log.Printf("SendOwnerConfirmPayoutToStaff: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ UserID %d: %v", targetUserID, err)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}

	cardDisplay := "–ö–∞—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
	if targetStaff.CardNumber.Valid && targetStaff.CardNumber.String != "" {
		cardDisplay = fmt.Sprintf("`%s`", utils.EscapeTelegramMarkdown(targetStaff.CardNumber.String))
	}
	confirmText := fmt.Sprintf("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–ª–∞—Ç–∏—Ç—å *%.0f ‚ÇΩ* —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É %s (%s) –Ω–∞ –∫–∞—Ä—Ç—É %s?",
		amountOwed, utils.GetUserDisplayName(targetStaff), utils.GetRoleDisplayName(targetStaff.Role), cardDisplay)

	confirmCallback := fmt.Sprintf("%s_confirm_%d_%.0f", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT, targetUserID, amountOwed)
	cancelCallback := fmt.Sprintf("%s_page_0", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –≤—ã–ø–ª–∞—Ç–∏—Ç—å", confirmCallback),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–µ—Ç, –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", cancelCallback),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, confirmText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendOwnerConfirmPayoutToStaff: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatID %d: %v", chatID, errSend)
	}
}
