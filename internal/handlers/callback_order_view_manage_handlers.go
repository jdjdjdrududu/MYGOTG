// –§–∞–π–ª: internal/handlers/callback_order_view_manage_handlers.go

package handlers

import (
	"Original/internal/formatters"
	"Original/internal/session"
	"database/sql"
	"fmt"
	"log"
	"strconv"
	// "strings" // Not directly used here, but utils might use it

	"Original/internal/constants" //
	"Original/internal/db"
	"Original/internal/models"
	"Original/internal/utils" //

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
)

// dispatchOrderViewManageCallbacks –º–∞—Ä—à—Ä—É—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞–º–∏.
// query - –æ–±—ä–µ–∫—Ç CallbackQuery –æ—Ç Telegram
// currentCommand - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "my_orders_page", "view_order_ops").
// parts - —ç—Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ callback_data.
// data - —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ callback_data.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ 0.
func (bh *BotHandler) dispatchOrderViewManageCallbacks(query *tgbotapi.CallbackQuery, currentCommand string, parts []string, data string, chatID int64, user models.User, originalMessageID int) int {
	log.Printf("[CALLBACK_ORDER_VM] –î–∏—Å–ø–µ—Ç—á–µ—Ä: –ö–æ–º–∞–Ω–¥–∞='%s', –ß–∞—Å—Ç–∏=%v, Data='%s', ChatID=%d", currentCommand, parts, data, chatID)
	var newMenuMessageID int = originalMessageID
	var sentMsg tgbotapi.Message
	var errHelper error
	var queryID string // –û–±—ä—è–≤–ª—è–µ–º queryID –∑–¥–µ—Å—å
	if query != nil {
		queryID = query.ID // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ query –Ω–µ nil
	}

	switch currentCommand {
	case "manage_orders": // –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		bh.SendOrdersMenu(chatID, user, originalMessageID)
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
	case "operator_orders_new":
		page := 0
		if len(parts) > 0 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOrderListByStatus(chatID, []string{constants.STATUS_NEW, constants.STATUS_AWAITING_COST}, constants.STATUS_NEW, page, originalMessageID, "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID

	case "operator_orders_awaiting_confirmation":
		page := 0
		if len(parts) > 0 {
			page, _ = strconv.Atoi(parts[0])
		}
		// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
		bh.SendOrderListByStatus(
			chatID,
			[]string{constants.STATUS_AWAITING_CONFIRMATION, constants.STATUS_AWAITING_PAYMENT}, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Ç–µ, —á—Ç–æ –∂–¥—É—Ç –æ–ø–ª–∞—Ç—ã
			constants.STATUS_AWAITING_CONFIRMATION,                                              // –ö–ª—é—á –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
			page,
			originalMessageID,
			"‚è≥ –ó–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞", // –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
			"–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç–∞.",
		)
		// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
	case constants.CALLBACK_PREFIX_PAY_ORDER:
		if len(parts) == 1 {
			_, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.handlePayOrder(chatID, user, parts[0], originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è '%s': '%s'. ChatID=%d", currentCommand, parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ–ø–ª–∞—Ç—ã.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case "operator_orders_in_progress":
		page := 0
		if len(parts) > 0 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOrderListByStatus(chatID, []string{constants.STATUS_INPROGRESS}, constants.STATUS_INPROGRESS, page, originalMessageID, "üöö –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ", "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID

	case "operator_orders_completed":
		page := 0
		if len(parts) > 0 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOrderListByStatus(chatID, []string{constants.STATUS_COMPLETED}, constants.STATUS_COMPLETED, page, originalMessageID, "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID

	case "operator_orders_calculated":
		page := 0
		if len(parts) > 0 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOrderListByStatus(chatID, []string{constants.STATUS_CALCULATED}, constants.STATUS_CALCULATED, page, originalMessageID, "üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Ñ–∏–Ω–∞–Ω—Å—ã)", "–ù–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID

	case "operator_orders_canceled":
		page := 0
		if len(parts) > 0 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOrderListByStatus(chatID, []string{constants.STATUS_CANCELED}, constants.STATUS_CANCELED, page, originalMessageID, "‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "–ù–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
	case "my_orders_page":
		if len(parts) == 1 {
			page, err := strconv.Atoi(parts[0])
			if err == nil {
				bh.SendMyOrdersMenu(chatID, user, originalMessageID, page)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è 'my_orders_page': '%s'. ChatID=%d", parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'my_orders_page': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}

	case "operator_create_order_for_client": // –≠—Ç–æ—Ç –∫–æ–ª–ª–±—ç–∫ —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CALLBACK_PREFIX_OP_CREATE_NEW_ORDER
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		bh.SendClientSelectionMenu(chatID, originalMessageID)
		newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID

	case "select_client":
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 {
			clientChatID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.handleOperatorSelectClient(chatID, clientChatID, originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ClientChatID –¥–ª—è 'select_client': '%s'. ChatID=%d", parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'select_client': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}

	case "view_order":
		if len(parts) == 1 {
			orderID, err := strconv.Atoi(parts[0])
			if err == nil {
				sentMsg, _ = bh.SendViewOrderDetails(chatID, orderID, originalMessageID, false, user)
				if sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è 'view_order': '%s'. ChatID=%d", parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'view_order': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}

	case "view_order_ops":
		if len(parts) == 1 {
			orderID, err := strconv.Atoi(parts[0])
			if err == nil {
				isOpView := utils.IsOperatorOrHigher(user.Role)
				sentMsg, _ = bh.SendViewOrderDetails(chatID, orderID, originalMessageID, isOpView, user)
				if sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è 'view_order_ops': '%s'. ChatID=%d", parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫).")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'view_order_ops': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫).")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}

	case "set_cost": // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 {
			orderID, err := strconv.Atoi(parts[0])
			if err == nil {
				bh.SendCostInputPrompt(chatID, orderID, originalMessageID) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç STATE_COST_INPUT
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è 'set_cost': '%s'. ChatID=%d", parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'set_cost': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	// --- –ù–ê–ß–ê–õ–û –ù–û–í–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –û–ü–ï–†–ê–¢–û–†–û–ú ---
	case constants.CALLBACK_PREFIX_OP_EDIT_ORDER_COST: // op_edit_ord_cost_ORDERID
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 { // parts[0] = ORDERID
			orderID, err := strconv.Atoi(parts[0])
			if err == nil {
				log.Printf("[CALLBACK_ORDER_VM] –û–ø–µ—Ä–∞—Ç–æ—Ä %d —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ #%d", chatID, orderID)
				// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
				tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
				if tempOrder.ID != int64(orderID) || bh.Deps.SessionManager.GetState(chatID) != constants.STATE_ORDER_EDIT {
					log.Printf("[CALLBACK_ORDER_VM] –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ #%d –ø–æ—Ç–µ—Ä—è–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.", orderID)
					// –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
					bh.handleEditOrderStart(chatID, user, parts[0], originalMessageID) // parts[0] —ç—Ç–æ orderIDStr
					// –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, CurrentMessageID –æ–±–Ω–æ–≤–∏—Ç—Å—è. –í—ã–∑—ã–≤–∞–µ–º SendCostInputPrompt —É–∂–µ —Å –Ω–∏–º.
					updatedTempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
					bh.SendCostInputPrompt(chatID, orderID, updatedTempOrder.CurrentMessageID)
				} else {
					bh.SendCostInputPrompt(chatID, orderID, originalMessageID)
				}
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è '%s': '%s'. ChatID=%d", currentCommand, parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case constants.CALLBACK_PREFIX_OP_EDIT_ORDER_EXECS: // op_edit_ord_execs_ORDERID
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 { // parts[0] = ORDERID
			orderID, err := strconv.ParseInt(parts[0], 10, 64) // –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseInt
			if err == nil {
				log.Printf("[CALLBACK_ORDER_VM] –û–ø–µ—Ä–∞—Ç–æ—Ä %d —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d", chatID, orderID)
				tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
				if tempOrder.ID != orderID || bh.Deps.SessionManager.GetState(chatID) != constants.STATE_ORDER_EDIT {
					log.Printf("[CALLBACK_ORDER_VM] –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ #%d –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ—Ç–µ—Ä—è–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.", orderID)
					bh.handleEditOrderStart(chatID, user, parts[0], originalMessageID)
					updatedTempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
					bh.SendAssignExecutorsMenu(chatID, orderID, updatedTempOrder.CurrentMessageID)
				} else {
					bh.SendAssignExecutorsMenu(chatID, orderID, originalMessageID)
				}
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è '%s': '%s'. ChatID=%d", currentCommand, parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
		// --- –ö–û–ù–ï–¶ –ù–û–í–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
	case "assign_executors": // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 {
			orderID, err := strconv.ParseInt(parts[0], 10, 64) // –ò–ó–ú–ï–ù–ï–ù–û: Atoi –Ω–∞ ParseInt
			if err == nil {
				bh.SendAssignExecutorsMenu(chatID, orderID, originalMessageID) // –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º int64
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è 'assign_executors': '%s'. ChatID=%d", parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'assign_executors': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case "assign_driver", "assign_loader":
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 2 {
			orderID, errOrder := strconv.Atoi(parts[0])
			executorChatID, errExec := strconv.ParseInt(parts[1], 10, 64)
			if errOrder == nil && errExec == nil {
				roleToAssign := constants.ROLE_DRIVER
				if currentCommand == "assign_loader" {
					roleToAssign = constants.ROLE_LOADER
				}
				bh.handleAssignExecutor(chatID, orderID, executorChatID, roleToAssign, originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ID –¥–ª—è '%s': OrderID='%s', ExecutorChatID='%s'. ChatID=%d", currentCommand, parts[0], parts[1], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–Ω–µ–≤–µ—Ä–Ω—ã–µ ID).")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case "unassign_executor":
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 2 {
			orderID, errOrder := strconv.Atoi(parts[0])
			executorChatID, errExec := strconv.ParseInt(parts[1], 10, 64)
			if errOrder == nil && errExec == nil {
				bh.handleUnassignExecutor(chatID, orderID, executorChatID, originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ID –¥–ª—è 'unassign_executor': OrderID='%s', ExecutorChatID='%s'. ChatID=%d", parts[0], parts[1], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–Ω–µ–≤–µ—Ä–Ω—ã–µ ID).")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è 'unassign_executor': %v. ChatID=%d", parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case constants.CALLBACK_PREFIX_ORDER_SET_FINAL_COST:
		if len(parts) == 1 {
			orderIDStr := parts[0]
			orderID, err := strconv.Atoi(orderIDStr)
			if err == nil {
				// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ---
				isOperator := utils.IsOperatorOrHigher(user.Role)
				isAssignedDriver := false
				if !isOperator && user.Role == constants.ROLE_DRIVER {
					execs, _ := db.GetExecutorsByOrderID(orderID)
					for _, exec := range execs {
						if exec.UserID == user.ID && exec.Role == constants.ROLE_DRIVER {
							isAssignedDriver = true
							break
						}
					}
				}
				if !isOperator && !isAssignedDriver {
					sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
					if sentMsg.MessageID != 0 {
						newMenuMessageID = sentMsg.MessageID
					}
					return newMenuMessageID
				}
				// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
				bh.handleSetFinalCostPrompt(chatID, user, orderID, originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_DISPATCHER] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è '%s': '%s'. ChatID=%d", currentCommand, orderIDStr, chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_DISPATCHER] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. –û–∂–∏–¥–∞–ª—Å—è ID –∑–∞–∫–∞–∑–∞. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}

	case constants.CALLBACK_PREFIX_ORDER_RESUME:
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 {
			orderIDStr := parts[0]
			orderID, err := strconv.Atoi(orderIDStr)
			if err == nil {
				bh.handleResumeOrder(chatID, user, orderID, originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_DISPATCHER] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è '%s': '%s'. ChatID=%d", currentCommand, orderIDStr, chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_DISPATCHER] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. –û–∂–∏–¥–∞–ª—Å—è ID –∑–∞–∫–∞–∑–∞. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case constants.CALLBACK_PREFIX_MARK_ORDER_DONE:
		if len(parts) == 1 {
			orderID, err := strconv.Atoi(parts[0])
			if err == nil {
				bh.handleMarkOrderCompleted(chatID, user, orderID, originalMessageID)
				newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OrderID –¥–ª—è '%s': '%s'. ChatID=%d", currentCommand, parts[0], chatID)
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
				if errHelper == nil && sentMsg.MessageID != 0 {
					newMenuMessageID = sentMsg.MessageID
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v. ChatID=%d", currentCommand, parts, chatID)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ.")
			if errHelper == nil && sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
		}
	case constants.CALLBACK_PREFIX_EXECUTOR_NOTIFIED: // exec_notified_ORDERID_EXECUTORUSERID
		if query == nil { // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ nil
			log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞: query is nil –¥–ª—è '%s'. ChatID=%d", currentCommand, chatID)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ queryID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
			// –õ–∏–±–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ
			return newMenuMessageID
		}
		if len(parts) == 2 {
			orderID, errOrder := strconv.Atoi(parts[0])
			executorUserID, errExec := strconv.ParseInt(parts[1], 10, 64)

			if errOrder == nil && errExec == nil {
				errNotify := db.MarkExecutorAsNotified(orderID, executorUserID)
				answerCallbackText := ""
				if errNotify == nil {
					answerCallbackText = "‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É."
					// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è–µ–º
					if query.Message != nil { // –ò—Å–ø–æ–ª—å–∑—É–µ–º query.Message
						editedMarkup := tgbotapi.NewInlineKeyboardMarkup(
							tgbotapi.NewInlineKeyboardRow(
								tgbotapi.NewInlineKeyboardButtonData("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "noop_informational"),
							),
							tgbotapi.NewInlineKeyboardRow(
								tgbotapi.NewInlineKeyboardButtonData("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", fmt.Sprintf("view_order_ops_%d", orderID)),
							),
						)
						editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, originalMessageID, editedMarkup)
						_, errEdit := bh.Deps.BotClient.Request(editMsg)
						if errEdit != nil {
							log.Printf("[CALLBACK_HANDLER] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: %v", errEdit)
						}
					}
				} else {
					log.Printf("[CALLBACK_HANDLER] –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è UserID %d –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d: %v", executorUserID, orderID, errNotify)
					answerCallbackText = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
				}
				// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
				cbAns := tgbotapi.NewCallback(queryID, answerCallbackText) // –ò—Å–ø–æ–ª—å–∑—É–µ–º queryID
				cbAns.ShowAlert = false                                    // –ú–æ–∂–Ω–æ true, –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
				if _, errAns := bh.Deps.BotClient.Request(cbAns); errAns != nil {
					log.Printf("[CALLBACK_HANDLER] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery ID %s –¥–ª—è exec_notified: %v", queryID, errAns)
				}
			} else {
				log.Printf("[CALLBACK_ORDER_VM] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –¥–ª—è '%s': %v", currentCommand, parts)
				if queryID != "" { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ queryID –µ—Å—Ç—å
					cbAns := tgbotapi.NewCallback(queryID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
					bh.Deps.BotClient.Request(cbAns)
				}
			}
		} else {
			log.Printf("[CALLBACK_ORDER_VM] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '%s': %v", currentCommand, parts)
			if queryID != "" { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ queryID –µ—Å—Ç—å
				cbAns := tgbotapi.NewCallback(queryID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
				bh.Deps.BotClient.Request(cbAns)
			}
		}
		// newMenuMessageID –æ—Å—Ç–∞–µ—Ç—Å—è originalMessageID, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫

	default:
		log.Printf("[CALLBACK_ORDER_VM] –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '%s' –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ dispatchOrderViewManageCallbacks. Data: '%s', ChatID=%d", currentCommand, data, chatID)
		sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.")
		if errHelper == nil && sentMsg.MessageID != 0 {
			newMenuMessageID = sentMsg.MessageID
		}
	}

	log.Printf("[CALLBACK_ORDER_VM] –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–æ–º–∞–Ω–¥–∞='%s', ChatID=%d, ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é=%d", currentCommand, chatID, newMenuMessageID)
	return newMenuMessageID
}

// handleOperatorSelectClient –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) handleOperatorSelectClient(operatorChatID int64, clientChatID int64, originalMessageID int) {
	log.Printf("[ORDER_VM_HANDLER] –û–ø–µ—Ä–∞—Ç–æ—Ä %d –≤—ã–±—Ä–∞–ª –∫–ª–∏–µ–Ω—Ç–∞ %d –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.", operatorChatID, clientChatID)

	clientUser, ok := bh.getUserFromDB(clientChatID)
	if !ok {
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
		bh.SendClientSelectionMenu(operatorChatID, originalMessageID)
		return
	}

	// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
	bh.Deps.SessionManager.ClearState(operatorChatID)
	bh.Deps.SessionManager.ClearTempOrder(operatorChatID)

	// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º UserChatID –∫–ª–∏–µ–Ω—Ç–∞
	tempOrderForClient := session.NewTempOrder(clientChatID)                   // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UserChatID –∫–ª–∏–µ–Ω—Ç–∞
	tempOrderForClient.OrderAction = "operator_creating_order"                 // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
	bh.Deps.SessionManager.UpdateTempOrder(operatorChatID, tempOrderForClient) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ ChatID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
	bh.Deps.SessionManager.SetState(operatorChatID, constants.STATE_OP_CREATE_ORDER_FLOW)

	// –ò–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ SendCategoryMenu –±—É–¥–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
	bh.SendCategoryMenu(operatorChatID, clientUser.FirstName, originalMessageID)
}

// handleAssignExecutor –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑.
func (bh *BotHandler) handleAssignExecutor(operatorChatID int64, orderID int, executorChatID int64, role string, originalMessageID int) {
	log.Printf("[ORDER_VM_HANDLER] –û–ø–µ—Ä–∞—Ç–æ—Ä %d –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è %d (—Ä–æ–ª—å: %s) –Ω–∞ –∑–∞–∫–∞–∑ #%d", operatorChatID, executorChatID, role, orderID)

	executorUser, okUser := bh.getUserFromDB(executorChatID)
	if !okUser {
		log.Printf("[ORDER_VM_HANDLER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (ChatID: %d) –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.", executorChatID)
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å ChatID %d.", executorChatID))
		bh.SendAssignExecutorsMenu(operatorChatID, int64(orderID), originalMessageID)
		return
	}

	err := db.AssignExecutor(orderID, executorChatID, role)
	if err != nil {
		log.Printf("[ORDER_VM_HANDLER] –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: %v", err)
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: %s", err.Error()))
		bh.SendAssignExecutorsMenu(operatorChatID, int64(orderID), originalMessageID)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
	go bh.sendTaskNotificationToExecutor(executorUser, orderID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
	bh.SendAssignExecutorsMenu(operatorChatID, int64(orderID), originalMessageID)
}

// sendTaskNotificationToExecutor —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
func (bh *BotHandler) sendTaskNotificationToExecutor(executor models.User, orderID int) {
	order, errOrder := db.GetOrderByID(orderID)
	if errOrder != nil {
		log.Printf("[TASK_NOTIFY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ #%d –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è %d: %v", orderID, executor.ChatID, errOrder)
		return
	}

	client, errClient := db.GetUserByID(order.UserID)
	if errClient != nil {
		log.Printf("[TASK_NOTIFY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ #%d –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è %d: %v", orderID, executor.ChatID, errClient)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ
	}

	brigade, errBrigade := db.GetExecutorsByOrderID(orderID)
	if errBrigade != nil {
		log.Printf("[TASK_NOTIFY] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–∏–≥–∞–¥—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d: %v", orderID, errBrigade)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∞
	notificationText := formatters.FormatTaskForExecutor(order, client, brigade)

	confirmNotificationCallback := fmt.Sprintf("%s_%d_%d", constants.CALLBACK_PREFIX_EXECUTOR_NOTIFIED, orderID, executor.ID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª", confirmNotificationCallback),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤ –±–æ—Ç–µ", fmt.Sprintf("view_order_ops_%d", orderID)),
		),
	)

	msgToSend := tgbotapi.NewMessage(executor.ChatID, notificationText)
	msgToSend.ParseMode = tgbotapi.ModeMarkdown
	msgToSend.ReplyMarkup = keyboard
	_, errSend := bh.Deps.BotClient.Send(msgToSend)

	if errSend != nil {
		log.Printf("[TASK_NOTIFY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é %d –ø–æ –∑–∞–∫–∞–∑—É #%d: %v", executor.ChatID, orderID, errSend)
	} else {
		log.Printf("[TASK_NOTIFY] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É #%d —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é %s (ChatID: %d)", orderID, executor.FirstName, executor.ChatID)
	}
}

// handleUnassignExecutor —Å–Ω–∏–º–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) handleUnassignExecutor(operatorChatID int64, orderID int, executorChatID int64, originalMessageID int) {
	log.Printf("[ORDER_VM_HANDLER] –û–ø–µ—Ä–∞—Ç–æ—Ä %d —Å–Ω–∏–º–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è %d —Å –∑–∞–∫–∞–∑–∞ #%d", operatorChatID, executorChatID, orderID)

	err := db.RemoveExecutor(orderID, executorChatID)
	if err != nil {
		log.Printf("[ORDER_VM_HANDLER] –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: %v", err)
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è: %s", err.Error()))
		bh.SendAssignExecutorsMenu(operatorChatID, int64(orderID), originalMessageID)
		return
	}
	_, ok := bh.getUserFromDB(executorChatID)
	if ok {
		bh.sendMessage(executorChatID, fmt.Sprintf("‚ÑπÔ∏è –í–∞—Å —Å–Ω—è–ª–∏ —Å –∑–∞–∫–∞–∑–∞ ‚Ññ%d.", orderID))
	}
	bh.SendAssignExecutorsMenu(operatorChatID, int64(orderID), originalMessageID)
}

// handleMarkOrderCompleted –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω".
func (bh *BotHandler) handleMarkOrderCompleted(chatID int64, user models.User, orderID int, originalMessageID int) {
	log.Printf("[ORDER_VM_HANDLER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å UserID %d (–†–æ–ª—å: %s) –æ—Ç–º–µ—Ç–∏–ª –∑–∞–∫–∞–∑ #%d –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.", user.ID, user.Role, orderID)

	order, err := db.GetOrderByID(orderID)
	if err != nil {
		log.Printf("handleMarkOrderCompleted: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #%d: %v", orderID, err)
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
		return
	}

	isAssignedDriver := false
	if user.Role == constants.ROLE_DRIVER {
		execs, _ := db.GetExecutorsByOrderID(orderID)
		for _, exec := range execs {
			if exec.UserID == user.ID && exec.Role == constants.ROLE_DRIVER {
				isAssignedDriver = true
				break
			}
		}
	}

	if !(utils.IsOperatorOrHigher(user.Role) || isAssignedDriver) {
		log.Printf("handleMarkOrderCompleted: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å UserID %d (–†–æ–ª—å: %s) –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #%d –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.", user.ID, user.Role, orderID)
		bh.sendAccessDenied(chatID, originalMessageID)
		return
	}

	if order.Status != constants.STATUS_INPROGRESS {
		log.Printf("handleMarkOrderCompleted: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑ #%d, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–±–æ—Ç–µ' (—Å—Ç–∞—Ç—É—Å: %s).", orderID, order.Status)
		bh.sendInfoMessage(chatID, originalMessageID, fmt.Sprintf("‚ÑπÔ∏è –ó–∞–∫–∞–∑ ‚Ññ%d —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '%s'.", orderID, constants.StatusDisplayMap[order.Status]), fmt.Sprintf("view_order_ops_%d", orderID))
		return
	}

	errUpdate := db.UpdateOrderStatus(int64(orderID), constants.STATUS_COMPLETED)
	if errUpdate != nil {
		log.Printf("handleMarkOrderCompleted: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #%d –Ω–∞ –í–´–ü–û–õ–ù–ï–ù: %v", orderID, errUpdate)
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")
		return
	}

	log.Printf("–ó–∞–∫–∞–∑ #%d —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å –í–´–ü–û–õ–ù–ï–ù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º UserID %d.", orderID, user.ID)

	if order.UserChatID != 0 && order.UserChatID != chatID {
		clientMsg := fmt.Sprintf("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ%d –≤—ã–ø–æ–ª–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!", orderID)
		bh.sendMessage(order.UserChatID, clientMsg)
	}

	if user.Role != constants.ROLE_OWNER { // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –≥–ª.–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ –æ–Ω–∏ —Å–∞–º–∏ –∑–∞–∫—Ä—ã–ª–∏
		ownerAndMainOps, _ := db.GetUsersByRole(constants.ROLE_OWNER, constants.ROLE_MAINOPERATOR)
		notificationText := fmt.Sprintf("‚úÖ –ó–∞–∫–∞–∑ ‚Ññ%d –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s (–†–æ–ª—å: %s, ChatID: %d).",
			orderID, utils.GetUserDisplayName(user), utils.GetRoleDisplayName(user.Role), user.ChatID)
		for _, op := range ownerAndMainOps {
			if op.ChatID != chatID { // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ, –µ—Å–ª–∏ —ç—Ç–æ –≥–ª.–æ–ø–µ—Ä–∞—Ç–æ—Ä
				bh.sendMessage(op.ChatID, notificationText)
			}
		}
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ
		if bh.Deps.Config.GroupChatID != 0 && bh.Deps.Config.GroupChatID != chatID {
			bh.sendMessage(bh.Deps.Config.GroupChatID, notificationText)
		}
	}

	bh.sendInfoMessage(chatID, originalMessageID, fmt.Sprintf("‚úÖ –ó–∞–∫–∞–∑ ‚Ññ%d —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!", orderID), fmt.Sprintf("view_order_ops_%d", orderID))
	bh.SendViewOrderDetails(chatID, orderID, originalMessageID, true, user)
}

// handleSetFinalCostPrompt –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) handleSetFinalCostPrompt(chatID int64, user models.User, orderID int, originalMessageID int) {
	log.Printf("handleSetFinalCostPrompt: –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º %d", orderID, chatID)

	order, err := db.GetOrderByID(orderID)
	if err != nil || order.Status != constants.STATUS_COMPLETED {
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
		return
	}

	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_FINAL_COST_INPUT)
	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.ID = int64(orderID)
	tempData.CurrentMessageID = originalMessageID // –í–∞–∂–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	promptText := fmt.Sprintf("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ%d (—Ç–µ–∫—É—â–∞—è: %.0f ‚ÇΩ).\n–≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É—á–µ—Ç–∞, –∫–ª–∏–µ–Ω—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç.", orderID, order.Cost.Float64)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", fmt.Sprintf("view_order_ops_%d", orderID)),
		),
	)
	bh.sendOrEditMessageHelper(chatID, originalMessageID, promptText, &keyboard, "")
}

// handleResumeOrder –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
func (bh *BotHandler) handleResumeOrder(chatID int64, user models.User, orderID int, originalMessageID int) {
	log.Printf("handleResumeOrder: –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #%d –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º %d", orderID, chatID)

	order, err := db.GetOrderByID(orderID)
	if err != nil || order.Status != constants.STATUS_CANCELED {
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–æ—Ç–º–µ–Ω–µ–Ω'.")
		return
	}

	// –ü—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –∑–∞–∫–∞–∑ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ "–Ω–æ–≤—ã–µ", —á—Ç–æ–±—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ
	errUpdate := db.UpdateOrderStatusAndReason(int64(orderID), constants.STATUS_NEW, sql.NullString{Valid: false}) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
	if errUpdate != nil {
		log.Printf("handleResumeOrder: –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #%d: %v", orderID, errUpdate)
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
		return
	}

	bh.sendInfoMessage(chatID, originalMessageID, fmt.Sprintf("‚úÖ –ó–∞–∫–∞–∑ ‚Ññ%d —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ '–Ω–æ–≤—ã–µ'.", orderID), fmt.Sprintf("view_order_ops_%d", orderID))
	bh.SendViewOrderDetails(chatID, orderID, originalMessageID, true, user)
}
