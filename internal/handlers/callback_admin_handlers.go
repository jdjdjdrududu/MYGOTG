package handlers

import (
	"Original/internal/constants"
	"Original/internal/db"
	"Original/internal/models"
	"Original/internal/utils"
	"database/sql"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
)

// dispatchAdminCallbacks –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏,
// –∞ —Ç–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ "–ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞" –∏ –Ω–æ–≤—ã–π —Ñ–ª–æ—É "–†–∞—Å—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º" –≤–æ–¥–∏—Ç–µ–ª—è.
func (bh *BotHandler) dispatchAdminCallbacks(currentCommand string, parts []string, data string, chatID int64, user models.User, originalMessageID int) int {
	log.Printf("[CALLBACK_ADMIN] –î–∏—Å–ø–µ—Ç—á–µ—Ä: –ö–æ–º–∞–Ω–¥–∞='%s', –ß–∞—Å—Ç–∏=%v, ChatID=%d, UserRole=%s, OriginalMsgID=%d", currentCommand, parts, chatID, user.Role, originalMessageID)

	var newMenuMessageID int = originalMessageID
	var sentMsg tgbotapi.Message
	var errHelper error

	isMainOperatorOrHigher := utils.IsRoleOrHigher(user.Role, constants.ROLE_MAINOPERATOR)
	isOwner := user.Role == constants.ROLE_OWNER
	isOperatorOrHigher := utils.IsOperatorOrHigher(user.Role)
	isEmployee := user.Role == constants.ROLE_DRIVER || user.Role == constants.ROLE_LOADER || isOperatorOrHigher
	isDriver := user.Role == constants.ROLE_DRIVER

	// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
	staffManagementCommands := []string{
		"staff_menu", "staff_list_menu", "staff_list_by_role", "staff_add_prompt_name",
		"staff_add_prompt_surname", "staff_add_prompt_nickname", "staff_add_prompt_phone",
		"staff_add_prompt_chatid", "staff_add_prompt_card_number",
		"staff_add_role_final", "staff_info", "staff_edit_menu",
		"staff_edit_role_final", "staff_block_reason_prompt", "staff_unblock_confirm", "staff_delete_confirm",
		"staff_edit_field_name", "staff_edit_field_surname", "staff_edit_field_nickname",
		"staff_edit_field_phone", "staff_edit_field_card_number", "staff_edit_field_role",
	}
	statsAndExcelCommands := []string{
		"stats_menu", "stats_basic_periods", "stats_get_today", "stats_get_yesterday",
		"stats_get_current_week", "stats_get_current_month", "stats_get_last_week", "stats_get_last_month",
		"stats_select_custom_date", "stats_select_custom_period", "stats_select_month", "stats_select_day",
		"stats_year_nav", "send_excel_menu", "excel_generate_orders", "excel_generate_referrals",
		"excel_generate_salaries",
	}
	userBlockingCommands := []string{
		"block_user_menu", "block_user_list_prompt", "block_user_info", "block_user_reason_prompt",
		"block_user_final", "unblock_user_list_prompt", "unblock_user_info", "unblock_user_final",
	}
	salaryCommands := []string{
		constants.CALLBACK_PREFIX_MY_SALARY,
	}

	driverInlineReportCommands := []string{
		constants.CALLBACK_PREFIX_DRIVER_REPORT_OVERALL_MENU,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_SET_FUEL,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_OTHER_EXPENSES_MENU,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_ADD_OTHER_EXPENSE_DESCRIPTION_PROMPT,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_EDIT_OTHER_EXPENSE_PROMPT,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_DELETE_OTHER_EXPENSE_SHOW_CONFIRM,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_DELETE_OTHER_EXPENSE_CONFIRM,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_LOADERS_MENU,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_ADD_LOADER_PROMPT,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_EDIT_LOADER_PROMPT,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_DELETE_LOADER_CONFIRM,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_SAVE_FINAL,
		constants.CALLBACK_PREFIX_DRIVER_REPORT_CANCEL_ALL,
	}

	ownerPayoutCommands := []string{
		constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT,
	}
	ownerFinancialsCommands := []string{
		"financial_menu",
		constants.CALLBACK_PREFIX_OWNER_FINANCIALS,
	}
	ownerCashManagementCommands := []string{
		constants.CALLBACK_PREFIX_OWNER_CASH_MANAGEMENT_MAIN,
		constants.CALLBACK_PREFIX_OWNER_CASH_ACTUAL_LIST,
		constants.CALLBACK_PREFIX_OWNER_CASH_SETTLED_LIST,
		constants.CALLBACK_PREFIX_OWNER_CASH_MARK_PAID,
		constants.CALLBACK_PREFIX_OWNER_CASH_MARK_UNPAID,
		constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS,
		constants.CALLBACK_PREFIX_OWNER_EDIT_SETTLEMENT,
		constants.CALLBACK_PREFIX_OWNER_CASH_MARK_SALARY_PAID,
		constants.CALLBACK_PREFIX_OWNER_CASH_MARK_SALARY_UNPAID,
		constants.CALLBACK_PREFIX_OWNER_MARK_ALL_SALARY_PAID,
		constants.CALLBACK_PREFIX_OWNER_MARK_ALL_MONEY_DEPOSITED,
		constants.CALLBACK_PREFIX_OPERATOR_VIEW_DRIVER_SETTLEMENT,
	}

	// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –≤ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ ---
	settlementReviewCommands := []string{
		constants.CALLBACK_PREFIX_OPERATOR_APPROVE_SETTLEMENT,
		constants.CALLBACK_PREFIX_OPERATOR_REJECT_SETTLEMENT,
	}
	// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

	accessGranted := true
	if utils.IsCommandInCategory(currentCommand, staffManagementCommands) && !isMainOperatorOrHigher {
		accessGranted = false
	} else if utils.IsCommandInCategory(currentCommand, statsAndExcelCommands) && !isMainOperatorOrHigher {
		accessGranted = false
	} else if utils.IsCommandInCategory(currentCommand, userBlockingCommands) && !isOperatorOrHigher {
		accessGranted = false
	} else if (utils.IsCommandInCategory(currentCommand, salaryCommands) || strings.HasPrefix(currentCommand, constants.CALLBACK_PREFIX_MY_SALARY+"_")) && !isEmployee {
		accessGranted = false
	} else if (utils.IsCommandInCategory(currentCommand, driverInlineReportCommands)) && !isDriver {
		accessGranted = false
	} else if (utils.IsCommandInCategory(currentCommand, ownerPayoutCommands) || strings.HasPrefix(currentCommand, constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT+"_")) && !isOwner {
		accessGranted = false
	} else if (utils.IsCommandInCategory(currentCommand, ownerFinancialsCommands) || strings.HasPrefix(currentCommand, constants.CALLBACK_PREFIX_OWNER_FINANCIALS+"_")) && !isMainOperatorOrHigher {
		accessGranted = false
	} else if utils.IsCommandInCategory(currentCommand, ownerCashManagementCommands) {
		if currentCommand == constants.CALLBACK_PREFIX_OPERATOR_VIEW_DRIVER_SETTLEMENT && !isOperatorOrHigher {
			accessGranted = false
		} else if currentCommand != constants.CALLBACK_PREFIX_OPERATOR_VIEW_DRIVER_SETTLEMENT && !isOwner {
			accessGranted = false
		}
	} else if utils.IsCommandInCategory(currentCommand, settlementReviewCommands) && !isOperatorOrHigher { // --- –ù–û–í–û–ï –ü–†–ê–í–ò–õ–û ---
		accessGranted = false
	}

	if !accessGranted {
		log.Printf("[CALLBACK_ADMIN] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '%s', UserRole=%s", currentCommand, user.Role)
		sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
		if sentMsg.MessageID != 0 && sentMsg.MessageID != originalMessageID {
			newMenuMessageID = sentMsg.MessageID
		}
		return newMenuMessageID
	}

	foundSpecificHandlerInSwitch := true

	switch currentCommand {
	case constants.CALLBACK_PREFIX_OPERATOR_APPROVE_SETTLEMENT: // parts: [SETTLEMENT_ID]
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.handleOperatorApproveSettlement(chatID, user, settlementID, originalMessageID)
			} else {
				bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞.")
			}
		} else {
			bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
		}
		break // –î–æ–±–∞–≤–ª—è–µ–º break, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–∞–ª–∞ –≤ default
	case constants.CALLBACK_PREFIX_OPERATOR_REJECT_SETTLEMENT: // parts: [SETTLEMENT_ID]
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.handleOperatorRejectSettlement(chatID, user, settlementID, originalMessageID)
			} else {
				bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞.")
			}
		} else {
			bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
		}
		break // –î–æ–±–∞–≤–ª—è–µ–º break

	case constants.CALLBACK_PREFIX_OPERATOR_VIEW_DRIVER_SETTLEMENT:
		if !utils.IsOperatorOrHigher(user.Role) {
			sentMsg, _ = bh.sendAccessDenied(chatID, originalMessageID)
			if sentMsg.MessageID != 0 {
				newMenuMessageID = sentMsg.MessageID
			}
			return newMenuMessageID
		}
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.SendOperatorViewDriverSettlementDetails(chatID, user, settlementID, originalMessageID)
			} else {
				log.Printf("CALLBACK_ADMIN: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: %s", parts[0])
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞.")
			}
		} else {
			log.Printf("CALLBACK_ADMIN: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º: %v", parts)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
		}
		break // –î–æ–±–∞–≤–ª—è–µ–º break
	// --- –®—Ç–∞—Ç ---
	case "staff_menu":
		bh.SendStaffMenu(chatID, originalMessageID)
	case "staff_list_menu":
		bh.SendStaffListMenu(chatID, originalMessageID)
	case "staff_list_by_role": // parts: [ROLE_KEY]
		if len(parts) == 1 {
			bh.SendStaffList(chatID, parts[0], originalMessageID)
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å.")
		}
	case "staff_add_prompt_name":
		bh.Deps.SessionManager.ClearTempOrder(chatID)
		bh.SendStaffAddPrompt(chatID, constants.STATE_STAFF_ADD_NAME, "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", "staff_menu", originalMessageID)
	case "staff_add_prompt_card_number":
		bh.SendStaffAddPrompt(chatID, constants.STATE_STAFF_ADD_CARD_NUMBER, "üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (16-19 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤). –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-'.", "staff_add_prompt_chatid", originalMessageID)
	case "staff_add_role_final": // parts: [ROLE_KEY]
		if len(parts) == 1 {
			bh.handleStaffAddRoleFinal(chatID, parts[0], originalMessageID)
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å.")
		}
	case "staff_info": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.SendStaffInfo(chatID, targetChatID, originalMessageID)
		}
	case "staff_edit_menu": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.SendStaffEditMenu(chatID, targetChatID, originalMessageID)
		}
	case "staff_edit_field_name", "staff_edit_field_surname", "staff_edit_field_nickname", "staff_edit_field_phone", "staff_edit_field_card_number", "staff_edit_field_role": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			fieldToEdit := strings.TrimPrefix(currentCommand, "staff_edit_field_")
			var promptText string
			backCallback := fmt.Sprintf("staff_edit_menu_%d", targetChatID)
			shouldSendPrompt := true
			switch fieldToEdit {
			case "name":
				promptText = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:"
			case "surname":
				promptText = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:"
			case "nickname":
				promptText = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∑—ã–≤–Ω–æ–π (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):"
			case "phone":
				promptText = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):"
			case "card_number":
				promptText = "üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16-19 —Ü–∏—Ñ—Ä, –∏–ª–∏ '-' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):"
			case "role":
				bh.SendStaffRoleSelectionMenu(chatID, fmt.Sprintf("staff_edit_role_final_%d", targetChatID), originalMessageID, backCallback)
				shouldSendPrompt = false
			default:
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
				shouldSendPrompt = false
			}
			if shouldSendPrompt {
				bh.SendStaffEditFieldPrompt(chatID, targetChatID, fieldToEdit, promptText, originalMessageID)
			}
		}
	case "staff_edit_role_final": // parts: [TARGET_CHAT_ID, NEW_ROLE_KEY]
		if len(parts) == 2 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleStaffEditRoleFinal(chatID, targetChatID, parts[1], originalMessageID)
		}
	case "staff_block_reason_prompt": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.SendStaffBlockReasonInput(chatID, targetChatID, originalMessageID)
		}
	case "staff_unblock_confirm": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleStaffUnblockConfirm(chatID, targetChatID, originalMessageID)
		}
	case "staff_delete_confirm": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleStaffDeleteConfirm(chatID, targetChatID, originalMessageID)
		}

	// --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ Excel ---
	case "stats_menu":
		bh.SendStatsMenu(chatID, originalMessageID)
	case "stats_basic_periods":
		bh.SendBasicStatsPeriodsMenu(chatID, originalMessageID)
	case "stats_get_today", "stats_get_yesterday", "stats_get_current_week", "stats_get_current_month", "stats_get_last_week", "stats_get_last_month":
		periodKey := strings.TrimPrefix(currentCommand, "stats_get_")
		bh.handleStatsGetPeriod(periodKey, data, chatID, originalMessageID)
	case "stats_select_custom_date":
		bh.SendMonthSelectionMenu(chatID, originalMessageID, time.Now().Year(), "custom_date")
	case "stats_select_custom_period":
		bh.Deps.SessionManager.ClearTempOrder(chatID)
		bh.SendMonthSelectionMenu(chatID, originalMessageID, time.Now().Year(), "period_start")
	case "stats_select_month": // parts: [CONTEXT, YEAR, MONTH_INT]
		if len(parts) == 3 {
			context := parts[0]
			year, _ := strconv.Atoi(parts[1])
			monthInt, _ := strconv.Atoi(parts[2])
			bh.SendDaySelectionMenu(chatID, originalMessageID, year, time.Month(monthInt), context)
		}
	case "stats_select_day": // parts: [CONTEXT, YEAR, MONTH_INT, DAY]
		if len(parts) == 4 {
			context := parts[0]
			year, _ := strconv.Atoi(parts[1])
			monthInt, _ := strconv.Atoi(parts[2])
			day, _ := strconv.Atoi(parts[3])
			bh.handleStatsSelectDay(chatID, user, context, year, time.Month(monthInt), day, originalMessageID)
		}
	case "stats_year_nav": // parts: [CONTEXT, YEAR_STR]
		if len(parts) == 2 {
			bh.handleStatsYearNavigation(parts[0], parts[1], data, chatID, originalMessageID)
		}
	case "send_excel_menu":
		bh.SendExcelMenu(chatID, originalMessageID)
	case "excel_generate_orders", "excel_generate_referrals", "excel_generate_salaries":
		reportType := strings.TrimPrefix(currentCommand, "excel_generate_")
		bh.handleExcelGenerate(chatID, user, reportType, originalMessageID)
		foundSpecificHandlerInSwitch = false

	// --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
	case "block_user_menu":
		bh.SendBlockUserMenu(chatID, originalMessageID)
	case "block_user_list_prompt":
		bh.SendUserListForBlocking(chatID, originalMessageID)
	case "block_user_info": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.SendBlockUserInfo(chatID, targetChatID, originalMessageID)
		}
	case "block_user_reason_prompt": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.SendBlockReasonInput(chatID, targetChatID, originalMessageID)
		}
	case "block_user_final": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleBlockUserFinal(chatID, user, targetChatID, originalMessageID)
		}
	case "unblock_user_list_prompt":
		bh.SendUserListForUnblocking(chatID, originalMessageID)
	case "unblock_user_info": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.SendUnblockUserInfo(chatID, targetChatID, originalMessageID)
		}
	case "unblock_user_final": // parts: [TARGET_CHAT_ID]
		if len(parts) == 1 {
			targetChatID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleUnblockUserFinal(chatID, user, targetChatID, originalMessageID)
		}

	// --- –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
	case constants.CALLBACK_PREFIX_MY_SALARY:
		bh.SendMySalaryMenu(chatID, user, originalMessageID)
	case fmt.Sprintf("%s_owed", constants.CALLBACK_PREFIX_MY_SALARY):
		bh.HandleShowAmountOwed(chatID, user, originalMessageID)
	case fmt.Sprintf("%s_earned_stats", constants.CALLBACK_PREFIX_MY_SALARY):
		bh.HandleShowEarnedStats(chatID, user, originalMessageID)

	// --- –ò–ù–õ–ê–ô–ù-–û–¢–ß–ï–¢ –í–û–î–ò–¢–ï–õ–Ø ---
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_OVERALL_MENU:
		bh.SendDriverReportOverallMenu(chatID, user, originalMessageID)
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_SET_FUEL:
		bh.SendDriverReportFuelInputPrompt(chatID, user, originalMessageID)
	// case constants.CALLBACK_PREFIX_DRIVER_REPORT_SET_OTHER: // –ó–∞–º–µ–Ω–µ–Ω –Ω–∞ MENU
	// 	bh.SendDriverReportOtherExpenseInputPrompt(chatID, user, originalMessageID)
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_OTHER_EXPENSES_MENU: // –ù–û–í–´–ô
		bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_ADD_OTHER_EXPENSE_DESCRIPTION_PROMPT: // –ù–û–í–´–ô
		bh.SendDriverReportOtherExpenseDescriptionPrompt(chatID, user, originalMessageID, false, -1)
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_EDIT_OTHER_EXPENSE_PROMPT: // –ù–û–í–´–ô, parts: [INDEX]
		if len(parts) == 1 {
			expenseIndex, err := strconv.Atoi(parts[0])
			if err == nil {
				bh.SendDriverReportOtherExpenseDescriptionPrompt(chatID, user, originalMessageID, true, expenseIndex)
			} else {
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—Ö–æ–¥–∞.")
				bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
			}
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
			bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
		}
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_DELETE_OTHER_EXPENSE_SHOW_CONFIRM: // –ù–û–í–´–ô, parts: [INDEX]
		if len(parts) == 1 {
			expenseIndex, err := strconv.Atoi(parts[0])
			if err == nil {
				bh.SendDriverReportConfirmDeleteOtherExpensePrompt(chatID, user, originalMessageID, expenseIndex)
			} else {
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
				bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
			}
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
			bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
		}
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_DELETE_OTHER_EXPENSE_CONFIRM: // –ù–û–í–´–ô, parts: [INDEX]
		if len(parts) == 1 {
			expenseIndex, err := strconv.Atoi(parts[0])
			if err == nil {
				tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
				if expenseIndex >= 0 && expenseIndex < len(tempData.OtherExpenses) {
					deletedDesc := tempData.OtherExpenses[expenseIndex].Description
					tempData.OtherExpenses = append(tempData.OtherExpenses[:expenseIndex], tempData.OtherExpenses[expenseIndex+1:]...)
					tempData.EditingOtherExpenseIndex = -1
					bh.Deps.SessionManager.UpdateTempDriverSettlement(chatID, tempData)
					bh.sendInfoMessage(chatID, originalMessageID, fmt.Sprintf("–†–∞—Å—Ö–æ–¥ '%s' —É–¥–∞–ª–µ–Ω.", deletedDesc), constants.CALLBACK_PREFIX_DRIVER_REPORT_OTHER_EXPENSES_MENU)
					bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
				} else {
					sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
					bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
				}
			} else {
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
				bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
			}
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).")
			bh.SendDriverReportOtherExpensesMenu(chatID, user, originalMessageID)
		}
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_LOADERS_MENU:
		bh.SendDriverReportLoadersSubMenu(chatID, user, originalMessageID)
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_ADD_LOADER_PROMPT:
		bh.SendDriverReportLoaderNameInputPrompt(chatID, user, originalMessageID)
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_EDIT_LOADER_PROMPT:
		if len(parts) == 1 {
			loaderIndex, err := strconv.Atoi(parts[0])
			if err == nil {
				tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
				if loaderIndex >= 0 && loaderIndex < len(tempData.LoaderPayments) {
					loaderToEdit := tempData.LoaderPayments[loaderIndex]
					bh.SendDriverReportLoaderSalaryInputPrompt(chatID, user, originalMessageID, loaderToEdit.LoaderIdentifier, true, loaderIndex)
				} else {
					sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≥—Ä—É–∑—á–∏–∫–∞.")
					bh.SendDriverReportLoadersSubMenu(chatID, user, originalMessageID)
				}
			} else {
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞.")
			}
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –≥—Ä—É–∑—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		}
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_DELETE_LOADER_CONFIRM:
		if len(parts) == 1 {
			loaderIndex, err := strconv.Atoi(parts[0])
			if err == nil {
				tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
				if tempData.EditingLoaderIndex == loaderIndex && tempData.EditingLoaderIndex != -1 {
					if loaderIndex >= 0 && loaderIndex < len(tempData.LoaderPayments) {
						tempData.LoaderPayments = append(tempData.LoaderPayments[:loaderIndex], tempData.LoaderPayments[loaderIndex+1:]...)
						tempData.EditingLoaderIndex = -1
						bh.Deps.SessionManager.UpdateTempDriverSettlement(chatID, tempData)
						bh.SendDriverReportLoadersSubMenu(chatID, user, originalMessageID)
					} else {
						sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≥—Ä—É–∑—á–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
						bh.SendDriverReportLoadersSubMenu(chatID, user, originalMessageID)
					}
				} else {
					bh.SendDriverReportConfirmDeleteLoaderPrompt(chatID, user, originalMessageID, loaderIndex)
				}
			} else {
				sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
			}
		} else {
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –≥—Ä—É–∑—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		}
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_SAVE_FINAL:
		tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
		tempData.RecalculateTotals(bh.Deps.Config.DriverSharePercentage)

		settlement := models.DriverSettlement{
			DriverUserID:           user.ID,
			SettlementTimestamp:    tempData.SettlementCreateTime,
			CoveredOrdersRevenue:   tempData.CoveredOrdersRevenue,
			FuelExpense:            tempData.FuelExpense,
			OtherExpenses:          tempData.OtherExpenses, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
			LoaderPayments:         tempData.LoaderPayments,
			DriverCalculatedSalary: tempData.DriverCalculatedSalary,
			AmountToCashier:        tempData.AmountToCashier,
			CoveredOrdersCount:     tempData.CoveredOrdersCount,
			CoveredOrderIDs:        tempData.CoveredOrderIDs,
			CreatedAt:              time.Now(),
			UpdatedAt:              time.Now(),
		}
		savedSettlementID, err := db.AddDriverSettlement(settlement)
		if err != nil {
			log.Printf("CALLBACK_PREFIX_DRIVER_REPORT_SAVE_FINAL: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è %d: %v", user.ID, err)
			sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			bh.SendDriverReportOverallMenu(chatID, user, originalMessageID)
		} else {
			go bh.NotifyOperatorsAboutDriverSettlement(user, savedSettlementID)
			sentMsg, errHelper = bh.sendInfoMessage(chatID, originalMessageID, "‚úÖ –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "back_to_main")
			bh.Deps.SessionManager.ClearState(chatID)
			bh.Deps.SessionManager.ClearTempDriverSettlement(chatID)
		}
	case constants.CALLBACK_PREFIX_DRIVER_REPORT_CANCEL_ALL:
		bh.Deps.SessionManager.ClearState(chatID)
		bh.Deps.SessionManager.ClearTempDriverSettlement(chatID)
		bh.SendMainMenu(chatID, user, originalMessageID)

	// --- –§–∏–Ω–∞–Ω—Å—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –¥–∞—Ç–∞–º) ---
	case "financial_menu", constants.CALLBACK_PREFIX_OWNER_FINANCIALS:
		bh.SendOwnerFinancialsMainMenu(chatID, user, originalMessageID)
	case fmt.Sprintf("%s_date", constants.CALLBACK_PREFIX_OWNER_FINANCIALS): // parts: [DATE_STR_YYYY-MM-DD]
		if len(parts) == 1 {
			targetDate, _ := time.ParseInLocation("2006-01-02", parts[0], time.Local)
			bh.SendOwnerFinancialsForDate(chatID, user, targetDate, originalMessageID)
		}
	case fmt.Sprintf("%s_view", constants.CALLBACK_PREFIX_OWNER_FINANCIALS): // parts: [DRIVER_UID, REPORT_DATE_STR]
		if len(parts) == 2 {
			driverUID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleOwnerViewDriverSettlementsForDate(chatID, user, driverUID, parts[1], originalMessageID)
		}
	case fmt.Sprintf("%s_edit_settlement", constants.CALLBACK_PREFIX_OWNER_FINANCIALS): // parts: [SETTLEMENT_ID]
		if len(parts) == 1 {
			settleID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleOwnerEditSettlementStart(chatID, user, settleID, "unknown", 0, originalMessageID)
		}
	case fmt.Sprintf("%s_edit_field", constants.CALLBACK_PREFIX_OWNER_FINANCIALS): // parts: [SETTLEMENT_ID, FIELD_KEY]
		if len(parts) == 2 {
			settleID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleOwnerEditSettlementFieldPrompt(chatID, user, settleID, parts[1], originalMessageID)
		}
	case fmt.Sprintf("%s_save_edited_settlement", constants.CALLBACK_PREFIX_OWNER_FINANCIALS): // parts: [SETTLEMENT_ID]
		if len(parts) == 1 {
			settleID, _ := strconv.ParseInt(parts[0], 10, 64)
			bh.handleOwnerSaveAllSettlementChanges(chatID, user, settleID, originalMessageID)
		}

	// --- –ù–û–í–û–ï: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Å–æ–π –í–ª–∞–¥–µ–ª—å—Ü–∞ ---
	case constants.CALLBACK_PREFIX_OWNER_CASH_MANAGEMENT_MAIN:
		bh.SendOwnerCashManagementMenu(chatID, user, originalMessageID)
	case constants.CALLBACK_PREFIX_OWNER_CASH_ACTUAL_LIST: // parts: [PAGE]
		page := 0
		if len(parts) == 1 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOwnerActualDebtsList(chatID, user, originalMessageID, page)
	case constants.CALLBACK_PREFIX_OWNER_CASH_SETTLED_LIST: // parts: [PAGE]
		page := 0
		if len(parts) == 1 {
			page, _ = strconv.Atoi(parts[0])
		}
		bh.SendOwnerSettledPaymentsList(chatID, user, originalMessageID, page)
	case constants.CALLBACK_PREFIX_OWNER_CASH_MARK_PAID: // parts: [SETTLEMENT_ID]
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				errDb := db.MarkSettlementAsPaidToOwner(settlementID)
				if errDb != nil {
					log.Printf("CALLBACK_ADMIN: –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ #%d –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ: %v", settlementID, errDb)
					bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã.")
				} else {
					tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
					bh.SendOwnerDriverIndividualSettlementsList(chatID, user, originalMessageID, tempData.DriverUserIDForBackNav, tempData.ViewTypeForBackNav, tempData.PageForBackNav)
				}
			} else {
				log.Printf("CALLBACK_ADMIN: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π: %s", parts[0])
				bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞.")
			}
		}
	case constants.CALLBACK_PREFIX_OWNER_CASH_MARK_UNPAID: // parts: [SETTLEMENT_ID]
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				errDb := db.MarkSettlementAsUnpaidToOwner(settlementID)
				if errDb != nil {
					log.Printf("CALLBACK_ADMIN: –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ #%d –∫–∞–∫ –ù–ï –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ: %v", settlementID, errDb)
					bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã.")
				} else {
					tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
					bh.SendOwnerDriverIndividualSettlementsList(chatID, user, originalMessageID, tempData.DriverUserIDForBackNav, tempData.ViewTypeForBackNav, tempData.PageForBackNav)
				}
			} else {
				log.Printf("CALLBACK_ADMIN: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –ù–ï –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π: %s", parts[0])
				bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞.")
			}
		}
	case constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS: // parts: [DRIVER_USER_ID, VIEW_TYPE, PAGE]
		if len(parts) == 3 {
			driverUserID, errDriverID := strconv.ParseInt(parts[0], 10, 64)
			viewType := parts[1]
			page, errPage := strconv.Atoi(parts[2])
			if errDriverID == nil && errPage == nil && (viewType == constants.VIEW_TYPE_ACTUAL_SETTLEMENTS || viewType == constants.VIEW_TYPE_SETTLED_SETTLEMENTS) {
				bh.SendOwnerDriverIndividualSettlementsList(chatID, user, originalMessageID, driverUserID, viewType, page)
			} else {
				log.Printf("CALLBACK_ADMIN: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è: %v", parts)
				bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è.")
			}
		} else {
			log.Printf("CALLBACK_ADMIN: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è: %v", parts)
			bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
		}
	case constants.CALLBACK_PREFIX_OWNER_EDIT_SETTLEMENT:
		if len(parts) >= 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				if len(parts) == 4 && parts[1] != "field" && parts[1] != "save" {
					driverIDForCtx, errDriverID := strconv.ParseInt(parts[1], 10, 64)
					viewTypeForCtx := parts[2]
					pageForCtx, errPage := strconv.Atoi(parts[3])
					if errDriverID == nil && errPage == nil {
						tempSettleData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
						tempSettleData.DriverUserIDForBackNav = driverIDForCtx
						tempSettleData.ViewTypeForBackNav = viewTypeForCtx
						tempSettleData.PageForBackNav = pageForCtx
						bh.Deps.SessionManager.UpdateTempDriverSettlement(chatID, tempSettleData)
						bh.handleOwnerEditSettlementStart(chatID, user, settlementID, viewTypeForCtx, pageForCtx, originalMessageID)
					} else {
						log.Printf("CALLBACK_ADMIN: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è %s_START_WITH_CONTEXT: %v", currentCommand, parts)
						bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
					}
				} else if len(parts) == 3 && parts[1] == "field" {
					fieldName := parts[2]
					bh.handleOwnerEditSettlementFieldPrompt(chatID, user, settlementID, fieldName, originalMessageID)
				} else if len(parts) == 2 && parts[1] == "save" {
					bh.handleOwnerSaveAllSettlementChanges(chatID, user, settlementID, originalMessageID)
				} else if len(parts) == 1 {
					settlementForMenu, errGet := db.GetDriverSettlementByID(settlementID)
					if errGet == nil {
						bh.SendOwnerEditSettlementFieldSelectMenu(chatID, settlementForMenu, originalMessageID)
					} else {
						bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
					}
				} else {
					log.Printf("CALLBACK_ADMIN: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è %s: %v", currentCommand, parts)
					bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
				}
			} else {
				log.Printf("CALLBACK_ADMIN: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è %s: %s", currentCommand, parts[0])
				bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞.")
			}
		} else {
			log.Printf("CALLBACK_ADMIN: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è %s: ID –æ—Ç—á–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", currentCommand)
			bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: ID –æ—Ç—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.")
		}
	case constants.CALLBACK_PREFIX_OWNER_CASH_MARK_SALARY_PAID:
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.handleOwnerMarkSalaryPaid(chatID, user, settlementID, originalMessageID)
			} else {
				bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –ó–ü.")
			}
		}
	case constants.CALLBACK_PREFIX_OWNER_CASH_MARK_SALARY_UNPAID:
		if len(parts) == 1 {
			settlementID, err := strconv.ParseInt(parts[0], 10, 64)
			if err == nil {
				bh.handleOwnerMarkSalaryUnpaid(chatID, user, settlementID, originalMessageID)
			} else {
				bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–ª–∞—Ç—ã –ó–ü.")
			}
		}
	case constants.CALLBACK_PREFIX_OWNER_MARK_ALL_SALARY_PAID:
		if len(parts) == 2 {
			driverUID, errUID := strconv.ParseInt(parts[0], 10, 64)
			viewType := parts[1]
			if errUID == nil && (viewType == constants.VIEW_TYPE_ACTUAL_SETTLEMENTS || viewType == constants.VIEW_TYPE_SETTLED_SETTLEMENTS) {
				bh.handleOwnerMarkAllSalaryPaid(chatID, user, driverUID, viewType, originalMessageID)
			} else {
				bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—ã–ø–ª–∞—Ç—ã –ó–ü.")
			}
		}
	case constants.CALLBACK_PREFIX_OWNER_MARK_ALL_MONEY_DEPOSITED:
		if len(parts) == 2 {
			driverUID, errUID := strconv.ParseInt(parts[0], 10, 64)
			viewType := parts[1]
			if errUID == nil && viewType == constants.VIEW_TYPE_ACTUAL_SETTLEMENTS {
				bh.handleOwnerMarkAllMoneyDeposited(chatID, user, driverUID, viewType, originalMessageID)
			} else {
				bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–Ω–µ–≥.")
			}
		}

	// --- –í—ã–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (–í–ª–∞–¥–µ–ª–µ—Ü) ---
	case constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT:
		bh.SendOwnerPayoutsMainMenu(chatID, user, originalMessageID)
	case fmt.Sprintf("%s_page", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT): // parts: [PAGE_NUM]
		if len(parts) == 1 {
			page, _ := strconv.Atoi(parts[0])
			bh.SendOwnerStaffListForPayout(chatID, user, originalMessageID, page)
		}
	case fmt.Sprintf("%s_select", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT): // parts: [TARGET_USER_ID, AMOUNT_OWED_STR]
		if len(parts) == 2 {
			targetUserID, _ := strconv.ParseInt(parts[0], 10, 64)
			amountOwed, _ := strconv.ParseFloat(parts[1], 64)
			bh.SendOwnerConfirmPayoutToStaff(chatID, user, targetUserID, amountOwed, originalMessageID)
		}
	case fmt.Sprintf("%s_confirm", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT): // parts: [TARGET_USER_ID, AMOUNT_TO_PAY_STR]
		if len(parts) == 2 {
			targetUserID, _ := strconv.ParseInt(parts[0], 10, 64)
			amountToPay, _ := strconv.ParseFloat(parts[1], 64)
			bh.handleOwnerDoStaffPayout(chatID, user, targetUserID, amountToPay, originalMessageID)
		}
	default:
		foundSpecificHandlerInSwitch = false
		log.Printf("[CALLBACK_ADMIN] –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '%s' –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ dispatchAdminCallbacks (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π switch). Parts: %v, Data: '%s', ChatID=%d", currentCommand, parts, data, chatID)
		sentMsg, errHelper = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–≤–Ω—É—Ç—Ä).")
	}

	if errHelper == nil && sentMsg.MessageID != 0 {
		newMenuMessageID = sentMsg.MessageID
	} else if foundSpecificHandlerInSwitch {
		currentHandlerState := bh.Deps.SessionManager.GetState(chatID)
		isDriverOrOwnerFinancialContext := strings.HasPrefix(currentHandlerState, "driver_report_") ||
			currentHandlerState == constants.STATE_OWNER_FINANCIAL_EDIT_FIELD ||
			currentHandlerState == constants.STATE_OWNER_FINANCIAL_EDIT_RECORD ||
			strings.HasPrefix(currentHandlerState, "owner_cash_") ||
			strings.HasPrefix(currentCommand, constants.CALLBACK_PREFIX_DRIVER_REPORT_OVERALL_MENU) ||
			strings.HasPrefix(currentCommand, constants.CALLBACK_PREFIX_OWNER_FINANCIALS) ||
			utils.IsCommandInCategory(currentCommand, ownerCashManagementCommands)

		if isDriverOrOwnerFinancialContext {
			sessionMsgID := bh.Deps.SessionManager.GetTempDriverSettlement(chatID).CurrentMessageID
			if sessionMsgID == 0 && utils.IsCommandInCategory(currentCommand, ownerCashManagementCommands) {
				sessionMsgID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
			}
			if sessionMsgID != 0 {
				newMenuMessageID = sessionMsgID
			}
		} else {
			newMenuMessageID = bh.Deps.SessionManager.GetTempOrder(chatID).CurrentMessageID
		}
	}

	log.Printf("[CALLBACK_ADMIN] –î–∏—Å–ø–µ—Ç—á–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–æ–º–∞–Ω–¥–∞='%s', ChatID=%d, ID –Ω–æ–≤–æ–≥–æ/—Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é: %d", currentCommand, chatID, newMenuMessageID)
	return newMenuMessageID
}

// handleStaffAddRoleFinal (–ø—Ä–∏–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tempData –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é)
func (bh *BotHandler) handleStaffAddRoleFinal(adminChatID int64, roleKey string, messageIDToEdit int) {
	log.Printf("BotHandler.handleStaffAddRoleFinal: AdminChatID=%d, RoleKey=%s, MessageID=%d", adminChatID, roleKey, messageIDToEdit)
	bh.Deps.SessionManager.SetState(adminChatID, constants.STATE_STAFF_MENU) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —à—Ç–∞—Ç–∞

	tempData := bh.Deps.SessionManager.GetTempOrder(adminChatID) // –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ TempOrder
	staffName := tempData.Name
	staffSurname := tempData.Description                                                             // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Description –¥–ª—è —Ñ–∞–º–∏–ª–∏–∏
	staffNickname := sql.NullString{String: tempData.Subcategory, Valid: tempData.Subcategory != ""} // Subcategory –¥–ª—è –Ω–∏–∫–∞
	staffPhone := sql.NullString{String: tempData.Phone, Valid: tempData.Phone != ""}
	staffChatID := tempData.BlockTargetChatID // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ BlockTargetChatID –¥–ª—è chatID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
	staffCardNumberStr := tempData.Payment    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Payment –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã

	if staffName == "" || staffSurname == "" || staffChatID == 0 {
		log.Printf("handleStaffAddRoleFinal: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏. AdminChatID: %d", adminChatID)
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã.")
		bh.SendStaffMenu(adminChatID, messageIDToEdit) // –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —à—Ç–∞—Ç–∞
		return
	}

	var staffCardNumber sql.NullString
	if staffCardNumberStr != "" && staffCardNumberStr != "-" {
		re := regexp.MustCompile(`^[0-9]{16,19}$`)
		if !re.MatchString(staffCardNumberStr) {
			log.Printf("handleStaffAddRoleFinal: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã '%s'. AdminChatID: %d", staffCardNumberStr, adminChatID)
			bh.SendStaffAddPrompt(adminChatID, constants.STATE_STAFF_ADD_CARD_NUMBER, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16-19 —Ü–∏—Ñ—Ä –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:", "staff_add_prompt_chatid", messageIDToEdit)
			return
		}
		staffCardNumber = sql.NullString{String: staffCardNumberStr, Valid: true}
	}

	existingUser, errUserDB := db.GetUserByChatID(staffChatID)
	if errUserDB == nil && existingUser.ID != 0 {
		log.Printf("handleStaffAddRoleFinal: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ChatID %d —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", staffChatID)
	} else if errUserDB != nil && errUserDB != sql.ErrNoRows {
		log.Printf("handleStaffAddRoleFinal: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ChatID %d: %v", staffChatID, errUserDB)
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	errDb := db.AddStaff(staffChatID, roleKey, staffName, staffSurname, staffNickname, staffPhone, staffCardNumber)
	if errDb != nil {
		log.Printf("handleStaffAddRoleFinal: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %d –≤ –ë–î: %v", staffChatID, errDb)
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}

	bh.Deps.SessionManager.ClearTempOrder(adminChatID)
	confirmationText := fmt.Sprintf("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ *%s %s* (ChatID: `%d`) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é *%s*!",
		utils.EscapeTelegramMarkdown(staffName), utils.EscapeTelegramMarkdown(staffSurname),
		staffChatID, utils.EscapeTelegramMarkdown(utils.GetRoleDisplayName(roleKey)))
	if staffCardNumber.Valid {
		confirmationText += fmt.Sprintf("\n–ö–∞—Ä—Ç–∞: `****%s`", utils.EscapeTelegramMarkdown(staffCardNumber.String[len(staffCardNumber.String)-4:]))
	}
	bh.SendStaffActionConfirmation(adminChatID, confirmationText, messageIDToEdit, staffChatID)
}

func (bh *BotHandler) handleStaffEditRoleFinal(adminChatID int64, targetChatID int64, newRoleKey string, messageIDToEdit int) {
	log.Printf("BotHandler.handleStaffEditRoleFinal: AdminChatID=%d, TargetChatID=%d, NewRole=%s, MessageID=%d", adminChatID, targetChatID, newRoleKey, messageIDToEdit)
	bh.Deps.SessionManager.SetState(adminChatID, constants.STATE_STAFF_INFO)

	adminUser, okAdmin := bh.getUserFromDB(adminChatID)
	if !okAdmin {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
		return
	}
	targetUser, okTarget := bh.getUserFromDB(targetChatID)
	if !okTarget {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}

	if targetUser.Role == constants.ROLE_OWNER && adminUser.Role != constants.ROLE_OWNER {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "üö´ –¢–æ–ª—å–∫–æ –¥—Ä—É–≥–æ–π –í–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞.")
		bh.SendStaffInfo(adminChatID, targetChatID, messageIDToEdit)
		return
	}
	if targetUser.Role == constants.ROLE_OWNER && newRoleKey != constants.ROLE_OWNER && adminUser.Role == constants.ROLE_OWNER && adminChatID == targetChatID {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "üö´ –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç —Å–∞–º —Å–µ–±—è –ª–∏—à–∏—Ç—å —Ä–æ–ª–∏ –í–ª–∞–¥–µ–ª—å—Ü–∞.")
		bh.SendStaffInfo(adminChatID, targetChatID, messageIDToEdit)
		return
	}

	errDb := db.UpdateUserRole(targetChatID, newRoleKey)
	if errDb != nil {
		log.Printf("handleStaffEditRoleFinal: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %d: %v", targetChatID, errDb)
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}

	confirmationText := fmt.Sprintf("‚úÖ –†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *%s %s* (ChatID: `%d`) —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *%s*!",
		utils.EscapeTelegramMarkdown(targetUser.FirstName),
		utils.EscapeTelegramMarkdown(targetUser.LastName),
		targetChatID,
		utils.EscapeTelegramMarkdown(utils.GetRoleDisplayName(newRoleKey)),
	)
	updatedMsg, _ := bh.sendInfoMessage(adminChatID, messageIDToEdit, confirmationText, fmt.Sprintf("staff_info_%d", targetChatID))
	messageIDForNextMenu := messageIDToEdit
	if updatedMsg.MessageID != 0 {
		messageIDForNextMenu = updatedMsg.MessageID
	}
	bh.SendStaffInfo(adminChatID, targetChatID, messageIDForNextMenu)
	bh.Deps.SessionManager.SetState(adminChatID, constants.STATE_STAFF_INFO)
}

func (bh *BotHandler) handleStaffUnblockConfirm(adminChatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.handleStaffUnblockConfirm: AdminChatID=%d, TargetChatID=%d, MessageID=%d", adminChatID, targetChatID, messageIDToEdit)

	targetUser, ok := bh.getUserFromDB(targetChatID)
	if !ok {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		bh.SendStaffListMenu(adminChatID, messageIDToEdit)
		return
	}
	if !targetUser.IsBlocked {
		bh.sendInfoMessage(adminChatID, messageIDToEdit, "‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", fmt.Sprintf("staff_info_%d", targetChatID))
		return
	}

	errDb := db.UnblockUser(targetChatID)
	if errDb != nil {
		log.Printf("handleStaffUnblockConfirm: –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %d: %v", targetChatID, errDb)
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}

	bh.sendMessage(targetChatID, "üîì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
	confirmationText := fmt.Sprintf("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ *%s %s* (ChatID: `%d`) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
		utils.EscapeTelegramMarkdown(targetUser.FirstName),
		utils.EscapeTelegramMarkdown(targetUser.LastName),
		targetChatID,
	)
	updatedMsg, _ := bh.sendInfoMessage(adminChatID, messageIDToEdit, confirmationText, fmt.Sprintf("staff_info_%d", targetChatID))
	messageIDForNextMenu := messageIDToEdit
	if updatedMsg.MessageID != 0 {
		messageIDForNextMenu = updatedMsg.MessageID
	}
	bh.SendStaffInfo(adminChatID, targetChatID, messageIDForNextMenu)
	bh.Deps.SessionManager.SetState(adminChatID, constants.STATE_STAFF_INFO)
}

func (bh *BotHandler) handleStaffDeleteConfirm(adminChatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.handleStaffDeleteConfirm: AdminChatID=%d, TargetChatID=%d, MessageID=%d", adminChatID, targetChatID, messageIDToEdit)

	targetUser, ok := bh.getUserFromDB(targetChatID)
	if !ok {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		bh.SendStaffListMenu(adminChatID, messageIDToEdit)
		return
	}

	if targetUser.Role == constants.ROLE_OWNER {
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –í–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º.")
		bh.SendStaffInfo(adminChatID, targetChatID, messageIDToEdit)
		return
	}
	if targetUser.Role == constants.ROLE_USER {
		bh.sendInfoMessage(adminChatID, messageIDToEdit, "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.", fmt.Sprintf("staff_info_%d", targetChatID))
		return
	}

	errDb := db.DeleteStaff(targetChatID)
	if errDb != nil {
		log.Printf("handleStaffDeleteConfirm: –û—à–∏–±–∫–∞ '—É–¥–∞–ª–µ–Ω–∏—è' —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %d: %v", targetChatID, errDb)
		bh.sendErrorMessageHelper(adminChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ '—É–¥–∞–ª–µ–Ω–∏–∏' —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Å–º–µ–Ω–µ —Ä–æ–ª–∏).")
		return
	}

	bh.sendMessage(targetChatID, "–í–∞—à–∞ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –í—ã —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
	confirmationText := fmt.Sprintf("üóëÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ *%s %s* (ChatID: `%d`) '—É–¥–∞–ª–µ–Ω' (—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *%s*).",
		utils.EscapeTelegramMarkdown(targetUser.FirstName),
		utils.EscapeTelegramMarkdown(targetUser.LastName),
		targetChatID,
		utils.EscapeTelegramMarkdown(utils.GetRoleDisplayName(constants.ROLE_USER)),
	)
	updatedMsg, _ := bh.sendInfoMessage(adminChatID, messageIDToEdit, confirmationText, "staff_list_menu")
	messageIDForNextMenu := messageIDToEdit
	if updatedMsg.MessageID != 0 {
		messageIDForNextMenu = updatedMsg.MessageID
	}
	bh.SendStaffListMenu(adminChatID, messageIDForNextMenu)
	bh.Deps.SessionManager.SetState(adminChatID, constants.STATE_STAFF_MENU)
}

func (bh *BotHandler) handleStatsGetPeriod(periodKey string, data string, chatID int64, originalMessageID int) {
	log.Printf("[STATS_GET_HANDLER] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: '%s'. ChatID=%d", periodKey, chatID)
	var startDate, endDate time.Time
	now := time.Now()
	loc := now.Location()
	todayStart := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, loc)
	periodDescription := ""

	switch periodKey {
	case "today":
		startDate = todayStart
		endDate = todayStart.Add(24*time.Hour - 1*time.Nanosecond)
		periodDescription = "–°–µ–≥–æ–¥–Ω—è"
	case "yesterday":
		startDate = todayStart.AddDate(0, 0, -1)
		endDate = todayStart.Add(-1 * time.Nanosecond)
		periodDescription = "–í—á–µ—Ä–∞"
	case "current_week":
		weekday := now.Weekday()
		daysToSubstract := int(weekday - time.Monday)
		if weekday == time.Sunday {
			daysToSubstract = 6
		}
		startDate = todayStart.AddDate(0, 0, -daysToSubstract)
		endDate = startDate.AddDate(0, 0, 7).Add(-1 * time.Nanosecond)
		periodDescription = "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"
	case "current_month":
		startDate = time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, loc)
		endDate = startDate.AddDate(0, 1, 0).Add(-1 * time.Nanosecond)
		periodDescription = "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
	case "last_week":
		weekday := now.Weekday()
		daysToSubstractCurrentWeekStart := int(weekday - time.Monday)
		if weekday == time.Sunday {
			daysToSubstractCurrentWeekStart = 6
		}
		currentWeekStart := todayStart.AddDate(0, 0, -daysToSubstractCurrentWeekStart)
		endDate = currentWeekStart.Add(-1 * time.Nanosecond)
		startDate = currentWeekStart.AddDate(0, 0, -7)
		periodDescription = "–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è"
	case "last_month":
		firstDayOfCurrentMonth := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, loc)
		endDate = firstDayOfCurrentMonth.Add(-1 * time.Nanosecond)
		startDate = time.Date(endDate.Year(), endDate.Month(), 1, 0, 0, 0, 0, loc)
		periodDescription = "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü"
	default:
		log.Printf("[STATS_GET_HANDLER] –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –ø–µ—Ä–∏–æ–¥–∞ '%s'. ChatID=%d", periodKey, chatID)
		_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		bh.SendBasicStatsPeriodsMenu(chatID, originalMessageID)
		return
	}
	log.Printf("[STATS_GET_HANDLER] –†–∞—Å—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: %s - %s –¥–ª—è –∫–ª—é—á–∞ '%s'. ChatID=%d", startDate.Format("2006-01-02 15:04:05"), endDate.Format("2006-01-02 15:04:05"), periodKey, chatID)

	stats, err := db.GetStats(startDate, endDate)
	if err != nil {
		log.Printf("[STATS_GET_HANDLER] –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ '%s': %v. ChatID=%d", periodKey, err, chatID)
		_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
		return
	}
	bh.DisplayStats(chatID, originalMessageID, stats, periodDescription)
}
func (bh *BotHandler) handleStatsSelectDay(chatID int64, user models.User, context string, year int, month time.Month, day int, originalMessageID int) {
	selectedDate := time.Date(year, month, day, 0, 0, 0, 0, time.Local)
	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)

	if context == "custom_date" {
		startDate := selectedDate
		endDate := selectedDate.Add(24*time.Hour - 1*time.Nanosecond)
		stats, err := db.GetStats(startDate, endDate)
		if err != nil {
			log.Printf("[CALLBACK_ADMIN] –û—à–∏–±–∫–∞ –ë–î (custom_date) –¥–ª—è %s: %v. ChatID=%d", selectedDate.Format("02.01.06"), err, chatID)
			_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
			return
		}
		bh.DisplayStats(chatID, originalMessageID, stats, selectedDate.Format("02.01.2006"))
		bh.Deps.SessionManager.ClearTempOrder(chatID)
	} else if context == "period_start" {
		tempData.Date = selectedDate.Format("2006-01-02") // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Å–µ—Å—Å–∏—é
		bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)
		log.Printf("[CALLBACK_ADMIN] –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ '%s' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ó–∞–ø—Ä–æ—Å –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã. ChatID=%d", tempData.Date, chatID)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
		bh.SendMonthSelectionMenu(chatID, originalMessageID, year, "period_end")
	} else if context == "period_end" {
		startDateStr := tempData.Date
		if startDateStr == "" {
			log.Printf("[CALLBACK_ADMIN] –û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏. ChatID=%d", chatID)
			_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
			bh.SendStatsMenu(chatID, originalMessageID)
			return
		}
		startDate, errStart := time.ParseInLocation("2006-01-02", startDateStr, time.Local)
		if errStart != nil {
			log.Printf("[CALLBACK_ADMIN] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞ '%s': %v. ChatID=%d", startDateStr, errStart, chatID)
			_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞.")
			bh.SendStatsMenu(chatID, originalMessageID)
			return
		}
		// –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤–µ—Å—å –¥–µ–Ω—å
		endDate := selectedDate.Add(24*time.Hour - 1*time.Nanosecond)
		if endDate.Before(startDate) {
			log.Printf("[CALLBACK_ADMIN] –û—à–∏–±–∫–∞: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (%s) —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π (%s). ChatID=%d", endDate.Format("02.01.06"), startDate.Format("02.01.06"), chatID)
			_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.")
			// –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
			bh.SendMonthSelectionMenu(chatID, originalMessageID, endDate.Year(), "period_end")
			return
		}
		log.Printf("[CALLBACK_ADMIN] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: %s - %s. ChatID=%d", startDate.Format("02.01.06"), selectedDate.Format("02.01.06"), chatID)
		stats, err := db.GetStats(startDate, endDate)
		if err != nil {
			log.Printf("[CALLBACK_ADMIN] –û—à–∏–±–∫–∞ –ë–î (custom_period) –¥–ª—è %s - %s: %v. ChatID=%d", startDate.Format("02.01.06"), selectedDate.Format("02.01.06"), err, chatID)
			_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
			return
		}
		bh.DisplayStats(chatID, originalMessageID, stats, fmt.Sprintf("%s - %s", startDate.Format("02.01.2006"), selectedDate.Format("02.01.2006")))
		bh.Deps.SessionManager.ClearTempOrder(chatID)
	}
}

func (bh *BotHandler) handleStatsYearNavigation(statsContext string, yearStr string, data string, chatID int64, originalMessageID int) {
	year, errYear := strconv.Atoi(yearStr)
	if errYear != nil {
		log.Printf("[STATS_YEAR_NAV_HANDLER] –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ '%s' –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. ChatID=%d", yearStr, chatID)
		_, _ = bh.sendErrorMessageHelper(chatID, originalMessageID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
		bh.SendStatsMenu(chatID, originalMessageID)
		return
	}
	log.Printf("[STATS_YEAR_NAV_HANDLER] –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–æ–¥–∞–º: –ö–æ–Ω—Ç–µ–∫—Å—Ç=%s, –ì–æ–¥=%d. ChatID=%d", statsContext, year, chatID)
	// –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞
	bh.SendMonthSelectionMenu(chatID, originalMessageID, year, statsContext)
}
func (bh *BotHandler) handleExcelGenerate(chatID int64, user models.User, reportType string, originalMessageID int) {
	log.Printf("[EXCEL_HANDLER] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞ —Ç–∏–ø–∞: '%s'. ChatID=%d", reportType, chatID)

	generatingMsg, errGenMsg := bh.sendOrEditMessageHelper(chatID, originalMessageID, fmt.Sprintf("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç '%s'... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", reportType), nil, "")
	if errGenMsg != nil {
		log.Printf("[EXCEL_HANDLER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...': %v. ChatID=%d", errGenMsg, chatID)
		return
	}
	messageIDToDeleteAfterGeneration := generatingMsg.MessageID

	switch reportType {
	case "orders":
		bh.generateAndSendOrdersExcel(chatID, messageIDToDeleteAfterGeneration)
	case "referrals":
		bh.generateAndSendReferralsExcel(chatID, messageIDToDeleteAfterGeneration)
	case "salaries":
		bh.generateAndSendSalariesExcel(chatID, messageIDToDeleteAfterGeneration)
	default:
		log.Printf("[EXCEL_HANDLER] –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Excel –æ—Ç—á–µ—Ç–∞ '%s'. ChatID=%d", reportType, chatID)
		if messageIDToDeleteAfterGeneration != 0 {
			bh.deleteMessageHelper(chatID, messageIDToDeleteAfterGeneration)
		}
		bh.sendErrorMessageHelper(chatID, 0, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø Excel –æ—Ç—á–µ—Ç–∞.")
		bh.SendExcelMenu(chatID, 0)
		return
	}
}

func (bh *BotHandler) handleBlockUserFinal(operatorChatID int64, operatorUser models.User, targetUserChatID int64, originalMessageID int) {
	log.Printf("[BLOCK_USER_FINAL] –§–∏–Ω–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ChatID=%d –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ChatID=%d.", targetUserChatID, operatorChatID)
	var sentMsg tgbotapi.Message
	var errHelper error

	tempData := bh.Deps.SessionManager.GetTempOrder(operatorChatID)
	reason := tempData.BlockReason

	if reason == "" {
		log.Printf("[BLOCK_USER_FINAL] –û—à–∏–±–∫–∞: –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ChatID=%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ChatID=%d.", targetUserChatID, operatorChatID)
		sentMsg, errHelper = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, "–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.")
		currentMsgIDForBlockMenu := originalMessageID
		if errHelper == nil && sentMsg.MessageID != 0 {
			currentMsgIDForBlockMenu = sentMsg.MessageID
		}
		bh.SendBlockUserMenu(operatorChatID, currentMsgIDForBlockMenu)
		return
	}

	targetUser, errTarget := db.GetUserByChatID(targetUserChatID)
	if errTarget != nil {
		log.Printf("[BLOCK_USER_FINAL] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ChatID=%d –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: %v", targetUserChatID, errTarget)
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
		return
	}
	if targetUser.Role != constants.ROLE_USER {
		log.Printf("[BLOCK_USER_FINAL] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–†–æ–ª—å: %s, ChatID: %d) —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é.", targetUser.Role, targetUserChatID)
		sentMsg, errHelper = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, "–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é (–æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–º –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
		currentMsgIDForBlockMenu := originalMessageID
		if errHelper == nil && sentMsg.MessageID != 0 {
			currentMsgIDForBlockMenu = sentMsg.MessageID
		}
		bh.SendBlockUserMenu(operatorChatID, currentMsgIDForBlockMenu)
		return
	}

	errDb := db.BlockUser(targetUserChatID, reason)
	if errDb != nil {
		log.Printf("[BLOCK_USER_FINAL] –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ChatID=%d: %v", targetUserChatID, errDb)
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	log.Printf("[BLOCK_USER_FINAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ChatID=%d —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ChatID=%d. –ü—Ä–∏—á–∏–Ω–∞: %s. –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫–∂–µ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.", targetUserChatID, operatorChatID, reason)
	bh.sendMessage(targetUserChatID, fmt.Sprintf("üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: %s. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.", reason))

	finalConfirmationText := "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –í—Å–µ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã."
	bh.sendInfoMessage(operatorChatID, originalMessageID, finalConfirmationText, "block_user_menu")
	bh.Deps.SessionManager.ClearTempOrder(operatorChatID)
	bh.Deps.SessionManager.ClearState(operatorChatID)
}

func (bh *BotHandler) handleUnblockUserFinal(operatorChatID int64, operatorUser models.User, targetUserChatID int64, originalMessageID int) {
	log.Printf("[UNBLOCK_USER_FINAL] –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ChatID=%d –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ChatID=%d.", targetUserChatID, operatorChatID)

	errDb := db.UnblockUser(targetUserChatID)
	if errDb != nil {
		log.Printf("[UNBLOCK_USER_FINAL] –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ChatID=%d: %v", targetUserChatID, errDb)
		_, _ = bh.sendErrorMessageHelper(operatorChatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}
	log.Printf("[UNBLOCK_USER_FINAL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ChatID=%d —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ChatID=%d.", targetUserChatID, operatorChatID)
	bh.sendMessage(targetUserChatID, "üîì –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
	bh.sendInfoMessage(operatorChatID, originalMessageID, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", "block_user_menu")
	bh.Deps.SessionManager.ClearState(operatorChatID)
}

func (bh *BotHandler) sendAccessDenied(chatID int64, originalMessageID int) (tgbotapi.Message, error) {
	log.Printf("[ACCESS_DENIED] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è ChatID=%d, OriginalMsgID=%d", chatID, originalMessageID)
	sentMsg, err := bh.sendOrEditMessageHelper(chatID, originalMessageID, constants.AccessDeniedMessage, nil, "")
	if err != nil {
		log.Printf("[ACCESS_DENIED] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ: %v. ChatID=%d", err, chatID)
		if originalMessageID != 0 {
			newSentMsg, newErr := bh.sendMessage(chatID, constants.AccessDeniedMessage)
			if newErr != nil {
				log.Printf("[ACCESS_DENIED] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ. ChatID=%d: %v", chatID, newErr)
				return tgbotapi.Message{}, newErr
			}
			return newSentMsg, nil
		}
		return tgbotapi.Message{}, err
	}
	return sentMsg, nil
}

func (bh *BotHandler) handleOwnerDoStaffPayout(ownerChatID int64, ownerUser models.User, targetUserID int64, amountToPay float64, originalMessageID int) {
	log.Printf("handleOwnerDoStaffPayout: –í–ª–∞–¥–µ–ª–µ—Ü %d (UserID: %d) –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç %.0f —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É UserID %d", ownerChatID, ownerUser.ID, amountToPay, targetUserID)

	if ownerUser.Role != constants.ROLE_OWNER {
		bh.sendAccessDenied(ownerChatID, originalMessageID)
		return
	}
	if amountToPay <= 0 {
		bh.sendErrorMessageHelper(ownerChatID, originalMessageID, "‚ùå –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
		bh.SendOwnerStaffListForPayout(ownerChatID, ownerUser, originalMessageID, 0)
		return
	}

	targetStaff, errStaff := db.GetUserByID(int(targetUserID))
	if errStaff != nil {
		log.Printf("handleOwnerDoStaffPayout: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ UserID %d: %v", targetUserID, errStaff)
		bh.sendErrorMessageHelper(ownerChatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.")
		return
	}

	payout := models.Payout{
		UserID:       targetUserID,
		Amount:       amountToPay,
		PayoutDate:   time.Now(),
		Comment:      fmt.Sprintf("–û–±—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ –æ—Ç –í–ª–∞–¥–µ–ª—å—Ü–∞ (ID: %d) —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É %s (ID: %d)", ownerUser.ID, utils.GetUserDisplayName(targetStaff), targetUserID),
		MadeByUserID: ownerUser.ID,
	}

	payoutID, errPayout := db.AddPayout(payout)
	if errPayout != nil {
		log.Printf("handleOwnerDoStaffPayout: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –≤—ã–ø–ª–∞—Ç–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ UserID %d: %v", targetUserID, errPayout)
		bh.sendErrorMessageHelper(ownerChatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–ª–∞—Ç—ã.")
		return
	}

	log.Printf("–í—ã–ø–ª–∞—Ç–∞ #%d –Ω–∞ —Å—É–º–º—É %.0f —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É UserID %d —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –í–ª–∞–¥–µ–ª—å—Ü–µ–º UserID %d.", payoutID, amountToPay, targetUserID, ownerUser.ID)
	bh.sendMessage(targetStaff.ChatID, fmt.Sprintf("üí∏ –í–∞–º –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É %.0f ‚ÇΩ. –î–µ—Ç–∞–ª–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞'.", amountToPay))
	updatedMsg, errInfo := bh.sendInfoMessage(ownerChatID, originalMessageID,
		fmt.Sprintf("‚úÖ –í—ã–ø–ª–∞—Ç–∞ %.0f ‚ÇΩ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É %s —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.", amountToPay, utils.GetUserDisplayName(targetStaff)),
		fmt.Sprintf("%s_page_0", constants.CALLBACK_PREFIX_OWNER_STAFF_PAYOUT))

	messageIDForListUpdate := originalMessageID
	if errInfo == nil && updatedMsg.MessageID != 0 {
		messageIDForListUpdate = updatedMsg.MessageID
	}
	bh.SendOwnerStaffListForPayout(ownerChatID, ownerUser, messageIDForListUpdate, 0)
}

func (bh *BotHandler) handleOwnerMarkSalaryPaid(chatID int64, user models.User, settlementID int64, originalMessageID int) {
	log.Printf("handleOwnerMarkSalaryPaid: –í–ª–∞–¥–µ–ª–µ—Ü %d –ø–æ–º–µ—á–∞–µ—Ç –ó–ü –ø–æ –æ—Ç—á–µ—Ç—É #%d –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é. OriginalMsgID: %d", chatID, settlementID, originalMessageID)
	errDb := db.MarkDriverSalaryAsPaid(settlementID)
	if errDb != nil {
		log.Printf("handleOwnerMarkSalaryPaid: –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –ó–ü –ø–æ –æ—Ç—á–µ—Ç—É #%d –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–æ–π: %v", settlementID, errDb)
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤—ã–ø–ª–∞—Ç—ã –ó–ü.")
		return
	}
	log.Printf("–ó–ü –ø–æ –æ—Ç—á–µ—Ç—É #%d –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–µ—Å–ª–∏ –±—ã–ª–∏).", settlementID)
	tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
	bh.SendOwnerDriverIndividualSettlementsList(chatID, user, originalMessageID, tempData.DriverUserIDForBackNav, tempData.ViewTypeForBackNav, tempData.PageForBackNav)
}

func (bh *BotHandler) handleOwnerMarkSalaryUnpaid(chatID int64, user models.User, settlementID int64, originalMessageID int) {
	errDb := db.MarkDriverSalaryAsUnpaid(settlementID)
	if errDb != nil {
		log.Printf("CALLBACK_ADMIN: –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø–æ–º–µ—Ç–∫–∏ –ó–ü –ø–æ –æ—Ç—á–µ—Ç—É #%d: %v", settlementID, errDb)
		bh.sendErrorMessageHelper(chatID, originalMessageID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–ª–∞—Ç—ã –ó–ü.")
		return
	}
	settlement, errGet := db.GetDriverSettlementByID(settlementID)
	if errGet != nil {
		log.Printf("CALLBACK_ADMIN: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ #%d –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∞: %v", settlementID, errGet)
		bh.SendOwnerCashManagementMenu(chatID, user, originalMessageID)
		return
	}
	tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
	bh.SendOwnerDriverIndividualSettlementsList(chatID, user, originalMessageID, settlement.DriverUserID, tempData.ViewTypeForBackNav, tempData.PageForBackNav)
}

func (bh *BotHandler) handleOwnerMarkAllSalaryPaid(chatID int64, owner models.User, driverUserID int64, viewType string, originalMessageID int) {
	log.Printf("handleOwnerMarkAllSalaryPaid: –í–ª–∞–¥–µ–ª–µ—Ü %d, –í–æ–¥–∏—Ç–µ–ª—å %d, –¢–∏–ø —Å–ø–∏—Å–∫–∞ %s", chatID, driverUserID, viewType)
	var reportsToUpdate []models.DriverSettlementWithDriverName
	page := 0
	processedSettlementIDs := make(map[int64]bool)

	for {
		settlements, total, err := db.GetDriverSettlementsForOwnerView(driverUserID, viewType, page, 100)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è '–ó–ü –∑–∞ –≤—Å–µ' (–≤–æ–¥–∏—Ç–µ–ª—å %d, —Ç–∏–ø %s, —Å—Ç—Ä %d): %v", driverUserID, viewType, page, err)
			bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏.")
			return
		}
		if len(settlements) == 0 {
			break
		}
		for _, s := range settlements {
			if !s.DriverSalaryPaidAt.Valid && !processedSettlementIDs[s.ID] {
				reportsToUpdate = append(reportsToUpdate, s)
				processedSettlementIDs[s.ID] = true
			}
		}
		if page*100+len(settlements) >= total {
			break
		}
		page++
		if page > 20 {
			log.Printf("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è '–ó–ü –∑–∞ –≤—Å–µ'. –í–æ–¥–∏—Ç–µ–ª—å %d", driverUserID)
			break
		}
	}

	if len(reportsToUpdate) == 0 {
		bh.sendInfoMessage(chatID, originalMessageID, "–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –ó–ü.", fmt.Sprintf("%s_%d_%s_0", constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS, driverUserID, viewType))
		return
	}

	successCount := 0
	errorCount := 0
	for _, report := range reportsToUpdate {
		err := db.MarkDriverSalaryAsPaid(report.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ó–ü –ø–æ –æ—Ç—á–µ—Ç—É #%d: %v", report.ID, err)
			errorCount++
		} else {
			successCount++
		}
	}

	resultMessage := fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –ó–ü –ø–æ %d –æ—Ç—á–µ—Ç–∞–º.", successCount)
	if errorCount > 0 {
		resultMessage += fmt.Sprintf("\n–û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ: %d.", errorCount)
	}
	bh.sendInfoMessage(chatID, originalMessageID, resultMessage, fmt.Sprintf("%s_%d_%s_0", constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS, driverUserID, viewType))
	tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
	bh.SendOwnerDriverIndividualSettlementsList(chatID, owner, originalMessageID, driverUserID, tempData.ViewTypeForBackNav, tempData.PageForBackNav)
}

func (bh *BotHandler) handleOwnerMarkAllMoneyDeposited(chatID int64, owner models.User, driverUserID int64, viewType string, originalMessageID int) {
	log.Printf("handleOwnerMarkAllMoneyDeposited: –í–ª–∞–¥–µ–ª–µ—Ü %d, –í–æ–¥–∏—Ç–µ–ª—å %d, –¢–∏–ø —Å–ø–∏—Å–∫–∞ %s", chatID, driverUserID, viewType)

	if viewType != constants.VIEW_TYPE_ACTUAL_SETTLEMENTS {
		bh.sendErrorMessageHelper(chatID, originalMessageID, "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö (–Ω–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö) –æ—Ç—á–µ—Ç–æ–≤.")
		return
	}
	var reportsToUpdate []models.DriverSettlementWithDriverName
	page := 0
	processedSettlementIDs := make(map[int64]bool)

	for {
		settlements, total, err := db.GetDriverSettlementsForOwnerView(driverUserID, viewType, page, 100)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è '–î–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã –∑–∞ –≤—Å–µ' (–≤–æ–¥–∏—Ç–µ–ª—å %d, —Ç–∏–ø %s, —Å—Ç—Ä %d): %v", driverUserID, viewType, page, err)
			bh.sendErrorMessageHelper(chatID, originalMessageID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏.")
			return
		}
		if len(settlements) == 0 {
			break
		}
		for _, s := range settlements {
			if !s.PaidToOwnerAt.Valid && !processedSettlementIDs[s.ID] {
				reportsToUpdate = append(reportsToUpdate, s)
				processedSettlementIDs[s.ID] = true
			}
		}
		if page*100+len(settlements) >= total {
			break
		}
		page++
		if page > 20 {
			log.Printf("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è '–î–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã –∑–∞ –≤—Å–µ'. –í–æ–¥–∏—Ç–µ–ª—å %d", driverUserID)
			break
		}
	}

	if len(reportsToUpdate) == 0 {
		bh.sendInfoMessage(chatID, originalMessageID, "–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–µ–Ω–µ–≥.", fmt.Sprintf("%s_%d_%s_0", constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS, driverUserID, viewType))
		return
	}
	successCount := 0
	errorCount := 0
	for _, report := range reportsToUpdate {
		err := db.MarkSettlementAsPaidToOwner(report.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ '–î–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã' –ø–æ –æ—Ç—á–µ—Ç—É #%d: %v", report.ID, err)
			errorCount++
		} else {
			successCount++
		}
	}
	resultMessage := fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ '–î–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã' –ø–æ %d –æ—Ç—á–µ—Ç–∞–º.", successCount)
	if errorCount > 0 {
		resultMessage += fmt.Sprintf("\n–û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ: %d.", errorCount)
	}
	bh.sendInfoMessage(chatID, originalMessageID, resultMessage, fmt.Sprintf("%s_%d_%s_0", constants.CALLBACK_PREFIX_OWNER_VIEW_DRIVER_SETTLEMENTS, driverUserID, viewType))
	tempData := bh.Deps.SessionManager.GetTempDriverSettlement(chatID)
	bh.SendOwnerDriverIndividualSettlementsList(chatID, owner, originalMessageID, driverUserID, tempData.ViewTypeForBackNav, tempData.PageForBackNav)
}

// SendOperatorReviewSettlementMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ—Ç—á–µ—Ç –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
func (bh *BotHandler) SendOperatorReviewSettlementMenu(operatorChatID int64, operatorUser models.User, settlementID int64, messageIDToEdit int) {
	log.Printf("SendOperatorReviewSettlementMenu: –û–ø–µ—Ä–∞—Ç–æ—Ä %d –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç #%d –¥–ª—è —Ä–µ—à–µ–Ω–∏—è.", operatorChatID, settlementID)
	bh.Deps.SessionManager.SetState(operatorChatID, constants.STATE_OPERATOR_REVIEW_SETTLEMENT)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
	settlement, err := db.GetDriverSettlementByID(settlementID)
	if err != nil {
		bh.sendErrorMessageHelper(operatorChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
		return
	}

	driver, _ := db.GetUserByID(int(settlement.DriverUserID))
	driverDisplayName := utils.GetUserDisplayName(driver)

	var reportDetails strings.Builder
	reportDetails.WriteString(fmt.Sprintf("üßæ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –û—Ç—á–µ—Ç–∞ –í–æ–¥–∏—Ç–µ–ª—è: %s*\n", utils.EscapeTelegramMarkdown(driverDisplayName)))
	reportDetails.WriteString(fmt.Sprintf("üÜî –û—Ç—á–µ—Ç–∞: *%d* –æ—Ç %s\n\n", settlement.ID, settlement.SettlementTimestamp.Format("02.01.06 15:04")))
	reportDetails.WriteString(fmt.Sprintf("üì¶ *–ü–æ–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã (%d —à—Ç.):*\n", settlement.CoveredOrdersCount))
	if len(settlement.CoveredOrderIDs) > 0 {
		var orderLinks []string
		for _, orderID := range settlement.CoveredOrderIDs {
			// –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞
			orderLinks = append(orderLinks, fmt.Sprintf("[#%d](tg://btn/%s%d)", orderID, "view_order_ops_", orderID))
		}
		reportDetails.WriteString(strings.Join(orderLinks, ", ") + "\n")
	} else {
		reportDetails.WriteString("_ID –∑–∞–∫–∞–∑–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω—ã_\n")
	}
	reportDetails.WriteString(fmt.Sprintf("\nüí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º: *%.0f ‚ÇΩ*\n", settlement.CoveredOrdersRevenue))

	reportDetails.WriteString("\n*–†–∞—Å—Ö–æ–¥—ã:*\n")
	reportDetails.WriteString(fmt.Sprintf("  ‚õΩÔ∏è –¢–æ–ø–ª–∏–≤–æ: *%.0f ‚ÇΩ*\n", settlement.FuelExpense))

	if len(settlement.OtherExpenses) > 0 {
		reportDetails.WriteString("  üõ†Ô∏è *–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*\n")
		for _, oe := range settlement.OtherExpenses {
			reportDetails.WriteString(fmt.Sprintf("    - %s: *%.0f ‚ÇΩ*\n", utils.EscapeTelegramMarkdown(oe.Description), oe.Amount))
		}
	} else {
		reportDetails.WriteString("  üõ†Ô∏è –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: *0 ‚ÇΩ*\n")
	}

	if len(settlement.LoaderPayments) > 0 {
		reportDetails.WriteString("\nüë∑ *–ó–∞—Ä–ø–ª–∞—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞–º:*\n")
		totalLoaderSalary := 0.0
		for _, lp := range settlement.LoaderPayments {
			reportDetails.WriteString(fmt.Sprintf("  - %s: *%.0f ‚ÇΩ*\n", utils.EscapeTelegramMarkdown(lp.LoaderIdentifier), lp.Amount))
			totalLoaderSalary += lp.Amount
		}
		reportDetails.WriteString(fmt.Sprintf("  –ò—Ç–æ–≥–æ –≥—Ä—É–∑—á–∏–∫–∞–º: *%.0f ‚ÇΩ*\n", totalLoaderSalary))
	}

	reportDetails.WriteString("\n*–ò—Ç–æ–≥–∏:*\n")
	reportDetails.WriteString(fmt.Sprintf("  üí∏ –†–∞—Å—á–µ—Ç–Ω–∞—è –ó–ü –≤–æ–¥–∏—Ç–µ–ª—è: *%.0f ‚ÇΩ*\n", settlement.DriverCalculatedSalary))
	reportDetails.WriteString(fmt.Sprintf("  ‚û°Ô∏è –°—É–º–º–∞ –∫ —Å–¥–∞—á–µ –≤ –∫–∞—Å—Å—É: *%.0f ‚ÇΩ*\n\n", settlement.AmountToCashier))
	reportDetails.WriteString("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ.")

	var keyboard tgbotapi.InlineKeyboardMarkup
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending'
	if settlement.Status == constants.SETTLEMENT_STATUS_PENDING {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OPERATOR_APPROVE_SETTLEMENT, settlement.ID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OPERATOR_REJECT_SETTLEMENT, settlement.ID)),
		))
	} else {
		reportDetails.WriteString(fmt.Sprintf("\n\n*–°—Ç–∞—Ç—É—Å: %s*", settlement.Status))
		if settlement.AdminComment.Valid {
			reportDetails.WriteString(fmt.Sprintf("\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s*", utils.EscapeTelegramMarkdown(settlement.AdminComment.String)))
		}
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
	))
	keyboard.InlineKeyboard = rows

	bh.sendOrEditMessageHelper(operatorChatID, messageIDToEdit, reportDetails.String(), &keyboard, tgbotapi.ModeMarkdown)
}

// handleOperatorApproveSettlement –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞.
func (bh *BotHandler) handleOperatorApproveSettlement(operatorChatID int64, operatorUser models.User, settlementID int64, messageIDToEdit int) {
	err := db.UpdateDriverSettlementStatus(settlementID, constants.SETTLEMENT_STATUS_APPROVED, sql.NullString{})
	if err != nil {
		bh.sendErrorMessageHelper(operatorChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
		return
	}

	settlement, _ := db.GetDriverSettlementByID(settlementID)
	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
	driver, _ := db.GetUserByID(int(settlement.DriverUserID))
	driverMessage := fmt.Sprintf("‚úÖ –í–∞—à –æ—Ç—á–µ—Ç #%d –±—ã–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º %s.", settlement.ID, utils.GetUserDisplayName(operatorUser))
	bh.sendMessage(driver.ChatID, driverMessage)

	bh.sendInfoMessage(operatorChatID, messageIDToEdit, fmt.Sprintf("‚úÖ –û—Ç—á–µ—Ç #%d —É—Å–ø–µ—à–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω.", settlementID), "back_to_main")
	bh.Deps.SessionManager.ClearState(operatorChatID)
}

// handleOperatorRejectSettlement –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å".
func (bh *BotHandler) handleOperatorRejectSettlement(operatorChatID int64, operatorUser models.User, settlementID int64, messageIDToEdit int) {
	bh.Deps.SessionManager.SetState(operatorChatID, constants.STATE_OPERATOR_REJECT_REASON_INPUT)
	tempData := bh.Deps.SessionManager.GetTempDriverSettlement(operatorChatID)
	tempData.EditingSettlementID = settlementID
	bh.Deps.SessionManager.UpdateTempDriverSettlement(operatorChatID, tempData)

	promptText := fmt.Sprintf("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ #%d:", settlementID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç—É", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OPERATOR_VIEW_DRIVER_SETTLEMENT, settlementID)),
		),
	)
	bh.sendOrEditMessageHelper(operatorChatID, messageIDToEdit, promptText, &keyboard, "")
}

// handleOperatorFinalizeRejection –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã.
func (bh *BotHandler) handleOperatorFinalizeRejection(operatorChatID int64, operatorUser models.User, settlementID int64, reason string, messageIDToEdit int) {
	err := db.UpdateDriverSettlementStatus(settlementID, constants.SETTLEMENT_STATUS_REJECTED, sql.NullString{String: reason, Valid: true})
	if err != nil {
		bh.sendErrorMessageHelper(operatorChatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
		return
	}

	settlement, _ := db.GetDriverSettlementByID(settlementID)
	driver, _ := db.GetUserByID(int(settlement.DriverUserID))
	// –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
	driverMessage := fmt.Sprintf("‚ùå –í–∞—à –æ—Ç—á–µ—Ç #%d –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º %s.\n–ü—Ä–∏—á–∏–Ω–∞: %s\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç.",
		settlement.ID, utils.GetUserDisplayName(operatorUser), reason)
	bh.sendMessage(driver.ChatID, driverMessage)

	bh.sendInfoMessage(operatorChatID, messageIDToEdit, fmt.Sprintf("‚ùå –û—Ç—á–µ—Ç #%d –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í–æ–¥–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.", settlementID), "back_to_main")
	bh.Deps.SessionManager.ClearState(operatorChatID)
	bh.Deps.SessionManager.ClearTempDriverSettlement(operatorChatID)
}

// SendOperatorViewDriverSettlementDetails –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è.
func (bh *BotHandler) SendOperatorViewDriverSettlementDetails(operatorChatID int64, operatorUser models.User, settlementID int64, messageIDToEdit int) {
	log.Printf("SendOperatorViewDriverSettlementDetails: –û–ø–µ—Ä–∞—Ç–æ—Ä %d (UserID: %d) –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç #%d", operatorChatID, operatorUser.ID, settlementID)

	settlement, err := db.GetDriverSettlementByID(settlementID)
	if err != nil {
		log.Printf("SendOperatorViewDriverSettlementDetails: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ #%d: %v", settlementID, err)
		bh.sendErrorMessageHelper(operatorChatID, messageIDToEdit, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞.")
		return
	}

	// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–µ –º–µ–Ω—é ---
	// –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –æ–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
	if settlement.Status == constants.SETTLEMENT_STATUS_PENDING {
		bh.SendOperatorReviewSettlementMenu(operatorChatID, operatorUser, settlementID, messageIDToEdit)
		return // –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
	}
	// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

	// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ù–ï pending (—Ç.–µ. –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
	driver, errDriver := db.GetUserByID(int(settlement.DriverUserID))
	driverDisplayName := fmt.Sprintf("–í–æ–¥–∏—Ç–µ–ª—å ID %d", settlement.DriverUserID)
	if errDriver == nil {
		driverDisplayName = utils.GetUserDisplayName(driver)
	}

	var reportDetails strings.Builder
	reportDetails.WriteString(fmt.Sprintf("üßæ *–û—Ç—á–µ—Ç –í–æ–¥–∏—Ç–µ–ª—è: %s*\n", utils.EscapeTelegramMarkdown(driverDisplayName)))
	reportDetails.WriteString(fmt.Sprintf("üÜî –û—Ç—á–µ—Ç–∞: *%d*\n", settlement.ID))
	reportDetails.WriteString(fmt.Sprintf("üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: *%s*\n", settlement.ReportDate.Format("02.01.2006")))
	reportDetails.WriteString(fmt.Sprintf("‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: *%s*\n\n", settlement.SettlementTimestamp.Format("02.01.06 15:04")))

	reportDetails.WriteString(fmt.Sprintf("üì¶ *–ü–æ–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã (%d —à—Ç.):*\n", settlement.CoveredOrdersCount))
	if len(settlement.CoveredOrderIDs) > 0 {
		var orderLinks []string
		for _, orderID := range settlement.CoveredOrderIDs {
			orderLinks = append(orderLinks, fmt.Sprintf("[#%d](tg://btn/%s_%d)", orderID, "view_order_ops", orderID))
		}
		reportDetails.WriteString(strings.Join(orderLinks, ", ") + "\n")
	} else {
		reportDetails.WriteString("_ID –∑–∞–∫–∞–∑–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω—ã_\n")
	}
	reportDetails.WriteString(fmt.Sprintf("\nüí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º: *%.0f ‚ÇΩ*\n", settlement.CoveredOrdersRevenue))

	reportDetails.WriteString("\n*–†–∞—Å—Ö–æ–¥—ã:*\n")
	reportDetails.WriteString(fmt.Sprintf("  ‚õΩÔ∏è –¢–æ–ø–ª–∏–≤–æ: *%.0f ‚ÇΩ*\n", settlement.FuelExpense))

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
	if len(settlement.OtherExpenses) > 0 {
		reportDetails.WriteString("  üõ†Ô∏è *–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:*\n")
		for _, oe := range settlement.OtherExpenses {
			reportDetails.WriteString(fmt.Sprintf("    - %s: *%.0f ‚ÇΩ*\n", utils.EscapeTelegramMarkdown(oe.Description), oe.Amount))
		}
	} else {
		reportDetails.WriteString("  üõ†Ô∏è –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: *0 ‚ÇΩ*\n")
	}

	if len(settlement.LoaderPayments) > 0 {
		reportDetails.WriteString("\nüë∑ *–ó–∞—Ä–ø–ª–∞—Ç—ã –≥—Ä—É–∑—á–∏–∫–∞–º:*\n")
		totalLoaderSalary := 0.0
		for _, lp := range settlement.LoaderPayments {
			reportDetails.WriteString(fmt.Sprintf("  - %s: *%.0f ‚ÇΩ*\n", utils.EscapeTelegramMarkdown(lp.LoaderIdentifier), lp.Amount))
			totalLoaderSalary += lp.Amount
		}
		reportDetails.WriteString(fmt.Sprintf("  –ò—Ç–æ–≥–æ –≥—Ä—É–∑—á–∏–∫–∞–º: *%.0f ‚ÇΩ*\n", totalLoaderSalary))
	}

	reportDetails.WriteString("\n*–ò—Ç–æ–≥–∏:*\n")
	reportDetails.WriteString(fmt.Sprintf("  üí∏ –†–∞—Å—á–µ—Ç–Ω–∞—è –ó–ü –≤–æ–¥–∏—Ç–µ–ª—è: *%.0f ‚ÇΩ*\n", settlement.DriverCalculatedSalary))
	reportDetails.WriteString(fmt.Sprintf("  ‚û°Ô∏è –°—É–º–º–∞ –∫ —Å–¥–∞—á–µ –≤ –∫–∞—Å—Å—É: *%.0f ‚ÇΩ*\n", settlement.AmountToCashier))

	var statusMoney, statusSalary string
	if settlement.PaidToOwnerAt.Valid {
		statusMoney = fmt.Sprintf("‚úÖ –î–µ–Ω—å–≥–∏ –≤–Ω–µ—Å–µ–Ω—ã (%s)", settlement.PaidToOwnerAt.Time.Format("02.01.06 15:04"))
	} else {
		statusMoney = "‚ùå –î–µ–Ω—å–≥–∏ –ù–ï –≤–Ω–µ—Å–µ–Ω—ã"
	}
	if settlement.DriverSalaryPaidAt.Valid {
		statusSalary = fmt.Sprintf("‚úÖ –ó–ü –≤—ã–ø–ª–∞—á–µ–Ω–∞ (%s)", settlement.DriverSalaryPaidAt.Time.Format("02.01.06 15:04"))
	} else {
		statusSalary = "‚ùå –ó–ü –ù–ï –≤—ã–ø–ª–∞—á–µ–Ω–∞"
	}
	reportDetails.WriteString(fmt.Sprintf("\n*–°—Ç–∞—Ç—É—Å —Ä–∞—Å—á–µ—Ç–∞:*\n  %s\n  %s\n", statusMoney, statusSalary))

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞
	reportDetails.WriteString(fmt.Sprintf("\n*–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞: %s*", settlement.Status))
	if settlement.AdminComment.Valid {
		reportDetails.WriteString(fmt.Sprintf("\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s*", utils.EscapeTelegramMarkdown(settlement.AdminComment.String)))
	}

	var rows [][]tgbotapi.InlineKeyboardButton // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
	if utils.IsRoleOrHigher(operatorUser.Role, constants.ROLE_OWNER) {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç", fmt.Sprintf("%s_%d_%d_%s_%d", constants.CALLBACK_PREFIX_OWNER_EDIT_SETTLEMENT, settlement.ID, settlement.DriverUserID, constants.VIEW_TYPE_ACTUAL_SETTLEMENTS, 0)),
		))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ö —É–ø—Ä. –¥–µ–Ω–µ–∂–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏", constants.CALLBACK_PREFIX_OWNER_CASH_MANAGEMENT_MAIN),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	sentMsg, err := bh.sendOrEditMessageHelper(operatorChatID, messageIDToEdit, reportDetails.String(), &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendOperatorViewDriverSettlementDetails: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ç—á–µ—Ç–∞ #%d –æ–ø–µ—Ä–∞—Ç–æ—Ä—É %d: %v", settlementID, operatorChatID, err)
	} else {
		if sentMsg.MessageID != 0 && messageIDToEdit == 0 {
			log.Printf("SendOperatorViewDriverSettlementDetails: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %d –æ–ø–µ—Ä–∞—Ç–æ—Ä—É %d —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç—á–µ—Ç–∞ #%d", sentMsg.MessageID, operatorChatID, settlementID)
		} else if sentMsg.MessageID != 0 && messageIDToEdit != 0 {
			log.Printf("SendOperatorViewDriverSettlementDetails: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ %d –æ–ø–µ—Ä–∞—Ç–æ—Ä—É %d —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç—á–µ—Ç–∞ #%d", sentMsg.MessageID, operatorChatID, settlementID)
		}
	}
}
