package telegram_api

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
)

// SendOrEditMessage –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑-–∑–∞ "message is not modified", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π"
// Message –æ–±—ä–µ–∫—Ç —Å ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ nil –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—à–∏–±–∫–∏.
func SendOrEditMessage(
	botClient *BotClient,
	chatID int64,
	messageIDToTryEdit int,
	text string,
	keyboard *tgbotapi.InlineKeyboardMarkup,
	parseMode string,
) (tgbotapi.Message, error) {
	if botClient == nil || botClient.api == nil {
		log.Println("SendOrEditMessage: BotClient –∏–ª–∏ –µ–≥–æ API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
		return tgbotapi.Message{}, fmt.Errorf("BotClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	// –°–æ–∑–¥–∞–µ–º "—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π" –æ–±—ä–µ–∫—Ç Message –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ no-op —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	// –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
	var originalMsgObject tgbotapi.Message
	if messageIDToTryEdit != 0 {
		var chatObj tgbotapi.Chat
		chatObj.ID = chatID
		originalMsgObject.Chat = chatObj // <- –ò–°–ü–†–ê–í–õ–ï–ù–û
		originalMsgObject.MessageID = messageIDToTryEdit
		originalMsgObject.Text = text // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
		if keyboard != nil {
			originalMsgObject.ReplyMarkup = keyboard // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		}
	}

	if messageIDToTryEdit != 0 {
		var editMsgConfig tgbotapi.EditMessageTextConfig
		if keyboard != nil {
			editMsgConfig = tgbotapi.NewEditMessageTextAndMarkup(chatID, messageIDToTryEdit, text, *keyboard)
		} else {
			editMsgConfig = tgbotapi.NewEditMessageText(chatID, messageIDToTryEdit, text)
		}
		if parseMode != "" {
			editMsgConfig.ParseMode = parseMode
		}

		_, err := botClient.Request(editMsgConfig)
		if err == nil {
			// –£—Å–ø–µ—à–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
			return originalMsgObject, nil
		}

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "message is not modified", —ç—Ç–æ –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–∞—Å,
		// –ø—Ä–æ—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ nil –æ—à–∏–±–∫—É.
		if strings.Contains(err.Error(), "message is not modified") {
			log.Printf("SendOrEditMessage: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (–æ–∂–∏–¥–∞–µ–º–æ): chatID=%d, MessageID=%d. –¢–µ–∫—Å—Ç: '%.50s...'", chatID, messageIDToTryEdit, text)
			return originalMsgObject, nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ nil –æ—à–∏–±–∫—É
		}

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "message to edit not found", —ç—Ç–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ,
		// –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		if strings.Contains(err.Error(), "message to edit not found") {
			log.Printf("SendOrEditMessage: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ): chatID=%d, MessageID=%d: %v. –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ.", chatID, messageIDToTryEdit, err)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		} else {
			// –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ
			log.Printf("SendOrEditMessage: –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è chatID=%d, MessageID=%d: %v. –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ.", chatID, messageIDToTryEdit, err)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–∫—Ä–æ–º–µ "not modified") –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å
	newMsg := tgbotapi.NewMessage(chatID, text)
	if keyboard != nil {
		newMsg.ReplyMarkup = keyboard
	}
	if parseMode != "" {
		newMsg.ParseMode = parseMode
	}

	actualSentMsg, err := botClient.Send(newMsg)
	if err != nil {
		log.Printf("SendOrEditMessage: –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatID %d: %v", chatID, err)
		return tgbotapi.Message{}, err
	}
	log.Printf("SendOrEditMessage: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID %d –¥–ª—è chatID %d. Text: '%.50s...'", actualSentMsg.MessageID, chatID, text)
	return actualSentMsg, nil
}

// SendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func SendErrorMessage(
	botClient *BotClient,
	chatID int64,
	messageIDToTryEdit int,
	errorText string,
) (tgbotapi.Message, error) {
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è chatID %d: %s", chatID, errorText)
	if botClient == nil || botClient.api == nil {
		log.Println("SendErrorMessage: BotClient –∏–ª–∏ –µ–≥–æ API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
		return tgbotapi.Message{}, fmt.Errorf("BotClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)
	return SendOrEditMessage(botClient, chatID, messageIDToTryEdit, errorText, &keyboard, tgbotapi.ModeMarkdown)
}

// DeleteMessage —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
func DeleteMessage(botClient *BotClient, chatID int64, messageID int) bool {
	if botClient == nil || botClient.api == nil {
		log.Println("DeleteMessage: BotClient –∏–ª–∏ –µ–≥–æ API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
		return false
	}
	if messageID == 0 {
		return false
	}

	deleteConfig := tgbotapi.NewDeleteMessage(chatID, messageID)
	response, err := botClient.Request(deleteConfig)

	if err != nil {
		log.Printf("DeleteMessage API Call Error: ChatID=%d, MessageID=%d, Error: %v", chatID, messageID, err)
		return false
	}
	if !response.Ok {
		if response.Description != "Bad Request: message to delete not found" &&
			response.Description != "Bad Request: message can't be deleted" &&
			!strings.Contains(response.Description, "MESSAGE_ID_INVALID") {
			log.Printf("DeleteMessage: Telegram API –Ω–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %d –¥–ª—è chatID %d: %s (ErrorCode: %d)", messageID, chatID, response.Description, response.ErrorCode)
		}
		return false
	}
	// log.Printf("DeleteMessage API Response OK: ChatID=%d, MessageID=%d successfully marked for deletion by API.", chatID, messageID)
	return true
}

// DeleteMessages —É–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
func DeleteMessages(botClient *BotClient, chatID int64, messageIDs []int) int {
	if botClient == nil || botClient.api == nil {
		log.Println("DeleteMessages: BotClient –∏–ª–∏ –µ–≥–æ API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
		return 0
	}
	if len(messageIDs) == 0 {
		return 0
	}
	successfullyDeleted := 0
	for _, msgID := range messageIDs {
		if DeleteMessage(botClient, chatID, msgID) {
			successfullyDeleted++
		}
	}
	if successfullyDeleted > 0 {
		// log.Printf("DeleteMessages: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ %d –∏–∑ %d —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è chatID %d.", successfullyDeleted, len(messageIDs), chatID)
	}
	return successfullyDeleted
}
