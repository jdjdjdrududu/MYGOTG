// –§–∞–π–ª: internal/handlers/payment_handler.go
package handlers

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"

	"Original/internal/constants"
	"Original/internal/db"
	"Original/internal/payments"
	"Original/internal/utils"
)

// HandleYooKassaNotification –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≤–µ–±—Ö—É–∫–∏ –æ—Ç –ÆKassa.
func (bh *BotHandler) HandleYooKassaNotification(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		log.Printf("[YOOKASSA_HANDLER] –ü–æ–ª—É—á–µ–Ω –Ω–µ-POST –∑–∞–ø—Ä–æ—Å: %s", r.Method)
		http.Error(w, "Only POST method is accepted", http.StatusMethodNotAllowed)
		return
	}

	body, err := io.ReadAll(r.Body)
	if err != nil {
		log.Printf("[YOOKASSA_HANDLER] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		http.Error(w, "Cannot read request body", http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	log.Printf("[YOOKASSA_HANDLER] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s", string(body))

	var notification payments.YooKassaNotification
	if err := json.Unmarshal(body, &notification); err != nil {
		log.Printf("[YOOKASSA_HANDLER] –û—à–∏–±–∫–∞ –¥–µ–º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ JSON: %v", err)
		http.Error(w, "Invalid JSON format", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
	if notification.Event == "payment.succeeded" {
		log.Printf("[YOOKASSA_HANDLER] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. PaymentID: %s", notification.Object.ID)

		// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
		var metadata map[string]string
		if err := json.Unmarshal(notification.Object.Metadata, &metadata); err != nil {
			log.Printf("[YOOKASSA_HANDLER] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è PaymentID %s: %v", notification.Object.ID, err)
			// –û—Ç–≤–µ—á–∞–µ–º 200 OK, —á—Ç–æ–±—ã –ÆKassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å
			w.WriteHeader(http.StatusOK)
			return
		}

		orderIDStr, ok := metadata["order_id"]
		if !ok {
			log.Printf("[YOOKASSA_HANDLER] –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è PaymentID %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id.", notification.Object.ID)
			w.WriteHeader(http.StatusOK)
			return
		}

		orderID, err := strconv.ParseInt(orderIDStr, 10, 64)
		if err != nil {
			log.Printf("[YOOKASSA_HANDLER] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç order_id '%s' –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è PaymentID %s.", orderIDStr, notification.Object.ID)
			w.WriteHeader(http.StatusOK)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
		order, err := db.GetOrderByID(int(orderID))
		if err != nil {
			log.Printf("[YOOKASSA_HANDLER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #%d –∏–∑ –ë–î: %v", orderID, err)
			w.WriteHeader(http.StatusOK)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		if order.Status == constants.STATUS_AWAITING_PAYMENT {
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
			errUpdate := db.UpdateOrderStatus(orderID, constants.STATUS_INPROGRESS)
			if errUpdate != nil {
				log.Printf("[YOOKASSA_HANDLER] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #%d –Ω–∞ IN_PROGRESS: %v", orderID, errUpdate)
				// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å 500, —á—Ç–æ–±—ã –ÆKassa –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∞ —Å–Ω–æ–≤–∞
				http.Error(w, "Failed to update order status", http.StatusInternalServerError)
				return
			}

			log.Printf("[YOOKASSA_HANDLER] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #%d —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'in_progress'.", orderID)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
			clientMsg := fmt.Sprintf("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ%d –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏.", orderID)
			bh.sendMessage(order.UserChatID, clientMsg)

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
			client, _ := db.GetUserByChatID(order.UserChatID)
			operatorMsg := fmt.Sprintf(
				"üí∏ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ%d –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %s.\n"+
					"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '%s'. –ú–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.",
				orderID,
				utils.GetUserDisplayName(client),
				constants.StatusDisplayMap[constants.STATUS_INPROGRESS],
			)
			bh.NotifyOperatorsAndGroup(operatorMsg)

		} else {
			log.Printf("[YOOKASSA_HANDLER] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã' (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %s). –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.", orderID, order.Status)
		}
	}

	// –û—Ç–≤–µ—á–∞–µ–º –ÆKassa, —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
	w.WriteHeader(http.StatusOK)
}
