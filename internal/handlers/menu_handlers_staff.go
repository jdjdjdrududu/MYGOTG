package handlers

import (
	"fmt"
	"log"
	"strings"
	// "time" // Not used directly here

	tgbotapi "github.com/OvyFlash/telegram-bot-api"

	// "github.com/xuri/excelize/v2" // Not used here

	"Original/internal/constants"
	"Original/internal/db"
	// "Original/internal/session" // Access via bh.Deps
	"Original/internal/utils"
)

// SendStaffMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º.
// SendStaffMenu sends the main staff management menu.
func (bh *BotHandler) SendStaffMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STAFF_MENU)
	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —à—Ç–∞—Ç–∞
	// Clear temporary staff data when entering the main staff menu
	bh.Deps.SessionManager.ClearTempOrder(chatID)

	msgText := "üë∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç–∞—Ç–æ–º:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "staff_list_menu"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "staff_add_prompt_name"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStaffMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendStaffListMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
// SendStaffListMenu sends the staff category selection menu for viewing.
func (bh *BotHandler) SendStaffListMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffListMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STAFF_LIST)

	msgText := "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(utils.GetRoleDisplayName(constants.ROLE_MAINOPERATOR), fmt.Sprintf("staff_list_by_role_%s", constants.ROLE_MAINOPERATOR)),
			tgbotapi.NewInlineKeyboardButtonData(utils.GetRoleDisplayName(constants.ROLE_OPERATOR), fmt.Sprintf("staff_list_by_role_%s", constants.ROLE_OPERATOR)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(utils.GetRoleDisplayName(constants.ROLE_DRIVER), fmt.Sprintf("staff_list_by_role_%s", constants.ROLE_DRIVER)),
			tgbotapi.NewInlineKeyboardButtonData(utils.GetRoleDisplayName(constants.ROLE_LOADER), fmt.Sprintf("staff_list_by_role_%s", constants.ROLE_LOADER)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf(utils.GetRoleDisplayName(constants.ROLE_USER)), fmt.Sprintf("staff_list_by_role_%s", constants.ROLE_USER)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —à—Ç–∞—Ç–∞", "staff_menu"),
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStaffListMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendStaffList –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª–∏.
// SendStaffList displays a list of staff members by role.
func (bh *BotHandler) SendStaffList(chatID int64, role string, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffList –¥–ª—è chatID %d, —Ä–æ–ª—å: %s, messageIDToEdit: %d", chatID, role, messageIDToEdit)

	staff, err := db.GetStaffListByRole(role) // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏ CardNumber (–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π)
	// This function should now also return CardNumber (decrypted)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
		return
	}

	roleDisplay := utils.GetRoleDisplayName(role)
	msgText := fmt.Sprintf("üìã –°–ø–∏—Å–æ–∫: %s\n", roleDisplay)
	var rows [][]tgbotapi.InlineKeyboardButton

	if len(staff) == 0 {
		msgText += "\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç."
	} else {
		for _, s := range staff {
			displayName := utils.GetUserDisplayName(s) // –ò—Å–ø–æ–ª—å–∑—É–µ–º GetUserDisplayName
			phoneDisplay := "—Ç–µ–ª. –Ω–µ —É–∫–∞–∑–∞–Ω"
			if s.Phone.Valid && s.Phone.String != "" {
				phoneDisplay = utils.FormatPhoneNumber(s.Phone.String)
			}

			buttonText := fmt.Sprintf("%s - %s", displayName, phoneDisplay)
			if len(buttonText) > 60 { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ / Telegram button text length limit
				buttonText = buttonText[:57] + "..."
			}

			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("staff_info_%d", s.ChatID)),
			))
		}
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—Ç–∞—Ç–∞", "staff_list_menu"),
		tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, "")
	if errSend != nil {
		log.Printf("SendStaffList: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendStaffInfo –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏ –æ–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
// SendStaffInfo displays staff member information and management options.
func (bh *BotHandler) SendStaffInfo(chatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffInfo –¥–ª—è chatID %d, —Ü–µ–ª–µ–≤–æ–π chatID: %d, messageIDToEdit: %d", chatID, targetChatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STAFF_INFO)
	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ
	// Clear temporary staff data as we are viewing a specific member
	bh.Deps.SessionManager.ClearTempOrder(chatID)

	targetUser, err := db.GetUserByChatID(targetChatID) // db.GetUserByChatID —Ç–µ–ø–µ—Ä—å –¥–µ—à–∏—Ñ—Ä—É–µ—Ç –∫–∞—Ä—Ç—É / db.GetUserByChatID now decrypts the card
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}

	status := "–ê–∫—Ç–∏–≤–µ–Ω"
	if targetUser.IsBlocked {
		status = fmt.Sprintf("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ü—Ä–∏—á–∏–Ω–∞: %s)", targetUser.BlockReason.String)
	}
	phone := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.Phone.Valid && targetUser.Phone.String != "" {
		phone = utils.FormatPhoneNumber(targetUser.Phone.String)
	}
	nickname := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.Nickname.Valid && targetUser.Nickname.String != "" {
		nickname = targetUser.Nickname.String
	}
	cardNumberDisplay := "–Ω–µ —É–∫–∞–∑–∞–Ω"
	if targetUser.CardNumber.Valid && targetUser.CardNumber.String != "" {
		// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ ` ` –¥–ª—è Markdown
		// Display full card number for copying, wrapped in ` ` for Markdown
		cardNumberDisplay = fmt.Sprintf("`%s` (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)", utils.EscapeTelegramMarkdown(targetUser.CardNumber.String))
	}

	msgText := fmt.Sprintf(
		"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: *%s %s*\n"+
			"–ü–æ–∑—ã–≤–Ω–æ–π: *%s*\n"+
			"Telegram ChatID: `%d`\n"+
			"–¢–µ–ª–µ—Ñ–æ–Ω: *%s*\n"+
			"–ö–∞—Ä—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç: %s\n"+ // –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã / Changed to display card number
			"–†–æ–ª—å: *%s*\n"+
			"–°—Ç–∞—Ç—É—Å: *%s*",
		utils.EscapeTelegramMarkdown(targetUser.FirstName), utils.EscapeTelegramMarkdown(targetUser.LastName),
		utils.EscapeTelegramMarkdown(nickname),
		targetUser.ChatID,
		utils.EscapeTelegramMarkdown(phone),
		cardNumberDisplay, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º EscapeTelegramMarkdown, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±–µ—Ä–Ω—É–ª–∏ –≤ ` ` / Do not use EscapeTelegramMarkdown as it's already wrapped in ` `
		utils.EscapeTelegramMarkdown(utils.GetRoleDisplayName(targetUser.Role)),
		utils.EscapeTelegramMarkdown(status),
	)

	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", fmt.Sprintf("staff_edit_menu_%d", targetChatID)),
	))
	if targetUser.IsBlocked {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("staff_unblock_confirm_%d", targetChatID))))
	} else {
		if targetUser.Role != constants.ROLE_OWNER { // –í–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / Owner cannot be blocked
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("staff_block_reason_prompt_%d", targetChatID))))
		}
	}
	if targetUser.Role != constants.ROLE_OWNER { // –í–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è "—É–¥–∞–ª–∏—Ç—å" (—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ user) / Owner cannot be "deleted" (role changed to user)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å (—Å–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)", fmt.Sprintf("staff_delete_confirm_%d", targetChatID))))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üîô –ö —Å–ø–∏—Å–∫—É (%s)", utils.GetRoleDisplayName(targetUser.Role)), fmt.Sprintf("staff_list_by_role_%s", targetUser.Role)),
		tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendStaffInfo: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendStaffAddPrompt –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
// SendStaffAddPrompt prompts for a field to add a staff member.
func (bh *BotHandler) SendStaffAddPrompt(chatID int64, stateToSet string, promptText string, prevStateCallbackKey string, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffAddPrompt –¥–ª—è chatID %d, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, messageIDToEdit: %d", chatID, stateToSet, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, stateToSet)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
	// Save message ID to use for editing in the next step
	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.CurrentMessageID = messageIDToEdit // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã "–ù–∞–∑–∞–¥" –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / Important for "Back" and editing to work correctly
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" / Determine "Back" button text
	backButtonText := "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	if specificBackText, ok := utils.GetBackText(prevStateCallbackKey); ok {
		backButtonText = specificBackText
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(backButtonText, prevStateCallbackKey),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", "staff_menu"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, promptText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStaffAddPrompt: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d, —Å–æ—Å—Ç–æ—è–Ω–∏–µ %s: %v", chatID, stateToSet, err)
	}
}

// SendStaffEditMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
// SendStaffEditMenu displays the field selection menu for editing a staff member.
func (bh *BotHandler) SendStaffEditMenu(chatID int64, targetChatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffEditMenu –¥–ª—è chatID %d, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ %d, messageIDToEdit: %d", chatID, targetChatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STAFF_EDIT)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º targetChatID –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	// Save targetChatID in session for subsequent editing steps
	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.BlockTargetChatID = targetChatID // –ò—Å–ø–æ–ª—å–∑—É–µ–º BlockTargetChatID –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ / Use BlockTargetChatID to store ID of staff member being edited
	tempData.CurrentMessageID = messageIDToEdit
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	targetUser, err := db.GetUserByChatID(targetChatID)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		return
	}

	msgText := fmt.Sprintf("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: *%s %s*\n(–ü–æ–∑—ã–≤–Ω–æ–π: *%s*, ChatID: `%d`)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
		utils.EscapeTelegramMarkdown(targetUser.FirstName), utils.EscapeTelegramMarkdown(targetUser.LastName),
		utils.EscapeTelegramMarkdown(targetUser.Nickname.String), targetUser.ChatID)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–º—è", fmt.Sprintf("staff_edit_field_name_%d", targetChatID)),
			tgbotapi.NewInlineKeyboardButtonData("–§–∞–º–∏–ª–∏—è", fmt.Sprintf("staff_edit_field_surname_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–∑—ã–≤–Ω–æ–π", fmt.Sprintf("staff_edit_field_nickname_%d", targetChatID)),
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ–ª–µ—Ñ–æ–Ω", fmt.Sprintf("staff_edit_field_phone_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ö–∞—Ä—Ç–∞", fmt.Sprintf("staff_edit_field_card_number_%d", targetChatID)), // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ / New button
			tgbotapi.NewInlineKeyboardButtonData("–†–æ–ª—å", fmt.Sprintf("staff_edit_field_role_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ", fmt.Sprintf("staff_info_%d", targetChatID)),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendStaffEditMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendStaffEditFieldPrompt –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
// SendStaffEditFieldPrompt prompts for a new value for a specific staff member field.
func (bh *BotHandler) SendStaffEditFieldPrompt(chatID int64, targetChatID int64, fieldToEdit string, promptText string, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffEditFieldPrompt –¥–ª—è chatID %d, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ %d, –ø–æ–ª–µ %s, messageIDToEdit: %d", chatID, targetChatID, fieldToEdit, messageIDToEdit)

	var stateToSet string
	switch fieldToEdit {
	case "name":
		stateToSet = constants.STATE_STAFF_EDIT_NAME
	case "surname":
		stateToSet = constants.STATE_STAFF_EDIT_SURNAME
	case "nickname":
		stateToSet = constants.STATE_STAFF_EDIT_NICKNAME
	case "phone":
		stateToSet = constants.STATE_STAFF_EDIT_PHONE
	case "card_number": // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ / New state
		stateToSet = constants.STATE_STAFF_EDIT_CARD_NUMBER
	// "role" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ SendStaffRoleSelectionMenu / "role" is handled via SendStaffRoleSelectionMenu
	default:
		log.Printf("SendStaffEditFieldPrompt: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '%s'", fieldToEdit)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		bh.SendStaffEditMenu(chatID, targetChatID, messageIDToEdit) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ / Return to this staff member's edit menu
		return
	}
	bh.Deps.SessionManager.SetState(chatID, stateToSet)

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ targetChatID –∏ CurrentMessageID —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏
	// Ensure targetChatID and CurrentMessageID are saved in the session
	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.BlockTargetChatID = targetChatID
	tempData.CurrentMessageID = messageIDToEdit
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è", fmt.Sprintf("staff_edit_menu_%d", targetChatID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", fmt.Sprintf("staff_info_%d", targetChatID)),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, promptText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStaffEditFieldPrompt: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendStaffRoleSelectionMenu –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
// SendStaffRoleSelectionMenu offers to select a role for a new or edited staff member.
func (bh *BotHandler) SendStaffRoleSelectionMenu(chatID int64, contextPrefix string, messageIDToEdit int, backCallbackKey string) {
	log.Printf("BotHandler.SendStaffRoleSelectionMenu –¥–ª—è chatID %d, –∫–æ–Ω—Ç–µ–∫—Å—Ç: %s, messageIDToEdit: %d", chatID, contextPrefix, messageIDToEdit)

	var stateToSet string
	if strings.HasPrefix(contextPrefix, "staff_add_role_final") { // staff_add_role_final_TARGETCHATID_ROLE
		stateToSet = constants.STATE_STAFF_ADD_ROLE
	} else if strings.HasPrefix(contextPrefix, "staff_edit_role_final") { // staff_edit_role_final_TARGETCHATID_ROLE
		stateToSet = constants.STATE_STAFF_EDIT_ROLE
	} else {
		log.Printf("SendStaffRoleSelectionMenu: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π contextPrefix: %s", contextPrefix)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.")
		return
	}
	bh.Deps.SessionManager.SetState(chatID, stateToSet)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / Save message ID for editing
	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.CurrentMessageID = messageIDToEdit
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	msgText := "üë∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"

	// –§–æ—Ä–º–∏—Ä—É–µ–º callback –¥–ª—è —Ä–æ–ª–∏, –∏–∑–≤–ª–µ–∫–∞—è targetChatID –∏–∑ contextPrefix –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	// Form callback for role, extracting targetChatID from contextPrefix if editing
	var targetChatIDForCallback string
	if strings.HasPrefix(contextPrefix, "staff_edit_role_final_") {
		parts := strings.Split(contextPrefix, "_") // staff_edit_role_final_TARGETCHATID
		if len(parts) == 5 {                       // 0:staff, 1:edit, 2:role, 3:final, 4:TARGETCHATID
			targetChatIDForCallback = parts[4]
		}
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	roles := []string{
		constants.ROLE_MAINOPERATOR, constants.ROLE_OPERATOR,
		constants.ROLE_DRIVER, constants.ROLE_LOADER, constants.ROLE_USER,
	}

	for _, role := range roles {
		callbackData := ""
		if targetChatIDForCallback != "" { // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ / Editing existing
			callbackData = fmt.Sprintf("staff_edit_role_final_%s_%s", targetChatIDForCallback, role)
		} else { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ / Adding new
			callbackData = fmt.Sprintf("staff_add_role_final_%s", role)
		}
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(utils.GetRoleDisplayName(role), callbackData),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backCallbackKey),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStaffRoleSelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendStaffActionConfirmation –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ).
// SendStaffActionConfirmation confirms an action on a staff member (add, update).
func (bh *BotHandler) SendStaffActionConfirmation(chatID int64, messageText string, messageIDToEdit int, targetChatIDIfAvailable int64) {
	log.Printf("BotHandler.SendStaffActionConfirmation –¥–ª—è chatID %d: %s, messageIDToEdit: %d", chatID, messageText, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STAFF_MENU) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —à—Ç–∞—Ç–∞ / Return to staff menu
	bh.Deps.SessionManager.ClearTempOrder(chatID)                       // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ / Clear temporary data after operation completion

	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìã –ö —Å–ø–∏—Å–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "staff_list_menu"),
	))
	if targetChatIDIfAvailable != 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë§ –ö –∫–∞—Ä—Ç–æ—á–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", fmt.Sprintf("staff_info_%d", targetChatIDIfAvailable)),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", "staff_add_prompt_name"),
		tgbotapi.NewInlineKeyboardButtonData("üîô –í –º–µ–Ω—é —à—Ç–∞—Ç–∞", "staff_menu"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, messageText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStaffActionConfirmation: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendStaffBlockReasonInput –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
// SendStaffBlockReasonInput prompts for the reason for blocking a staff member.
func (bh *BotHandler) SendStaffBlockReasonInput(chatID int64, targetStaffID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffBlockReasonInput –¥–ª—è chatID %d, —Ü–µ–ª—å staffID: %d, messageIDToEdit: %d", chatID, targetStaffID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STAFF_BLOCK_REASON)

	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.BlockTargetChatID = targetStaffID // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ / Save staff ID for blocking
	tempData.CurrentMessageID = messageIDToEdit
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	targetUser, err := db.GetUserByChatID(targetStaffID)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
		return
	}

	msgText := fmt.Sprintf("üö´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *%s %s* (ChatID: `%d`):",
		utils.EscapeTelegramMarkdown(targetUser.FirstName),
		utils.EscapeTelegramMarkdown(targetUser.LastName),
		targetStaffID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ", fmt.Sprintf("staff_info_%d", targetStaffID)),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendStaffBlockReasonInput: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendStaffUnblockConfirm –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
// SendStaffUnblockConfirm prompts for confirmation to unblock a staff member.
func (bh *BotHandler) SendStaffUnblockConfirm(chatID int64, targetStaffID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffUnblockConfirm –¥–ª—è chatID %d, —Ü–µ–ª—å staffID: %d, messageIDToEdit: %d", chatID, targetStaffID, messageIDToEdit)
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / Do not change state, this is a confirmation dialog

	targetUser, err := db.GetUserByChatID(targetStaffID)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}
	if !targetUser.IsBlocked {
		bh.sendInfoMessage(chatID, messageIDToEdit, fmt.Sprintf("‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ %s %s –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", targetUser.FirstName, targetUser.LastName), fmt.Sprintf("staff_info_%d", targetStaffID))
		return
	}

	msgText := fmt.Sprintf("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *%s %s* (ChatID: `%d`)?\n–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: *%s*",
		utils.EscapeTelegramMarkdown(targetUser.FirstName), utils.EscapeTelegramMarkdown(targetUser.LastName),
		targetStaffID, utils.EscapeTelegramMarkdown(targetUser.BlockReason.String))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("staff_unblock_confirm_%d", targetStaffID)), // –ö–æ–ª–ª–±—ç–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è / Callback should be unique for the action
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ", fmt.Sprintf("staff_info_%d", targetStaffID)),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendStaffUnblockConfirm: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}

// SendStaffDeleteConfirm –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "—É–¥–∞–ª–µ–Ω–∏—è" —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞ user).
// SendStaffDeleteConfirm prompts for confirmation to "delete" a staff member (change role to user).
func (bh *BotHandler) SendStaffDeleteConfirm(chatID int64, targetStaffID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStaffDeleteConfirm –¥–ª—è chatID %d, —Ü–µ–ª—å staffID: %d, messageIDToEdit: %d", chatID, targetStaffID, messageIDToEdit)
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º / Do not change state

	targetUser, err := db.GetUserByChatID(targetStaffID)
	if err != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
		return
	}
	if targetUser.Role == constants.ROLE_OWNER {
		bh.sendInfoMessage(chatID, messageIDToEdit, "üö´ –í–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º.", fmt.Sprintf("staff_info_%d", targetStaffID))
		return
	}
	if targetUser.Role == constants.ROLE_USER {
		bh.sendInfoMessage(chatID, messageIDToEdit, fmt.Sprintf("‚ÑπÔ∏è %s %s —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", targetUser.FirstName, targetUser.LastName), fmt.Sprintf("staff_info_%d", targetStaffID))
		return
	}

	msgText := fmt.Sprintf("üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ *%s %s* (ChatID: `%d`)?\n–ï–≥–æ —Ä–æ–ª—å –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '%s'. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏.",
		utils.EscapeTelegramMarkdown(targetUser.FirstName), utils.EscapeTelegramMarkdown(targetUser.LastName),
		targetStaffID, utils.GetRoleDisplayName(constants.ROLE_USER))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å (—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å)", fmt.Sprintf("staff_delete_confirm_%d", targetStaffID)), // –ö–æ–ª–ª–±—ç–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º / Callback should be unique
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ", fmt.Sprintf("staff_info_%d", targetStaffID)),
		),
	)
	_, errSend := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if errSend != nil {
		log.Printf("SendStaffDeleteConfirm: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, errSend)
	}
}
