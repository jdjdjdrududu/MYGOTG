package handlers

import (
	"Original/internal/formatters"
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"

	"Original/internal/constants" //
	"Original/internal/db"
	"Original/internal/models"
	"Original/internal/session" //
	"Original/internal/utils"   //
)

// --- –ú–µ–Ω—é –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---

// SendCategoryMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendCategoryMenu(chatID int64, userFirstName string, messageIDToEdit int) {
	log.Printf("BotHandler.SendCategoryMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	user, _ := bh.getUserFromDB(chatID) // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å

	// –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
	isOperatorInitiating := utils.IsOperatorOrHigher(user.Role) && tempOrder.ID == 0 && tempOrder.OrderAction != "operator_creating_order"
	if isOperatorInitiating && bh.Deps.SessionManager.GetState(chatID) == constants.STATE_OP_CREATE_ORDER_FLOW {
		// –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑" –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
		// –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –º—ã –¥–æ–ª–∂–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ OrderAction —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		// –ï—Å–ª–∏ –º—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ –∏–∑ mainMenu –ø–æ –∫–Ω–æ–ø–∫–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑" (–æ–ø–µ—Ä–∞—Ç–æ—Ä), —Ç–æ OrderAction –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
		// –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–∫–∞–∑ –¥–ª—è —Å–µ–±—è –∫–∞–∫ User
	}

	if tempOrder.ID == 0 && tempOrder.OrderAction != "operator_creating_order" { // ID –∏–∑ –ë–î –µ—â–µ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –ò —ç—Ç–æ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
		userChatIDForOrder := tempOrder.UserChatID
		if userChatIDForOrder == 0 {
			userChatIDForOrder = chatID
		}
		tempOrder = session.NewTempOrder(userChatIDForOrder)
	} else if tempOrder.ID == 0 && tempOrder.OrderAction == "operator_creating_order" {
		// –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑, UserChatID –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ –∏–ª–∏ –±—É–¥–µ—Ç ID —Å–∞–º–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è
		// –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ chatID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
		if tempOrder.UserChatID == 0 {
			tempOrder.UserChatID = chatID
		}
	}
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_CATEGORY)

	msgText := fmt.Sprintf("üëá –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s! –ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã–±–µ—Ä–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?\n\n"+
		"–ú—ã –ø–æ–º–æ–∂–µ–º –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à—É –∑–∞–¥–∞—á—É! ‚ú®\n", utils.EscapeTelegramMarkdown(userFirstName))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s %s", constants.CategoryEmojiMap[constants.CAT_WASTE], constants.CategoryDisplayMap[constants.CAT_WASTE]), "category_waste"),
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s %s", constants.CategoryEmojiMap[constants.CAT_DEMOLITION], constants.CategoryDisplayMap[constants.CAT_DEMOLITION]), "category_demolition"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s %s (—Å–∫–æ—Ä–æ + –±–æ–Ω—É—Å!)", constants.CategoryEmojiMap[constants.CAT_MATERIALS], constants.CategoryDisplayMap[constants.CAT_MATERIALS]), "materials_soon"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
		),
	)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendCategoryMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendSubcategoryMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
func (bh *BotHandler) SendSubcategoryMenu(chatID int64, category string, messageIDToEdit int) {
	log.Printf("BotHandler.SendSubcategoryMenu –¥–ª—è chatID %d, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: %s, messageIDToEdit: %d", chatID, category, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_SUBCATEGORY)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.Category = category
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	var msgText string
	var keyboard tgbotapi.InlineKeyboardMarkup
	currentCategoryDisplay := constants.CategoryDisplayMap[category]
	if currentCategoryDisplay == "" {
		currentCategoryDisplay = category // Fallback
	}

	backButtonRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º", "back_to_category"),
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
	)

	switch category {
	case constants.CAT_WASTE:
		msgText = fmt.Sprintf("–í—ã–±—Ä–∞–Ω–æ: *%s*. ‚ôªÔ∏è –£—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞:\n\n"+
			"üí° –¢–æ—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç!", utils.EscapeTelegramMarkdown(currentCategoryDisplay))
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["construct"], "subcategory_construct"),
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["household"], "subcategory_household"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["metal"], "subcategory_metal"),
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["junk"], "subcategory_junk"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["greenery"], "subcategory_greenery"),
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["tires"], "subcategory_tires"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.WasteSubcategoryMap["other_waste"], "subcategory_other_waste"),
			),
			backButtonRow,
		)
	case constants.CAT_DEMOLITION:
		msgText = fmt.Sprintf("–í—ã–±—Ä–∞–Ω–æ: *%s*. üõ†Ô∏è –ö–∞–∫–æ–π –≤–∏–¥ –¥–µ–º–æ–Ω—Ç–∞–∂–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è?\n\n"+
			"üí° –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏!", utils.EscapeTelegramMarkdown(currentCategoryDisplay))
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["walls"], "subcategory_walls"),
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["partitions"], "subcategory_partitions"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["floors"], "subcategory_floors"),
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["ceilings"], "subcategory_ceilings"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["plumbing"], "subcategory_plumbing"),
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["tiles"], "subcategory_tiles"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(constants.DemolitionSubcategoryMap["other_demo"], "subcategory_other_demo"),
			),
			backButtonRow,
		)
	default:
		log.Printf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è '%s' –¥–ª—è chatID %d –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è.", category, chatID)
		tempOrder.Subcategory = "default_for_" + category
		bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
		bh.SendDescriptionInputMenu(chatID, messageIDToEdit)
		return
	}

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendSubcategoryMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendDescriptionInputMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendDescriptionInputMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendDescriptionInputMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_DESCRIPTION)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.CurrentMessageID = messageIDToEdit // –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è sendOrEditMessageHelper
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := false
	if len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT && tempOrder.ID != 0 {
		isEditingOrder = true
	}

	backButtonCallbackData := "back_to_subcategory"
	if isEditingOrder {
		backButtonCallbackData = "back_to_edit_menu_direct"
	} else if tempOrder.Category == constants.CAT_MATERIALS || tempOrder.Category == constants.CAT_OTHER {
		// –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, "–ù–∞–∑–∞–¥" –≤–µ–¥–µ—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
		backButtonCallbackData = "back_to_category"
	}

	msgText := "üìù –û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–º, —ç—Ç–∞–∂, –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ñ—Ç–∞, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è).\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Ç–æ—á–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."

	var rows [][]tgbotapi.InlineKeyboardButton
	if tempOrder.Description != "" { // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "confirm_order_description_placeholder"),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "skip_order_description_placeholder"),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendDescriptionInputMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendNameInputMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞.
func (bh *BotHandler) SendNameInputMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendNameInputMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)

	currentUser, ok := bh.getUserFromDB(chatID)
	if !ok {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
		return
	}

	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_NAME)
	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.CurrentMessageID = messageIDToEdit
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	var promptText string
	var keyboard tgbotapi.InlineKeyboardMarkup

	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT && tempOrder.ID != 0

	backButtonCallbackData := "back_to_description"
	if isEditingOrder {
		backButtonCallbackData = "back_to_edit_menu_direct"
	}

	mainMenuButtonCallbackData := "back_to_main_confirm_cancel_order"

	isOperatorCreating := tempOrder.OrderAction == "operator_creating_order"
	isDriverCreating := tempOrder.OrderAction == "driver_creating_order" // –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ

	// –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
	if isOperatorCreating || isDriverCreating {
		if tempOrder.Name != "" { // –ò–º—è —É–∂–µ –≤–≤–µ–¥–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥)
			promptText = fmt.Sprintf("üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞: *%s*. \n–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.", utils.EscapeTelegramMarkdown(tempOrder.Name))
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å "+utils.EscapeTelegramMarkdown(tempOrder.Name), "confirm_order_name"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		} else { // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.
			promptText = "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:"
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		}
	} else { // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª–∏–µ–Ω—Ç–∞)
		userForOrderNameSuggestion := currentUser
		if tempOrder.Name != "" { // –ö–ª–∏–µ–Ω—Ç —É–∂–µ –≤–≤–µ–ª –∏–º—è –∏ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —ç—Ç–æ—Ç —à–∞–≥.
			promptText = fmt.Sprintf("üë§ –ò–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞: *%s*. \n–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.", utils.EscapeTelegramMarkdown(tempOrder.Name))
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å "+utils.EscapeTelegramMarkdown(tempOrder.Name), "confirm_order_name"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		} else if userForOrderNameSuggestion.FirstName != "" && !isEditingOrder { // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
			promptText = fmt.Sprintf("üë§ –ë—É–¥–µ–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∏–º—è *%s*? \n–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É. –ï—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.", utils.EscapeTelegramMarkdown(userForOrderNameSuggestion.FirstName))
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚úÖ –î–∞, –Ω–∞ %s", utils.EscapeTelegramMarkdown(userForOrderNameSuggestion.FirstName)), "use_profile_name_for_order"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		} else { // –ü—Ä–æ—Å–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤–≤–µ—Å—Ç–∏ –∏–º—è, –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ–Ω–æ –ø—É—Å—Ç–æ–µ
			promptText = "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ):"
			keyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		}
	}

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, promptText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendNameInputMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendDateSelectionMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
func (bh *BotHandler) SendDateSelectionMenu(chatID int64, messageIDToEdit int, page int) {
	log.Printf("BotHandler.SendDateSelectionMenu –¥–ª—è chatID %d, messageIDToEdit: %d, page: %d", chatID, messageIDToEdit, page)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_DATE)

	now := time.Now()
	var startDate time.Time
	daysToShow := 7
	if page == 0 {
		startDate = now
	} else {
		startDate = now.AddDate(0, 0, page*daysToShow)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := false
	if len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT && tempOrder.ID != 0 {
		isEditingOrder = true
	}

	if page == 0 && !isEditingOrder { // –ö–Ω–æ–ø–∫–∞ "–°—Ä–æ—á–Ω–æ" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùó –°—Ä–æ—á–Ω–æ (–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è) ‚ùó", "select_date_asap"),
		))
	}

	weekdayMap := map[time.Weekday]string{time.Monday: "–ü–Ω", time.Tuesday: "–í—Ç", time.Wednesday: "–°—Ä", time.Thursday: "–ß—Ç", time.Friday: "–ü—Ç", time.Saturday: "–°–±", time.Sunday: "–í—Å"}
	monthMapShort := map[time.Month]string{time.January: "–Ø–Ω–≤", time.February: "–§–µ–≤", time.March: "–ú–∞—Ä", time.April: "–ê–ø—Ä", time.May: "–ú–∞—è", time.June: "–ò—é–Ω", time.July: "–ò—é–ª", time.August: "–ê–≤–≥", time.September: "–°–µ–Ω", time.October: "–û–∫—Ç", time.November: "–ù–æ—è", time.December: "–î–µ–∫"}

	var dateButtons []tgbotapi.InlineKeyboardButton
	daysAdded := 0
	for i := 0; daysAdded < daysToShow; i++ {
		date := startDate.AddDate(0, 0, i)
		if date.Before(now.Truncate(24*time.Hour)) && !isEditingOrder { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
			continue
		}
		dayStr := fmt.Sprintf("%s, %d %s", weekdayMap[date.Weekday()], date.Day(), monthMapShort[date.Month()])
		emoji := "üü¢"
		if date.Weekday() == time.Saturday || date.Weekday() == time.Sunday {
			emoji = "‚≠ïÔ∏è"
		}
		callbackData := fmt.Sprintf("select_date_%02d_%s_%d", date.Day(), date.Month().String(), date.Year())
		dateButtons = append(dateButtons, tgbotapi.NewInlineKeyboardButtonData(emoji+" "+dayStr, callbackData))
		daysAdded++

		if len(dateButtons) == 2 || (daysAdded == daysToShow && len(dateButtons) > 0) {
			rows = append(rows, dateButtons)
			dateButtons = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(dateButtons) > 0 {
		rows = append(rows, dateButtons)
	}

	// –†—è–¥ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
	navRow := []tgbotapi.InlineKeyboardButton{}
	if page > 0 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è", fmt.Sprintf("date_page_%d", page-1)))
	}
	if page < 51 { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ ~1 –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ‚û°Ô∏è", fmt.Sprintf("date_page_%d", page+1)))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
	backCallback := "back_to_name"
	if isEditingOrder {
		backCallback = "back_to_edit_menu_direct"
	}

	// –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backCallback),
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msgText := "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞:\n\n" +
		"üöõ –ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏! üòé"

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendDateSelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendTimeSelectionMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
func (bh *BotHandler) SendTimeSelectionMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendTimeSelectionMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_TIME)

	var rows [][]tgbotapi.InlineKeyboardButton
	timeSlots := []string{}
	// –ò–∑–º–µ–Ω—è–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –æ–Ω –≤–∫–ª—é—á–∞–ª 17:00, –Ω–æ –Ω–µ 18:00
	for hour := 9; hour <= 17; hour++ {
		timeSlots = append(timeSlots, fmt.Sprintf("%02d:00", hour))
	}

	var timeButtons []tgbotapi.InlineKeyboardButton
	for i, hourSlot := range timeSlots {
		hourStr := strings.Split(hourSlot, ":")[0]
		callbackData := fmt.Sprintf("%s_%s", constants.CALLBACK_PREFIX_SELECT_HOUR, hourStr)
		timeButtons = append(timeButtons, tgbotapi.NewInlineKeyboardButtonData(hourSlot, callbackData))
		if (i+1)%3 == 0 || i == len(timeSlots)-1 {
			rows = append(rows, timeButtons)
			timeButtons = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(timeButtons) > 0 {
		rows = append(rows, timeButtons)
	}

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := false
	if len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT {
		isEditingOrder = true
	}
	backButtonCallbackData := "back_to_date"
	if isEditingOrder {
		backButtonCallbackData = "back_to_edit_menu_direct"
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msgText := "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π *—á–∞—Å* –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):\n\n" +
		"üöõ –ú—ã –ø—Ä–∏–µ–¥–µ–º —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫ üòé"

	tempOrder.SelectedHourForMinuteView = -1
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendTimeSelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendMinuteSelectionMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Å–∞.
func (bh *BotHandler) SendMinuteSelectionMenu(chatID int64, selectedHour int, messageIDToEdit int) {
	log.Printf("BotHandler.SendMinuteSelectionMenu –¥–ª—è chatID %d, —á–∞—Å: %d, messageIDToEdit: %d", chatID, selectedHour, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_MINUTE_SELECTION)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.SelectedHourForMinuteView = selectedHour
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	var rows [][]tgbotapi.InlineKeyboardButton
	minuteSlots := []int{0, 15, 30, 45}

	var minuteButtons []tgbotapi.InlineKeyboardButton
	for _, minute := range minuteSlots {
		timeStr := fmt.Sprintf("%02d:%02d", selectedHour, minute)
		callbackData := fmt.Sprintf("select_time_%s", timeStr)
		minuteButtons = append(minuteButtons, tgbotapi.NewInlineKeyboardButtonData(timeStr, callbackData))
	}
	rows = append(rows, minuteButtons)

	backButtonCallbackData := "back_to_time" // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–∞

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–∞", backButtonCallbackData),
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msgText := fmt.Sprintf("‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å: *%02d:xx*. –£—Ç–æ—á–Ω–∏—Ç–µ –º–∏–Ω—É—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, %02d:10):\n\n"+
		"üöõ –ú—ã –ø—Ä–∏–µ–¥–µ–º —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫ üòé", selectedHour, selectedHour)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendMinuteSelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendPhoneInputMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
func (bh *BotHandler) SendPhoneInputMenu(chatID int64, user models.User, messageIDToEdit int) {
	log.Printf("BotHandler.SendPhoneInputMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_PHONE)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	isOperatorCreating := tempOrder.OrderAction == "operator_creating_order"
	isDriverCreating := tempOrder.OrderAction == "driver_creating_order" // –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ

	// –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –Ω–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑
	if !isOperatorCreating && !isDriverCreating && tempOrder.UserChatID == chatID && user.Phone.Valid && tempOrder.Phone == "" {
		tempOrder.Phone = user.Phone.String
		bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
	}

	var msgText string
	var inlineKeyboard tgbotapi.InlineKeyboardMarkup
	var replyKeyboard tgbotapi.ReplyKeyboardMarkup // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è

	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT && tempOrder.ID != 0
	backButtonCallbackData := "back_to_time"
	if isEditingOrder {
		backButtonCallbackData = "back_to_edit_menu_direct"
	}
	mainMenuButtonCallbackData := "back_to_main_confirm_cancel_order"

	// –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
	if isOperatorCreating || isDriverCreating {
		currentOrderPhone := tempOrder.Phone
		if currentOrderPhone != "" { // –¢–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –≤–≤–µ–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
			formattedPhoneForDisplay := utils.FormatPhoneNumber(currentOrderPhone)
			msgText = fmt.Sprintf(
				"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞: *%s*.\n\n"+
					"–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä? –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–º.",
				utils.EscapeTelegramMarkdown(formattedPhoneForDisplay))
			inlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚úÖ –î–∞, %s", formattedPhoneForDisplay), "confirm_order_phone"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", "change_order_phone"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		} else { // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, –≤—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
			msgText = "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.\n\n" +
				"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567)."
			inlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
			// ReplyKeyboard –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
		}
	} else {
		// --- –ü–æ—Ç–æ–∫ –¥–ª—è –ö–ª–∏–µ–Ω—Ç–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
		phoneForSuggestion := ""
		if user.Phone.Valid {
			phoneForSuggestion = user.Phone.String
		}
		currentOrderPhone := tempOrder.Phone

		if currentOrderPhone != "" {
			formattedPhoneForDisplay := utils.FormatPhoneNumber(currentOrderPhone)
			msgText = fmt.Sprintf(
				"üì± –î–ª—è –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–æ–º–µ—Ä: *%s*.\n\n"+
					"–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä? –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä‚úèÔ∏è",
				utils.EscapeTelegramMarkdown(formattedPhoneForDisplay))
			inlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚úÖ –î–∞, %s", formattedPhoneForDisplay), "confirm_order_phone"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", "change_order_phone"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
		} else if phoneForSuggestion != "" && !isEditingOrder {
			formattedPhoneForDisplay := utils.FormatPhoneNumber(phoneForSuggestion)
			msgText = fmt.Sprintf("üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä *%s* –¥–ª—è –∑–∞–∫–∞–∑–∞? \n–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É. –ï—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", utils.EscapeTelegramMarkdown(formattedPhoneForDisplay))
			inlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚úÖ –î–∞, %s", formattedPhoneForDisplay), "confirm_order_phone"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", "change_order_phone"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
			tempOrder.Phone = phoneForSuggestion
			bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
			replyKeyboard = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButtonContact(fmt.Sprintf("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º –Ω–æ–º–µ—Ä–æ–º (%s)", utils.GetUserDisplayName(user))),
				),
			)
			replyKeyboard.OneTimeKeyboard = true
			replyKeyboard.ResizeKeyboard = true
		} else {
			msgText = "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n" +
				"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567) –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–∑ Telegram.\n\n" +
				"üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞."
			inlineKeyboard = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallbackData),
					tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", mainMenuButtonCallbackData),
				),
			)
			replyKeyboard = tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButtonContact(fmt.Sprintf("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º –Ω–æ–º–µ—Ä–æ–º (%s)", utils.GetUserDisplayName(user))),
				),
			)
			replyKeyboard.OneTimeKeyboard = true
			replyKeyboard.ResizeKeyboard = true
		}
	}

	sentInlineMsg, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &inlineKeyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendPhoneInputMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
		return
	}

	// –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–≤–æ–¥–∏—Ç–µ–ª—è replyKeyboard.Keyboard –±—É–¥–µ—Ç nil
	if replyKeyboard.Keyboard != nil {
		tempOrderForClean := bh.Deps.SessionManager.GetTempOrder(chatID)
		if tempOrderForClean.LocationPromptMessageID != 0 {
			bh.deleteMessageHelper(chatID, tempOrderForClean.LocationPromptMessageID)
			updatedTempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
			updatedTempOrder.LocationPromptMessageID = 0
			bh.Deps.SessionManager.UpdateTempOrder(chatID, updatedTempOrder)
		} else {
			replyMarkupRemove := tgbotapi.NewRemoveKeyboard(true)
			msgToRemoveActiveKb := tgbotapi.NewMessage(chatID, constants.InvisibleMessage)
			msgToRemoveActiveKb.ReplyMarkup = replyMarkupRemove
			if sentInvisible, errSendInvisible := bh.Deps.BotClient.Send(msgToRemoveActiveKb); errSendInvisible == nil {
				go func(id int) {
					time.Sleep(1000 * time.Millisecond)
					bh.deleteMessageHelper(chatID, id)
				}(sentInvisible.MessageID)
			} else {
				log.Printf("SendPhoneInputMenu: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π ReplyKeyboard: %v", errSendInvisible)
			}
			time.Sleep(300 * time.Millisecond)
		}

		tempMsgConfig := tgbotapi.NewMessage(chatID, "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá")
		tempMsgConfig.ReplyMarkup = replyKeyboard

		sentReplyKbMsg, errKb := bh.Deps.BotClient.Send(tempMsgConfig)
		if errKb != nil {
			log.Printf("SendPhoneInputMenu: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ReplyKeyboard –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ chatID %d: %v", chatID, errKb)
		} else {
			orderDataSess := bh.Deps.SessionManager.GetTempOrder(chatID)
			if orderDataSess.CurrentMessageID != sentInlineMsg.MessageID && sentInlineMsg.MessageID != 0 {
				orderDataSess.CurrentMessageID = sentInlineMsg.MessageID
			}
			orderDataSess.LocationPromptMessageID = sentReplyKbMsg.MessageID
			bh.Deps.SessionManager.UpdateTempOrder(chatID, orderDataSess)
		}
	}
}

// SendAddressInputMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞.
func (bh *BotHandler) SendAddressInputMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendAddressInputMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_ADDRESS)

	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	// –û—á–∏—Å—Ç–∫–∞ ReplyKeyboard –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)
	if tempData.LocationPromptMessageID != 0 {
		bh.deleteMessageHelper(chatID, tempData.LocationPromptMessageID)
		tempData.LocationPromptMessageID = 0
		bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)
	} else { // –ï—Å–ª–∏ LocationPromptMessageID –±—ã–ª 0, –≤–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
		replyMarkupRemove := tgbotapi.NewRemoveKeyboard(true)
		msgToRemoveKb := tgbotapi.NewMessage(chatID, constants.InvisibleMessage)
		msgToRemoveKb.ReplyMarkup = replyMarkupRemove
		if sentKbRemovalMsg, err := bh.Deps.BotClient.Send(msgToRemoveKb); err == nil {
			go func(id int) { time.Sleep(200 * time.Millisecond); bh.deleteMessageHelper(chatID, id) }(sentKbRemovalMsg.MessageID)
		}
	}

	tempData.CurrentMessageID = messageIDToEdit // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è sendOrEditMessageHelper
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := false
	if len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT {
		isEditingOrder = true
	}
	backButtonCallback := "back_to_phone"
	if isEditingOrder {
		backButtonCallback = "back_to_edit_menu_direct"
	}

	msgText := "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º\n\n" +
		"üí° –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≥–µ–æ–º–µ—Ç–∫—É (üìé) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "send_location_prompt"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallback),
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
		),
	)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendAddressInputMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendLocationPrompt –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å ReplyKeyboard.
func (bh *BotHandler) SendLocationPrompt(chatID int64, originalAddressMenuMessageID int) {
	log.Printf("BotHandler.SendLocationPrompt –¥–ª—è chatID %d, originalAddressMenuMessageID: %d", chatID, originalAddressMenuMessageID)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_ADDRESS_LOCATION)

	msgText := "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n\n" +
		"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!"

	replyKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonLocation("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),
		),
	)
	replyKeyboard.OneTimeKeyboard = true
	replyKeyboard.ResizeKeyboard = true

	promptMsgConfig := tgbotapi.NewMessage(chatID, msgText)
	promptMsgConfig.ReplyMarkup = replyKeyboard

	sentPromptMsg, err := bh.Deps.BotClient.Send(promptMsgConfig)
	if err != nil {
		log.Printf("SendLocationPrompt: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è chatID %d: %v", chatID, err)
		bh.sendErrorMessageHelper(chatID, originalAddressMenuMessageID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_ADDRESS)
		bh.SendAddressInputMenu(chatID, originalAddressMenuMessageID)
		return
	}

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.LocationPromptMessageID = sentPromptMsg.MessageID
	tempOrder.CurrentMessageID = originalAddressMenuMessageID
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–æ–º–ø—Ç –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (ID: %d) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chatID %d. CurrentMessageID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–ª–µ–¥. —à–∞–≥–∞: %d", sentPromptMsg.MessageID, chatID, originalAddressMenuMessageID)
}

// SendPhotoInputMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.
func (bh *BotHandler) SendPhotoInputMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendPhotoInputMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_PHOTO)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	photoCount := len(tempOrder.Photos)
	videoCount := len(tempOrder.Videos)

	msgTextFormat := "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n" +
		"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Ç–æ—á–Ω–µ–µ –æ—Ü–µ–Ω–∏—Ç—å –æ–±—ä–µ–º —Ä–∞–±–æ—Ç."
	msgText := fmt.Sprintf(msgTextFormat)

	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := false
	if len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT {
		isEditingOrder = true
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	if photoCount > 0 || videoCount > 0 {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üëç –ì–æ—Ç–æ–≤–æ (%d —Ñ–æ—Ç–æ, %d –≤–∏–¥–µ–æ)", photoCount, videoCount), "finish_photo_upload"),
		))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞", "view_uploaded_media"),
		))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üóë –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë –º–µ–¥–∏–∞", "reset_photo_upload"),
		))
	} else {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥", "skip_photo_initial"),
		))
	}

	backCallback := "back_to_address"
	if isEditingOrder {
		backCallback = "back_to_edit_menu_direct"
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backCallback),
		tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
	))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendPhotoInputMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendPaymentSelectionMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
func (bh *BotHandler) SendPaymentSelectionMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendPaymentSelectionMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_PAYMENT)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	history := bh.Deps.SessionManager.GetHistory(chatID)
	isEditingOrder := false
	if len(history) >= 2 && history[len(history)-2] == constants.STATE_ORDER_EDIT {
		isEditingOrder = true
	}

	backButtonCallback := "back_to_photo"
	if len(history) >= 2 {
		prevState := history[len(history)-2]
		if prevState == constants.STATE_ORDER_ADDRESS || prevState == constants.STATE_ORDER_ADDRESS_LOCATION {
			if len(tempOrder.Photos) == 0 && len(tempOrder.Videos) == 0 {
				backButtonCallback = "back_to_address"
			}
		}
	}
	if isEditingOrder {
		backButtonCallback = "back_to_edit_menu_direct"
	}

	msgText := "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—Ä–∞–∑—É ‚Äî —Å–∫–∏–¥–∫–∞ 5%"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—Ä–∞–∑—É (—Å–∫–∏–¥–∫–∞ 5%)", "payment_now")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üíµ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é", "payment_later")),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backButtonCallback),
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendPaymentSelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendOrderConfirmationMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendOrderConfirmationMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendOrderConfirmationMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	viewingUser, ok := bh.getUserFromDB(chatID)
	if !ok {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	isOperatorCreatingFlow := tempOrder.OrderAction == "operator_creating_order" && utils.IsOperatorOrHigher(viewingUser.Role)
	isDriverCreatingFlow := tempOrder.OrderAction == "driver_creating_order" && viewingUser.Role == constants.ROLE_DRIVER // –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ

	var orderID int64 = tempOrder.ID
	var orderStatus string = constants.STATUS_DRAFT
	actualClientChatID := tempOrder.UserChatID

	if tempOrder.ID == 0 { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (—á–µ—Ä–Ω–æ–≤–∏–∫ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ –ë–î)
		// –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å, —Ç–æ UserChatID –∏ UserID –≤ —Ç–∞–±–ª–∏—Ü–µ orders –±—É–¥—É—Ç NULL,
		// —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –∑–Ω–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞.
		if isDriverCreatingFlow {
			tempOrder.UserChatID = 0 // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
		} else if actualClientChatID == 0 {
			actualClientChatID = chatID
			tempOrder.UserChatID = chatID
		}

		newOrderID, errCreate := db.CreateInitialOrder(tempOrder.Order)
		if errCreate != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è chatID %d (–∫–ª–∏–µ–Ω—Ç: %d): %v", chatID, actualClientChatID, errCreate)
			bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
			bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_PAYMENT)
			bh.SendPaymentSelectionMenu(chatID, messageIDToEdit)
			return
		}
		tempOrder.ID = newOrderID
		orderID = newOrderID
		bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
		log.Printf("–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–∫–∞–∑–∞ #%d —Å–æ–∑–¥–∞–Ω. ClientChatID –≤ –∑–∞–∫–∞–∑–µ: %d. –¢–µ–∫—É—â–∏–π chatID: %d", orderID, actualClientChatID, chatID)
	} else { // –ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
		statusFromDB, clientChatIDFromDB, errDb := db.GetOrderStatusAndClientChatID(tempOrder.ID)
		if errDb != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞/–∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ #%d: %v", tempOrder.ID, errDb)
			bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
			bh.SendMainMenu(chatID, viewingUser, 0)
			return
		}
		orderStatus = statusFromDB
		actualClientChatID = clientChatIDFromDB
		tempOrder.UserChatID = actualClientChatID
		bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)
	}

	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	var msgText string

	if isOperatorCreatingFlow || isDriverCreatingFlow {
		bh.Deps.SessionManager.SetState(chatID, constants.STATE_OP_ORDER_CONFIRMATION_OPTIONS)

		var client models.User
		if actualClientChatID != 0 {
			client, _ = db.GetUserByChatID(actualClientChatID)
		} else {
			// –î–ª—è –∑–∞–∫–∞–∑–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–º, —Å–æ–∑–¥–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ" –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
			client = models.User{
				FirstName: tempOrder.Name,
				Phone:     sql.NullString{String: tempOrder.Phone, Valid: true},
				ChatID:    0, // –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç ChatID –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
			}
		}

		execs, _ := db.GetExecutorsByOrderID(int(orderID))
		title := fmt.Sprintf("‚ú® *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ó–∞–∫–∞–∑–∞ ‚Ññ%d*", orderID)
		footer := "‚öôÔ∏è *–û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞:*"
		msgText = formatters.FormatOrderDetailsForOperator(tempOrder.Order, client, execs, title, footer)

		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_CONFIRM_ORDER_SET_COST, orderID)),
		))
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_SKIP_COST, orderID)),
		))
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ë–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_CONFIRM_ORDER_SIMPLE_CREATE, orderID)),
		))
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit_order_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main_confirm_cancel_order"),
		))
	} else { // –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ–π –∑–∞–∫–∞–∑
		bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_CONFIRM)
		msgText = formatters.FormatOrderConfirmationForUser(tempOrder.Order)

		var confirmButtonText, confirmCallbackData string
		if orderStatus == constants.STATUS_DRAFT {
			confirmButtonText = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
			confirmCallbackData = fmt.Sprintf("confirm_order_final_%d", orderID)
		} else { // AWAITING_CONFIRMATION –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
			confirmButtonText = "üëç –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º"
			confirmCallbackData = "my_orders_page_0"
		}
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(confirmButtonText, confirmCallbackData),
		))
		if orderStatus == constants.STATUS_DRAFT {
			keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–π –∑–∞–∫–∞–∑", fmt.Sprintf("edit_order_%d", orderID))))
			keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("cancel_order_confirm_%d", orderID))))
		}
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendOrderConfirmationMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendOpOrderFinalConfirmMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendOpOrderFinalConfirmMenu(chatID int64, orderID int64, messageIDToEdit int) {
	log.Printf("SendOpOrderFinalConfirmMenu: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑ #%d", chatID, orderID)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OP_ORDER_FINAL_CONFIRM)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)

	var client models.User
	if tempOrder.UserChatID != 0 {
		client, _ = db.GetUserByChatID(tempOrder.UserChatID)
	} else {
		// –î–ª—è –∑–∞–∫–∞–∑–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–º, UserChatID –º–æ–∂–µ—Ç –±—ã—Ç—å 0
		client = models.User{
			FirstName: tempOrder.Name,
			Phone:     sql.NullString{String: tempOrder.Phone, Valid: true},
		}
	}

	assignedExecutors, _ := db.GetExecutorsByOrderID(int(orderID))

	title := fmt.Sprintf("‚ú® *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ó–∞–∫–∞–∑–∞ ‚Ññ%d*", orderID)
	footer := "–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í —Ä–∞–±–æ—Ç–µ'."
	msgText := formatters.FormatOrderDetailsForOperator(tempOrder.Order, client, assignedExecutors, title, footer)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å", fmt.Sprintf("confirm_order_final_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_CONFIRM_ORDER_ASSIGN_EXEC, orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", "back_to_main_confirm_cancel_order"),
		),
	)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendOpOrderFinalConfirmMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendEditOrderMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendEditOrderMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendEditOrderMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_ORDER_EDIT)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	if tempOrder.ID == 0 {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		user, ok := bh.getUserFromDB(chatID)
		if ok {
			bh.SendMainMenu(chatID, user, 0)
		}
		return
	}
	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	orderFromDB, errDB := db.GetOrderByID(int(tempOrder.ID))
	if errDB != nil {
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		return
	}
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤ —Å–µ—Å—Å–∏–∏
	currentMsgIDFromSession := tempOrder.CurrentMessageID
	if messageIDToEdit != 0 && messageIDToEdit != currentMsgIDFromSession {
		currentMsgIDFromSession = messageIDToEdit
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î, —Å–æ—Ö—Ä–∞–Ω—è—è CurrentMessageID
	tempOrder.Order = orderFromDB
	tempOrder.CurrentMessageID = currentMsgIDFromSession // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

	// –ï—Å–ª–∏ CurrentMessageID –æ–±–Ω–æ–≤–∏–ª—Å—è –∏–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª –≤ MediaMessageIDs, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ.
	// –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã sendOrEditMessageHelper –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–∞–∫ —Å "–≥–ª–∞–≤–Ω—ã–º".
	if tempOrder.CurrentMessageID != 0 {
		found := false
		for _, id := range tempOrder.MediaMessageIDs {
			if id == tempOrder.CurrentMessageID {
				found = true
				break
			}
		}
		if !found {
			// –ï—Å–ª–∏ CurrentMessageID (–Ω–æ–≤–æ–µ/—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é) –Ω–µ –±—ã–ª–æ —Å—Ä–µ–¥–∏ MediaMessageIDs,
			// —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–æ–≤–æ–µ –º–µ–Ω—é. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ–¥–∏–∞ ID –∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ.
			tempOrder.MediaMessageIDs = []int{tempOrder.CurrentMessageID}
			tempOrder.MediaMessageIDsMap = make(map[string]bool)
			tempOrder.MediaMessageIDsMap[fmt.Sprintf("%d", tempOrder.CurrentMessageID)] = true
		}
	}
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	timeStr := tempOrder.Time
	if timeStr == "" {
		timeStr = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
	}
	paymentStr := "–ü–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"
	if tempOrder.Payment == "now" {
		paymentStr = "–°—Ä–∞–∑—É (—Å–∫–∏–¥–∫–∞ 5%)"
	}
	formattedDate, _ := utils.FormatDateForDisplay(tempOrder.Date)
	formattedPhone := utils.FormatPhoneNumber(tempOrder.Phone)
	displaySubcategory := utils.GetDisplaySubcategory(tempOrder.Order)

	lines := []string{
		fmt.Sprintf("üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: %s", displaySubcategory),
		fmt.Sprintf("üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s", utils.EscapeTelegramMarkdown(tempOrder.Description)),
		fmt.Sprintf("üë§ –ò–º—è: %s", tempOrder.Name),
		fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s", formattedDate), fmt.Sprintf("‚è∞ –í—Ä–µ–º—è: %s", timeStr),
		fmt.Sprintf("üì± –¢–µ–ª–µ—Ñ–æ–Ω: %s", formattedPhone), fmt.Sprintf("üìç –ê–¥—Ä–µ—Å: %s", tempOrder.Address),
	}
	if len(tempOrder.Photos) > 0 {
		lines = append(lines, fmt.Sprintf("üì∏ –§–æ—Ç–æ: %d", len(tempOrder.Photos)))
	}
	if len(tempOrder.Videos) > 0 {
		lines = append(lines, fmt.Sprintf("üé• –í–∏–¥–µ–æ: %d", len(tempOrder.Videos)))
	}
	lines = append(lines, fmt.Sprintf("üí≥ –û–ø–ª–∞—Ç–∞: %s", paymentStr))

	viewingUser, _ := bh.getUserFromDB(chatID)
	isOperator := utils.IsOperatorOrHigher(viewingUser.Role)

	// –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
	costDisplay := "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
	if tempOrder.Cost.Valid && tempOrder.Cost.Float64 > 0 {
		costDisplay = fmt.Sprintf("%.0f ‚ÇΩ", tempOrder.Cost.Float64)
	}
	lines = append(lines, fmt.Sprintf("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: *%s*", costDisplay))

	msgText := fmt.Sprintf("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ ‚Ññ%d:\n%s\n%s\n%s\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", tempOrder.ID, strings.Repeat("_", 30), strings.Join(lines, "\n"), strings.Repeat("_", 30))

	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", fmt.Sprintf("edit_field_subcategory_%d", tempOrder.ID)),
		tgbotapi.NewInlineKeyboardButtonData("üìù –û–ø–∏—Å–∞–Ω–∏–µ", fmt.Sprintf("edit_field_description_%d", tempOrder.ID)),
	))
	keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üë§ –ò–º—è", fmt.Sprintf("edit_field_name_%d", tempOrder.ID)),
		tgbotapi.NewInlineKeyboardButtonData("üìÖ –î–∞—Ç–∞", fmt.Sprintf("edit_field_date_%d", tempOrder.ID)),
	))
	keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚è∞ –í—Ä–µ–º—è", fmt.Sprintf("edit_field_time_%d", tempOrder.ID)),
		tgbotapi.NewInlineKeyboardButtonData("üì± –¢–µ–ª–µ—Ñ–æ–Ω", fmt.Sprintf("edit_field_phone_%d", tempOrder.ID)),
	))
	keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìç –ê–¥—Ä–µ—Å", fmt.Sprintf("edit_field_address_%d", tempOrder.ID)),
		tgbotapi.NewInlineKeyboardButtonData("üñºÔ∏è –§–æ—Ç–æ/–í–∏–¥–µ–æ", fmt.Sprintf("edit_field_media_%d", tempOrder.ID)),
	))
	var paymentAndCostRow []tgbotapi.InlineKeyboardButton
	paymentAndCostRow = append(paymentAndCostRow, tgbotapi.NewInlineKeyboardButtonData("üí≥ –û–ø–ª–∞—Ç–∞", fmt.Sprintf("edit_field_payment_%d", tempOrder.ID)))

	if isOperator {
		// –ö–Ω–æ–ø–∫–∞ "–°—Ç–æ–∏–º–æ—Å—Ç—å" –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
		paymentAndCostRow = append(paymentAndCostRow, tgbotapi.NewInlineKeyboardButtonData("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_EDIT_ORDER_COST, tempOrder.ID)))
	}
	if len(paymentAndCostRow) > 0 {
		keyboardRows = append(keyboardRows, paymentAndCostRow)
	}

	if isOperator {
		// –ö–Ω–æ–ø–∫–∞ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏" –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_EDIT_ORDER_EXECS, tempOrder.ID)),
		))
	}

	// –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑, –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –æ–ø—Ü–∏—è–º"
	if tempOrder.OrderAction == "operator_creating_order" {
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∫ –æ–ø—Ü–∏—è–º —Å–æ–∑–¥–∞–Ω–∏—è", fmt.Sprintf("back_to_op_confirm_options_%d", tempOrder.ID)),
		))
	} else { // –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
		keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é", fmt.Sprintf("back_to_confirm_%d", tempOrder.ID)),
		))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)

	finalMessageIDToEditForMenu := tempOrder.CurrentMessageID // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ID –∏–∑ —Å–µ—Å—Å–∏–∏
	if finalMessageIDToEditForMenu == 0 {
		finalMessageIDToEditForMenu = messageIDToEdit // –§–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ 0
	}

	_, err := bh.sendOrEditMessageHelper(chatID, finalMessageIDToEditForMenu, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendEditOrderMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendAskToCancelOrderConfirmation –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendAskToCancelOrderConfirmation(chatID int64, messageIDToEdit int, originalStepMessageID int) {
	log.Printf("BotHandler.SendAskToCancelOrderConfirmation –¥–ª—è chatID %d, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %d, –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∞–≥–∞: %d", chatID, messageIDToEdit, originalStepMessageID)

	msgText := "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?\n\n‚ö†Ô∏è –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", "back_to_main_confirmed_cancel_final"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", fmt.Sprintf("resume_order_creation_%d", originalStepMessageID)),
		),
	)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º sendOrEditMessageHelper, —á—Ç–æ–±—ã –æ–Ω –æ–±–Ω–æ–≤–∏–ª CurrentMessageID
	sentMsg, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendAskToCancelOrderConfirmation: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	} else if sentMsg.MessageID != 0 {
		// CurrentMessageID –æ–±–Ω–æ–≤–ª–µ–Ω –≤ sendOrEditMessageHelper
		log.Printf("SendAskToCancelOrderConfirmation: CurrentMessageID –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ %d", sentMsg.MessageID)
	}
}

// SendCostInputPrompt –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, —Ç–∞–∫ –∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
func (bh *BotHandler) SendCostInputPrompt(chatID int64, orderID int, messageIDToEdit int) {
	log.Printf("BotHandler.SendCostInputPrompt –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å chatID %d, messageIDToEdit %d", orderID, chatID, messageIDToEdit)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.ID = int64(orderID)

	var backCallbackKey string
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –º—ã –ø—Ä–∏—à–ª–∏, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
	if tempOrder.OrderAction == "operator_creating_order" || tempOrder.OrderAction == "driver_creating_order" {
		// –ï—Å–ª–∏ –º—ã –≤ –ø–æ—Ç–æ–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, "–ù–∞–∑–∞–¥" –≤–µ–¥–µ—Ç –∫ –æ–ø—Ü–∏—è–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		bh.Deps.SessionManager.SetState(chatID, constants.STATE_OP_ORDER_COST_INPUT)
		backCallbackKey = fmt.Sprintf("back_to_op_confirm_options_%d", orderID)
	} else {
		// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
		bh.Deps.SessionManager.SetState(chatID, constants.STATE_COST_INPUT)
		backCallbackKey = fmt.Sprintf("view_order_ops_%d", orderID)
		history := bh.Deps.SessionManager.GetHistory(chatID)
		if len(history) > 1 && history[len(history)-2] == constants.STATE_ORDER_EDIT {
			backCallbackKey = fmt.Sprintf("back_to_edit_menu_direct_%d", orderID)
		}
	}

	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	msgText := fmt.Sprintf("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ%d (–≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):", orderID)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backCallbackKey),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendCostInputPrompt: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendCancelReasonInput –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendCancelReasonInput(chatID int64, orderID int, messageIDToEdit int, context string) {
	log.Printf("BotHandler.SendCancelReasonInput –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d, chatID %d, –∫–æ–Ω—Ç–µ–∫—Å—Ç: %s", orderID, chatID, context)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_CANCEL_REASON)

	tempData := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempData.ID = int64(orderID)
	tempData.OrderAction = context // 'reject_cost', 'operator_cancel', 'user_cancel_draft_or_awaiting_cost_no_cost'
	// tempData.CurrentMessageID = messageIDToEdit; // sendOrEditMessageHelper –æ–±–Ω–æ–≤–∏—Ç
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempData)

	msgText := fmt.Sprintf("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ%d:", orderID)

	var backCallback string
	if context == "reject_cost" { // –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å
		backCallback = fmt.Sprintf("confirm_order_final_%d", orderID) // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ (–≥–¥–µ –±—ã–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
	} else if context == "operator_cancel" { // –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω—è–µ—Ç
		backCallback = fmt.Sprintf("view_order_ops_%d", orderID) // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
	} else { // –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫/–Ω–æ–≤—ã–π –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
		backCallback = fmt.Sprintf("confirm_order_final_%d", orderID) // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backCallback),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendCancelReasonInput: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ---

// SendOpOrderCostInputMenu –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendOpOrderCostInputMenu(chatID int64, orderID int64, messageIDToEdit int) {
	log.Printf("SendOpOrderCostInputMenu: –û–ø–µ—Ä–∞—Ç–æ—Ä %d –≤–≤–æ–¥–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #%d", chatID, orderID)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_OP_ORDER_COST_INPUT)

	tempOrder := bh.Deps.SessionManager.GetTempOrder(chatID)
	tempOrder.ID = orderID // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏–∏
	bh.Deps.SessionManager.UpdateTempOrder(chatID, tempOrder)

	msgText := fmt.Sprintf("üí∞ *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏*\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ%d (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500).\n–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).", orderID)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥", fmt.Sprintf("%s_%d", constants.CALLBACK_PREFIX_OP_SKIP_COST, orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø—Ü–∏—è–º —Å–æ–∑–¥–∞–Ω–∏—è", fmt.Sprintf("back_to_op_confirm_options_%d", orderID)),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendOpOrderCostInputMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendOpAssignExecutorsMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –º–µ–Ω—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–∞–∫–∞–∑–∞.
func (bh *BotHandler) SendOpAssignExecutorsMenu(chatID int64, orderID int64, messageIDToEdit int) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ callback_order_view_manage_handlers
	bh.SendAssignExecutorsMenu(chatID, orderID, messageIDToEdit)
}
