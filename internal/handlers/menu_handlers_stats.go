package handlers

import (
	// "database/sql" // Not used directly here
	"fmt"
	"log"
	// "os"   // Not used here
	"strconv"
	// "strings" // Used in utils
	"time"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	// "github.com/xuri/excelize/v2" // Not used here

	"Original/internal/constants"
	"Original/internal/models"
	// "Original/internal/session" // Access via bh.Deps
	"Original/internal/utils"
)

// SendStatsMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
// SendStatsMenu sends the main statistics menu.
func (bh *BotHandler) SendStatsMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendStatsMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STATS_MENU)

	// –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ callback_handler –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
	// Access rights are checked in callback_handler before calling this function

	msgText := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã", "stats_basic_periods"),
			tgbotapi.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", "stats_select_custom_date"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "stats_select_custom_period"),
		),
		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é
		// Button for generating Excel reports can be here or in a separate admin menu
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìë Excel –æ—Ç—á–µ—Ç—ã", "send_excel_menu"), // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é Excel / Go to Excel menu
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendStatsMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendBasicStatsPeriodsMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
// SendBasicStatsPeriodsMenu sends the basic period selection menu for statistics.
func (bh *BotHandler) SendBasicStatsPeriodsMenu(chatID int64, messageIDToEdit int) {
	log.Printf("BotHandler.SendBasicStatsPeriodsMenu –¥–ª—è chatID %d, messageIDToEdit: %d", chatID, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STATS_DATE) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ / State awaiting selection of a specific period

	msgText := "üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è", "stats_get_today"),
			tgbotapi.NewInlineKeyboardButtonData("–í—á–µ—Ä–∞", "stats_get_yesterday"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "stats_get_current_week"),
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "stats_get_current_month"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", "stats_get_last_week"),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "stats_get_last_month"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_menu"),
		),
	)
	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendBasicStatsPeriodsMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendMonthSelectionMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
// year - –≥–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞.
// context - "custom_date", "period_start", "period_end" –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤.
// SendMonthSelectionMenu sends the month selection menu for statistics.
// year - year for month selection.
// context - "custom_date", "period_start", "period_end" for forming correct callbacks.
func (bh *BotHandler) SendMonthSelectionMenu(chatID int64, messageIDToEdit int, year int, context string) {
	log.Printf("BotHandler.SendMonthSelectionMenu –¥–ª—è chatID %d, –≥–æ–¥: %d, –∫–æ–Ω—Ç–µ–∫—Å—Ç: %s, messageIDToEdit: %d", chatID, year, context, messageIDToEdit)

	var stateToSet string
	switch context {
	case "custom_date":
		stateToSet = constants.STATE_STATS_MONTH // –î–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã / For selecting month of a specific date
	case "period_start":
		stateToSet = constants.STATE_STATS_PERIOD // –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (–º–µ—Å—è—Ü) / For selecting start of period (month)
	case "period_end":
		stateToSet = constants.STATE_STATS_PERIOD_END // –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ (–º–µ—Å—è—Ü) / For selecting end of period (month)
	default:
		log.Printf("SendMonthSelectionMenu: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç '%s'", context)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞—Ç—ã.")
		return
	}
	bh.Deps.SessionManager.SetState(chatID, stateToSet)

	msgText := fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è %d –≥–æ–¥–∞:", year)
	if context == "period_start" {
		msgText = fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ *–ù–ê–ß–ê–õ–¨–ù–´–ô* –º–µ—Å—è—Ü –¥–ª—è %d –≥–æ–¥–∞:", year)
	} else if context == "period_end" {
		msgText = fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ *–ö–û–ù–ï–ß–ù–´–ô* –º–µ—Å—è—Ü –¥–ª—è %d –≥–æ–¥–∞:", year)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	months := []time.Month{
		time.January, time.February, time.March, time.April,
		time.May, time.June, time.July, time.August,
		time.September, time.October, time.November, time.December,
	}

	currentMonthButtons := []tgbotapi.InlineKeyboardButton{}
	for i, month := range months {
		// –ö–æ–ª–ª–±—ç–∫: stats_select_month_–ö–û–ù–¢–ï–ö–°–¢_–ì–û–î_–ù–û–ú–ï–†–ú–ï–°–Ø–¶–ê
		// Callback: stats_select_month_CONTEXT_YEAR_MONTHNUMBER
		callbackData := fmt.Sprintf("stats_select_month_%s_%d_%d", context, year, int(month))
		currentMonthButtons = append(currentMonthButtons, tgbotapi.NewInlineKeyboardButtonData(constants.MonthMap[month], callbackData))
		if (i+1)%3 == 0 || i == len(months)-1 { // –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É / 3 buttons per row
			rows = append(rows, currentMonthButtons)
			currentMonthButtons = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–æ–¥–∞–º / Year navigation buttons
	yearNavRow := []tgbotapi.InlineKeyboardButton{}
	currentSystemYear := time.Now().Year()
	if year > currentSystemYear-5 { // –ü–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–æ 5 –ª–µ—Ç –Ω–∞–∑–∞–¥ / Allow selection up to 5 years back
		yearNavRow = append(yearNavRow, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚¨ÖÔ∏è %d –≥–æ–¥", year-1), fmt.Sprintf("stats_year_nav_%s_%d", context, year-1)))
	}
	if year < currentSystemYear { // –ü–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ (–µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ —Å –ø—Ä–æ—à–ª–æ–≥–æ) / Allow selection up to current year (if started from past)
		yearNavRow = append(yearNavRow, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%d –≥–æ–¥ ‚û°Ô∏è", year+1), fmt.Sprintf("stats_year_nav_%s_%d", context, year+1)))
	}
	if len(yearNavRow) > 0 {
		rows = append(rows, yearNavRow)
	}

	var backToMenuCallback string
	if context == "custom_date" {
		backToMenuCallback = "stats_select_custom_date" // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É "–≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É/–ø–µ—Ä–∏–æ–¥" / Return to "select date/period"
	} else if context == "period_start" {
		backToMenuCallback = "stats_select_custom_period"
	} else { // period_end
		// –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, "–Ω–∞–∑–∞–¥" –¥–æ–ª–∂–Ω–æ –≤–µ—Å—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ —Ç–æ–≥–æ –∂–µ –≥–æ–¥–∞
		// –∏–ª–∏ –∫ –æ–±—â–µ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
		// When selecting end month, "back" should lead to start month selection of the same year
		// or to general statistics menu if something went wrong.
		// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –≤–µ–¥–µ–º –≤ –æ–±—â–µ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. / For simplicity, lead to general statistics menu for now.
		backToMenuCallback = "stats_menu"
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", backToMenuCallback)))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendMonthSelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// SendDaySelectionMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
// context - "custom_date", "period_start", "period_end"
// SendDaySelectionMenu sends the day selection menu for statistics.
// context - "custom_date", "period_start", "period_end"
func (bh *BotHandler) SendDaySelectionMenu(chatID int64, messageIDToEdit int, year int, month time.Month, context string) {
	log.Printf("BotHandler.SendDaySelectionMenu –¥–ª—è chatID %d, %d-%s, –∫–æ–Ω—Ç–µ–∫—Å—Ç: %s, messageIDToEdit: %d", chatID, year, month, context, messageIDToEdit)

	var stateToSet string
	switch context {
	case "custom_date":
		stateToSet = constants.STATE_STATS_DAY
	case "period_start":
		stateToSet = constants.STATE_STATS_PERIOD // –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–∫–∞ –Ω–µ –≤—ã–±–µ—Ä–µ–º –¥–µ–Ω—å / Remain in this state until day is selected
	case "period_end":
		stateToSet = constants.STATE_STATS_PERIOD_END
	default:
		log.Printf("SendDaySelectionMenu: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç '%s'", context)
		bh.sendErrorMessageHelper(chatID, messageIDToEdit, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–Ω—è.")
		return
	}
	bh.Deps.SessionManager.SetState(chatID, stateToSet)

	msgText := fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è %s %d –≥–æ–¥–∞:", constants.MonthMap[month], year)
	if context == "period_start" {
		msgText = fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ *–ù–ê–ß–ê–õ–¨–ù–´–ô* –¥–µ–Ω—å –¥–ª—è %s %d:", constants.MonthMap[month], year)
	} else if context == "period_end" {
		msgText = fmt.Sprintf("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ *–ö–û–ù–ï–ß–ù–´–ô* –¥–µ–Ω—å –¥–ª—è %s %d:", constants.MonthMap[month], year)
	}

	daysInMonth := time.Date(year, month+1, 0, 0, 0, 0, 0, time.UTC).Day() // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ / Number of days in month
	var rows [][]tgbotapi.InlineKeyboardButton
	currentDayButtons := []tgbotapi.InlineKeyboardButton{}

	for day := 1; day <= daysInMonth; day++ {
		// –ö–æ–ª–ª–±—ç–∫: stats_select_day_–ö–û–ù–¢–ï–ö–°–¢_–ì–û–î_–ù–û–ú–ï–†–ú–ï–°–Ø–¶–ê_–î–ï–ù–¨
		// Callback: stats_select_day_CONTEXT_YEAR_MONTHNUMBER_DAY
		callbackData := fmt.Sprintf("stats_select_day_%s_%d_%d_%d", context, year, int(month), day)
		currentDayButtons = append(currentDayButtons, tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(day), callbackData))
		if day%7 == 0 || day == daysInMonth { // –ü–æ 7 –¥–Ω–µ–π –≤ —Ä—è–¥—É / 7 days per row
			rows = append(rows, currentDayButtons)
			currentDayButtons = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(currentDayButtons) > 0 { // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å / Add remaining buttons if any
		rows = append(rows, currentDayButtons)
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞ —Ç–æ–≥–æ –∂–µ –≥–æ–¥–∞
	// "Back" button to month selection of the same year
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞", fmt.Sprintf("stats_year_nav_%s_%d", context, year))))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("SendDaySelectionMenu: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}

// DisplayStats –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
// DisplayStats displays the retrieved statistics.
func (bh *BotHandler) DisplayStats(chatID int64, messageIDToEdit int, stats models.Stats, periodDescription string) {
	log.Printf("BotHandler.DisplayStats –¥–ª—è chatID %d, –ø–µ—Ä–∏–æ–¥: %s, messageIDToEdit: %d", chatID, periodDescription, messageIDToEdit)
	bh.Deps.SessionManager.SetState(chatID, constants.STATE_STATS_MENU) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ / Return to statistics menu after viewing

	msgText := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ *%s*:\n\n", utils.EscapeTelegramMarkdown(periodDescription))
	msgText += "üì¶ *–ó–∞–∫–∞–∑—ã:*\n"
	if stats.TotalOrders > 0 {
		msgText += fmt.Sprintf("  –í—Å–µ–≥–æ: %d\n", stats.TotalOrders)
		if stats.NewOrders > 0 {
			msgText += fmt.Sprintf("  %s –ù–æ–≤—ã—Ö: %d\n", constants.StatusEmojiMap[constants.STATUS_NEW], stats.NewOrders)
		}
		if stats.InProgressOrders > 0 {
			msgText += fmt.Sprintf("  %s –í —Ä–∞–±–æ—Ç–µ: %d\n", constants.StatusEmojiMap[constants.STATUS_INPROGRESS], stats.InProgressOrders)
		}
		if stats.CompletedOrders > 0 {
			msgText += fmt.Sprintf("  %s –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: %d\n", constants.StatusEmojiMap[constants.STATUS_COMPLETED], stats.CompletedOrders)
		}
		if stats.CanceledOrders > 0 {
			msgText += fmt.Sprintf("  %s –û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö: %d\n", constants.StatusEmojiMap[constants.STATUS_CANCELED], stats.CanceledOrders)
		}
	} else {
		msgText += "  –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç\n"
	}

	msgText += "\nüóÇÔ∏è *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∏–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä–∏–æ–¥–∞):*\n"
	if stats.WasteOrders > 0 {
		msgText += fmt.Sprintf("  %s –ú—É—Å–æ—Ä: %d\n", constants.CategoryEmojiMap[constants.CAT_WASTE], stats.WasteOrders)
	}
	if stats.DemolitionOrders > 0 {
		msgText += fmt.Sprintf("  %s –î–µ–º–æ–Ω—Ç–∞–∂: %d\n", constants.CategoryEmojiMap[constants.CAT_DEMOLITION], stats.DemolitionOrders)
	}
	if stats.MaterialOrders > 0 {
		msgText += fmt.Sprintf("  %s –°—Ç—Ä–æ–π–º–∞—Ç–µ—Ä–∏–∞–ª—ã: %d\n", constants.CategoryEmojiMap[constants.CAT_MATERIALS], stats.MaterialOrders)
	}
	if stats.WasteOrders == 0 && stats.DemolitionOrders == 0 && stats.MaterialOrders == 0 {
		msgText += "  –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
	}

	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π / Display of financial indicators
	// --- MODIFICATION FOR POINT 10 ---
	msgText += fmt.Sprintf("\nüí∞ –í—ã—Ä—É—á–∫–∞ (–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º): *%.0f ‚ÇΩ*\n", stats.Revenue)            // Changed from %.0f
	msgText += fmt.Sprintf("üìâ –ó–∞—Ç—Ä–∞—Ç—ã (–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º, –≤–∫–ª—é—á–∞—è –ó–ü): *%.0f ‚ÇΩ*\n", stats.Expenses) // Changed from %.0f
	msgText += fmt.Sprintf("üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–í—ã—Ä—É—á–∫–∞ - –ó–∞—Ç—Ä–∞—Ç—ã): *%.0f ‚ÇΩ*\n", stats.Profit)             // Changed from %.0f
	// --- END MODIFICATION FOR POINT 10 ---
	// msgText += fmt.Sprintf("üí∏ –î–æ–ª–≥–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ): %.0f ‚ÇΩ\n", stats.Debts) // –ü–æ–ª–µ Debts –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è / Debts field not used yet
	msgText += fmt.Sprintf("\nüë• –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: *%d*", stats.NewClients)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_menu"),
			tgbotapi.NewInlineKeyboardButtonData("üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)

	_, err := bh.sendOrEditMessageHelper(chatID, messageIDToEdit, msgText, &keyboard, tgbotapi.ModeMarkdown)
	if err != nil {
		log.Printf("DisplayStats: –û—à–∏–±–∫–∞ –¥–ª—è chatID %d: %v", chatID, err)
	}
}
