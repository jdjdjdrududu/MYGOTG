// –§–∞–π–ª: internal/utils/formatters.go

package utils

import (
	"Original/internal/constants" // –î–ª—è constants.MonthMap, WasteSubcategoryMap –∏ —Ç.–¥.
	"Original/internal/models"    // –î–ª—è models.Order, models.User
	"fmt"
	"log"
	"regexp"
	"strconv" // –ù–£–ñ–ù–û –î–õ–Ø –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò
	"strings"
	"time" // –î–ª—è GetRussianMonthName

	"github.com/google/uuid" // –î–ª—è GenerateUUID
)

// Int64SliceToStringSlice –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–∞–π—Å int64 –≤ —Å–ª–∞–π—Å string.
func Int64SliceToStringSlice(int64Slice []int64) []string {
	stringSlice := make([]string, len(int64Slice))
	for i, v := range int64Slice {
		stringSlice[i] = strconv.FormatInt(v, 10)
	}
	return stringSlice
}

// FormatDateForDisplay —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "25 –º–∞—è").
// dateStr –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD" –∏–ª–∏ "02 January 2006" –∏–ª–∏ –¥—Ä—É–≥–∏—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö ValidateDate.
func FormatDateForDisplay(dateStr string) (string, error) {
	if dateStr == "" {
		return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞", nil
	}
	parsedDate, err := ValidateDate(dateStr)
	if err != nil {
		log.Printf("FormatDateForDisplay: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '%s' —á–µ—Ä–µ–∑ ValidateDate: %v", dateStr, err)
		return dateStr, err
	}
	day := parsedDate.Day()
	monthName := constants.MonthMap[parsedDate.Month()]
	return fmt.Sprintf("%d %s", day, monthName), nil
}

// StripEmoji —É–¥–∞–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏.
func StripEmoji(text string) string {
	re := regexp.MustCompile(`[\p{So}\p{Sk}]`)
	return strings.TrimSpace(re.ReplaceAllString(text, ""))
}

// FormatPhoneNumber —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
func FormatPhoneNumber(phone string) string {
	re := regexp.MustCompile(`[^\d+]`)
	cleanedPhone := re.ReplaceAllString(phone, "")

	if strings.HasPrefix(cleanedPhone, "+7") && len(cleanedPhone) == 12 {
		return fmt.Sprintf("+7 (%s) %s-%s-%s", cleanedPhone[2:5], cleanedPhone[5:8], cleanedPhone[8:10], cleanedPhone[10:12])
	}
	if len(cleanedPhone) == 11 && (cleanedPhone[0] == '8' || cleanedPhone[0] == '7') {
		return fmt.Sprintf("+7 (%s) %s-%s-%s", cleanedPhone[1:4], cleanedPhone[4:7], cleanedPhone[7:9], cleanedPhone[9:11])
	}
	if len(cleanedPhone) == 10 {
		return fmt.Sprintf("+7 (%s) %s-%s-%s", cleanedPhone[0:3], cleanedPhone[3:6], cleanedPhone[6:8], cleanedPhone[8:10])
	}
	return phone
}

// EscapeTelegramMarkdown —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown (—Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å).
func EscapeTelegramMarkdown(text string) string {
	var replacer = strings.NewReplacer(
		"_", "\\_", "*", "\\*", "`", "\\`", "[", "\\[",
	)
	return replacer.Replace(text)
}

// EscapeTelegramMarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.
func EscapeTelegramMarkdownV2(text string) string {
	var replacer = strings.NewReplacer(
		"_", "\\_", "*", "\\*", "[", "\\[", "]", "\\]", "(", "\\(", ")", "\\)",
		"~", "\\~", "`", "\\`", ">", "\\>", "#", "\\#", "+", "\\+", "-", "\\-",
		"=", "\\=", "|", "\\|", "{", "\\{", "}", "\\}", ".", "\\.", "!", "\\!",
	)
	return replacer.Replace(text)
}

// GetDisplaySubcategory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
func GetDisplaySubcategory(order models.Order) string {
	if order.Category == constants.CAT_WASTE { //
		if val, ok := constants.WasteSubcategoryMap[order.Subcategory]; ok { //
			return val
		}
		if shortVal, okShort := constants.WasteSubcategoryShortMap[order.Subcategory]; okShort { //
			return shortVal
		}
		log.Printf("GetDisplaySubcategory: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º—É—Å–æ—Ä–∞ '%s'", order.Subcategory)
		return order.Subcategory
	} else if order.Category == constants.CAT_DEMOLITION { //
		if val, ok := constants.DemolitionSubcategoryMap[order.Subcategory]; ok { //
			return val
		}
		if shortVal, okShort := constants.DemolitionSubcategoryShortMap[order.Subcategory]; okShort { //
			return shortVal
		}
		log.Printf("GetDisplaySubcategory: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–µ–º–æ–Ω—Ç–∞–∂–∞ '%s'", order.Subcategory)
		return order.Subcategory
	}
	return order.Subcategory
}

// GetRoleDisplayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
func GetRoleDisplayName(roleKey string) string {
	names := map[string]string{
		constants.ROLE_USER:         "üôé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",       //
		constants.ROLE_OPERATOR:     "üë©‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä",         //
		constants.ROLE_MAINOPERATOR: "üë®‚Äçüíº –ì–ª–∞–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", //
		constants.ROLE_DRIVER:       "üöí –í–æ–¥–∏—Ç–µ–ª—å",           //
		constants.ROLE_LOADER:       "üë∑ –ì—Ä—É–∑—á–∏–∫",            //
		constants.ROLE_OWNER:        "üëë –í–ª–∞–¥–µ–ª–µ—Ü",           //
	}
	if name, ok := names[roleKey]; ok {
		return name
	}
	return roleKey
}

// GetBackText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–∞ –∫–æ–ª–ª–±—ç–∫–∞.
func GetBackText(callbackKey string) (string, bool) {
	customBackTexts := map[string]string{
		"manage_orders":                       "üîô –ö —É–ø—Ä. –∑–∞–∫–∞–∑–∞–º–∏",
		"staff_menu":                          "üîô –í –º–µ–Ω—é —à—Ç–∞—Ç–∞",
		"stats_menu":                          "üîô –í –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
		constants.STATE_STAFF_ADD_NAME:        "üîô –í –º–µ–Ω—é —à—Ç–∞—Ç–∞",   //
		constants.STATE_STAFF_ADD_SURNAME:     "üîô –ö –∏–º–µ–Ω–∏",        //
		constants.STATE_STAFF_ADD_NICKNAME:    "üîô –ö —Ñ–∞–º–∏–ª–∏–∏",      //
		constants.STATE_STAFF_ADD_PHONE:       "üîô –ö –ø–æ–∑—ã–≤–Ω–æ–º—É",    //
		constants.STATE_STAFF_ADD_CHATID:      "üîô –ö —Ç–µ–ª–µ—Ñ–æ–Ω—É",     //
		constants.STATE_STAFF_ADD_CARD_NUMBER: "üîô –ö ChatID",       //
		constants.STATE_STAFF_ADD_ROLE:        "üîô –ö –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", //
		"back_to_category":                    "‚¨ÖÔ∏è –ö –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º",
		"back_to_subcategory":                 "‚¨ÖÔ∏è –ö –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
		// --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è "–ù–∞–∑–∞–¥ –∫ –û–ø–∏—Å–∞–Ω–∏—é" ---
		"back_to_description": "‚¨ÖÔ∏è –ö –û–ø–∏—Å–∞–Ω–∏—é",
		// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
		"back_to_name":    "‚¨ÖÔ∏è –ö –ò–º–µ–Ω–∏",
		"back_to_date":    "‚¨ÖÔ∏è –ö –î–∞—Ç–µ",
		"back_to_time":    "‚¨ÖÔ∏è –ö–æ –í—Ä–µ–º–µ–Ω–∏",
		"back_to_phone":   "‚¨ÖÔ∏è –ö –¢–µ–ª–µ—Ñ–æ–Ω—É",
		"back_to_address": "‚¨ÖÔ∏è –ö –ê–¥—Ä–µ—Å—É",
		"back_to_photo":   "‚¨ÖÔ∏è –ö –§–æ—Ç–æ",
		"back_to_payment": "‚¨ÖÔ∏è –ö –û–ø–ª–∞—Ç–µ",
		"back_to_main":    "üè¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
		// –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–ª–æ—É –æ—Ç—á–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è
		constants.CALLBACK_PREFIX_DRIVER_SETTLEMENT + "_back_to_fuel_prompt":          "üîô –ö —Ç–æ–ø–ª–∏–≤—É",          //
		constants.CALLBACK_PREFIX_DRIVER_SETTLEMENT + "_back_to_other_prompt":         "üîô –ö –ø—Ä–æ—á–∏–º —Ä–∞—Å—Ö–æ–¥–∞–º",  //
		constants.CALLBACK_PREFIX_DRIVER_SETTLEMENT + "_back_to_loaders_count_prompt": "üîô –ö –∫–æ–ª-–≤—É –≥—Ä—É–∑—á–∏–∫–æ–≤", //
		// –î–ª—è loader_id –∏ loader_salary –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º
	}
	if text, ok := customBackTexts[callbackKey]; ok {
		return text, true
	}
	if strings.HasPrefix(callbackKey, "staff_info_") {
		return "üîô –ö –∏–Ω—Ñ–æ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ", true
	}
	if strings.HasPrefix(callbackKey, "staff_edit_menu_") {
		return "üîô –ö –≤—ã–±–æ—Ä—É –ø–æ–ª—è", true
	}
	if strings.HasPrefix(callbackKey, constants.CALLBACK_PREFIX_DRIVER_SETTLEMENT+"_back_to_loader_id_prompt") { //
		return "üîô –ö ID –≥—Ä—É–∑—á–∏–∫–∞", true
	}
	if strings.HasPrefix(callbackKey, constants.CALLBACK_PREFIX_DRIVER_SETTLEMENT+"_back_to_loader_salary_prompt") { //
		return "üîô –ö –ó–ü –≥—Ä—É–∑—á–∏–∫–∞", true
	}
	return "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", false
}

// GetRussianMonthName –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —Ä—É—Å—Å–∫–æ–µ.
func GetRussianMonthName(englishMonthName string) string {
	var m time.Month
	switch strings.ToLower(englishMonthName) {
	case "january":
		m = time.January
	case "february":
		m = time.February
	case "march":
		m = time.March
	case "april":
		m = time.April
	case "may":
		m = time.May
	case "june":
		m = time.June
	case "july":
		m = time.July
	case "august":
		m = time.August
	case "september":
		m = time.September
	case "october":
		m = time.October
	case "november":
		m = time.November
	case "december":
		m = time.December
	default:
		return englishMonthName
	}
	if russianName, ok := constants.MonthMap[m]; ok { //
		return russianName
	}
	return englishMonthName
}

// GenerateUUID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π UUID.
func GenerateUUID() string {
	return uuid.New().String()
}

// GetUserDisplayName —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func GetUserDisplayName(user models.User) string {
	nameParts := []string{}
	if user.FirstName != "" {
		nameParts = append(nameParts, user.FirstName)
	}
	if user.LastName != "" {
		nameParts = append(nameParts, user.LastName)
	}
	name := strings.TrimSpace(strings.Join(nameParts, " "))

	if name == "" {
		if user.Nickname.Valid && user.Nickname.String != "" {
			name = user.Nickname.String
		} else {
			name = fmt.Sprintf("User %d", user.ChatID)
		}
	} else {
		if user.Nickname.Valid && user.Nickname.String != "" {
			name = fmt.Sprintf("%s (@%s)", name, user.Nickname.String)
		}
	}
	return name
}
